{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2021-07-15T00:00:59.404195+00:00",
  "repo": "NTAP/rfc8312bis",
  "labels": [
    {
      "name": "design",
      "description": "Normative change relative to RFC8312 or earlier bis versions",
      "color": "d73a4a"
    },
    {
      "name": "editorial",
      "description": "Editorial change relative to RFC8312 or earlier bis versions",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "help wanted",
      "description": "Looking for someone resolve this issue",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "WG LC",
      "description": "",
      "color": "fef2c0"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "MDU6SXNzdWU3NDI4NTEzNzA=",
      "title": "Update K definition (Eq. 2) to account for Fast Convergence",
      "url": "https://github.com/NTAP/rfc8312bis/issues/1",
      "state": "CLOSED",
      "author": "WesleyRosenblum",
      "authorAssociation": "NONE",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "design"
      ],
      "body": "As discussed in [this tcpm thread](https://mailarchive.ietf.org/arch/msg/tcpm/O7Q55oXcoI1XNBZ_wAQOMdhRQNY/), after fast convergence (section 4.6), the candidate target value of the congestion window may be less than the current congestion window. For example, say cwnd = 100, beta_cubic = .7 and a congestion event occurs:\r\n\r\n```\r\nW_max = cwnd = 100;\r\nW_max = W_max*(1.0+beta_cubic)/2.0 = 85   // further reduce W_max for fast convergence\r\n\r\ncwnd = cwnd * beta_cubic = 70\t          // window reduction\r\nW_cubic(0) = W_max * beta_cubic = 59.5\r\n```\r\n\r\nIf we were to enter congestion avoidance at this point, with a small enough RTT, the candidate target congestion window as calculated by W_cubic(t+RTT) may be less than the current congestion window (~59.5 < 70). \r\n\r\nThe suggestion in the thread from Lisong Xu and Vidhi Goel is to change Equation 2 to:\r\n```\r\nK = cubic_root((W_max - cwnd)/C) (Eq. 2)\r\n```\r\nwhere cwnd is the congestion window size at the beginning of the current congestion avoidance. This will ensure the target is greater than the current congestion window, and in my opinion is a more clear representation of what K represents.",
      "createdAt": "2020-11-13T23:36:02Z",
      "updatedAt": "2020-11-24T09:04:13Z",
      "closedAt": "2020-11-24T09:04:13Z",
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, we can change Equation 2 in the RFC to the following equation where cwnd is the cwnd at the beginning of the current congestion avoidance stage. \r\n\r\n`\r\nK = cubic_root((W_max - cwnd)/C)  (Eq. 2)\r\n`\r\n\r\nTo be exactly consistent with the Linux Cubic implementation, we can change Equation 2 to the following statement, where cwnd is still the cwnd at the beginning of the current congestion avoidance stage. \r\n\r\n`\r\nif (cwnd < W_max)\r\n  K = cubic_root((W_max - cwnd)/C)  \r\nelse{\r\n  K = 0  \r\n  W_max = cwnd\r\n}\r\n\r\n`\r\n\r\nThank you!\r\n",
          "createdAt": "2020-11-14T22:14:57Z",
          "updatedAt": "2020-11-14T22:14:57Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@lisongxu thanks for confirming that Linux is doing something very similar! We should poll other implementors to see if they are already doing this, or would start to if we were to make this change.\n\n@goelvidhi could you update the PR accordingly?",
          "createdAt": "2020-11-15T08:24:09Z",
          "updatedAt": "2020-11-15T08:24:09Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu, in the below equation, setting W_max = cwnd seems superfluous. Also, next time we want to compute K, it will enter the first condition and end up with K = 0.\r\n```\r\nif (cwnd < W_max)\r\nK = cubic_root((W_max - cwnd)/C)\r\nelse{\r\nK = 0\r\nW_max = cwnd\r\n}",
          "createdAt": "2020-11-16T07:12:36Z",
          "updatedAt": "2020-11-16T07:12:52Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu We may remove W_max = cwnd under the else {} since this is about how we compute K? Sections on convex and concave regions already explained what happens when cwnd is greater than equal to Wmax.",
          "createdAt": "2020-11-17T04:23:18Z",
          "updatedAt": "2020-11-17T04:23:18Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "We calculate K only once at the beginning of a congestion avoidance stage.  \r\n\r\nStatement \"W_max = cwnd\" corresponds to line 249 of [https://github.com/torvalds/linux/blob/master/net/ipv4/tcp_cubic.c#L249](url).  Without this statement, the new cwnd calculated at t=0 using Equation (1) would be even lower than the current cwnd.\r\n`\r\nW_cubic(t) = C*(t-K)^3 + W_max (Eq. 1)\r\n`\r\n\r\nBut I agree that we should not change W_max, as W_max is also used by fast convergence. \r\n\r\nMaybe we should introduce a new variable origin_point as Linux does. \r\n\r\nAt the beginning of a congestion avoidance stage, we set the value of K and origin_point as follows\r\n\r\n```\r\nif (cwnd < W_max)\r\n{\r\n    K = cubic_root((W_max - cwnd)/C)\r\n    origin_point = W_max\r\n}\r\nelse\r\n{\r\n    K = 0\r\n    origin_point = cwnd\r\n}\r\n```\r\n\r\nDuring the congestion avoidance stage, we calculate cwnd as follows\r\n\r\n`\r\nW_cubic(t) = C*(t-K)^3 + origin_point (Eq. 1)\r\n`\r\n\r\n\r\n \r\n",
          "createdAt": "2020-11-17T05:09:24Z",
          "updatedAt": "2020-11-17T05:09:24Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree. Yes, without a new variable, it is hard. Now, it is closer to Linux implementation.",
          "createdAt": "2020-11-17T05:17:31Z",
          "updatedAt": "2020-11-17T05:17:31Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu this is exactly what we do for Apple's CUBIC as well.\r\n\r\nI am open to adding `origin_point` if there is no objection about additional complexity.",
          "createdAt": "2020-11-17T06:27:57Z",
          "updatedAt": "2020-11-17T06:27:57Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "I'd say let's add it. @pravb is Windows is doing something similar?",
          "createdAt": "2020-11-17T06:29:42Z",
          "updatedAt": "2020-11-17T06:30:30Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I want to add a clarification point to my previous comment about the below code. We do this only when we enter CA without any loss i.e. when cwnd > ssthresh.\r\n\r\n```\r\nif (cwnd < W_max)\r\n{\r\n    K = cubic_root((W_max - cwnd)/C)\r\n    origin_point = W_max\r\n}\r\nelse\r\n{\r\n    K = 0\r\n    origin_point = cwnd\r\n}\r\n```\r\n\r\nNote that at the beginning of CA, we should only do the below, as we want to start with W_max and not current value of cwnd. Also, as W_max will be greater than cwnd at the start of CA, the else condition doesn't apply.\r\n```\r\nK = cubic_root((W_max - cwnd)/C)\r\norigin_point = W_max\r\n```\r\n\r\nSo, I think we can leave Eq. 1 as is.",
          "createdAt": "2020-11-17T07:26:13Z",
          "updatedAt": "2020-11-17T07:26:13Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "There is another important difference between this RFC and Linux TCP in fast recovery. RFC assumes that cwnd is set to W_max * beta_cubic in fast recovery and remains as W_max * beta_cubic at the beginning of a congestion avoidance stage. However, the behavior of Linux TCP in/around fast recovery is complicated, such as adjusting cwnd based on the number of packets in flight, and adjusting cwnd in case of undo. As a result, at the beginning of a congestion avoidance stage, cwnd may or may not be W_max * beta_cubic, and sometimes may be even higher than W_max. \r\n\r\nI guess this RFC does not need to follow the fast recovery of Linux TCP, but it is safer to add that else condition. \r\n\r\nThanks",
          "createdAt": "2020-11-17T14:19:14Z",
          "updatedAt": "2020-11-17T14:19:14Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes,  @goelvidhi   you are right that we do this only when cwnd > ssthresh",
          "createdAt": "2020-11-17T14:20:07Z",
          "updatedAt": "2020-11-17T14:20:07Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "> @lisongxu this is exactly what we do for Apple's CUBIC as well.\r\n> \r\n> I am open to adding `origin_point` if there is no objection about additional complexity.\r\n\r\nThanks, @goelvidhi for confirming Apple's implementation!",
          "createdAt": "2020-11-17T15:19:21Z",
          "updatedAt": "2020-11-17T15:19:21Z"
        },
        {
          "author": "maolson-msft",
          "authorAssociation": "NONE",
          "body": "Rather than patching the K computation, why not set (after applying the fast convergence logic to W_max)\r\nCWnd = BETA * W_max\r\n\r\nrather than\r\nCWnd = BETA * CWnd\r\n\r\nwhen we reduce the window? I.e., wrap the fast-convergence reduction into both W_max and the CWnd. That seems more harmonious with the fast convergence algorithm, and at least for me, it's easier to reason about its effect.",
          "createdAt": "2020-11-17T19:49:38Z",
          "updatedAt": "2020-11-17T19:49:38Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@maolson-msft Yes, that is another possible design choice. The main reason to update the K equation is to revise the RFC to be consistent with the Linux cubic implementation and the original paper.  Thanks",
          "createdAt": "2020-11-18T02:13:37Z",
          "updatedAt": "2020-11-18T02:13:37Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@maolson-msft that would also require updating `ssthresh`, otherwise we will end up in slow start. I think the current approach is fine.",
          "createdAt": "2020-11-18T05:42:20Z",
          "updatedAt": "2020-11-18T05:42:20Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu I updated the Eq. 2 with an else condition. Also, added some text for how cwnd can be set. Could you please review https://github.com/NTAP/rfc8312bis/pull/3?",
          "createdAt": "2020-11-18T06:17:47Z",
          "updatedAt": "2020-11-18T06:17:47Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "If we do not use variable origin_point, then it is possible that W_cubic(t) may be lower than the current cwnd.  In this case, I would suggest changing Equation (1) as follows, which also contains the bug fix. \r\n```\r\n    W_cubic(t) = C*(t-K)^3 + W_max\r\n    if (W_cubic(t) < cwnd)                      // lower bound\r\n        W_cubic(t)  =  cwnd\r\n    else if (W_cubic(t) > 2* cwnd)              // upper bound\r\n        W_cubic(t)  =  2 * cwnd\r\nwhere cwnd is the current congestion window size.\r\n```\r\n\r\nBelow is a slightly revised Equation (2)\r\n```\r\n   if (cwnd_0 < W_max) {\r\n        K = cubic_root(W_max - cwnd_0) / C             \r\n    } else {\r\n        K = 0\r\n    }\r\nwhere cwnd_0 is the congestion window at the beginning of a congestion avoidance stage, is calculated using beta_cubic in {{mult-dec}}, although implementations can further adjust the congestion window size based on other fast recovery mechanisms. We discuss how we set beta_cubic in {{mult-dec}} and how we set C in {{discussion}}.\r\n```\r\n",
          "createdAt": "2020-11-18T14:24:57Z",
          "updatedAt": "2020-11-18T14:24:57Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Why aren't we using origin_point?",
          "createdAt": "2020-11-18T14:36:28Z",
          "updatedAt": "2020-11-18T14:36:28Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "As we initially thought that the origin_point was needed only when cwnd > ssthresh without loss.\r\n\r\nBut @lisongxu mentioned, cwnd could become greater than W_max at the start of CA (after a congestion event). I want to understand in what case would it become greater. \r\n1. Using bytes in flight shouldn't set cwnd greater than W_max\r\n2. For any undo, W_max should also be undo'ed.\r\n\r\nAnything else?",
          "createdAt": "2020-11-18T23:32:39Z",
          "updatedAt": "2020-11-18T23:39:46Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> If we do not use variable origin_point, then it is possible that W_cubic(t) may be lower than the current cwnd. In this case, I would suggest changing Equation (1) as follows, which also contains the bug fix.\r\n> \r\n> ```\r\n>     W_cubic(t) = C*(t-K)^3 + W_max\r\n>     if (W_cubic(t) < cwnd)                      // lower bound\r\n>         W_cubic(t)  =  cwnd\r\n>     else if (W_cubic(t) > 2* cwnd)              // upper bound\r\n>         W_cubic(t)  =  2 * cwnd\r\n> where cwnd is the current congestion window size.\r\n> ```\r\n> \r\n> Below is a slightly revised Equation (2)\r\n> \r\n> ```\r\n>    if (cwnd_0 < W_max) {\r\n>         K = cubic_root(W_max - cwnd_0) / C             \r\n>     } else {\r\n>         K = 0\r\n>     }\r\n> where cwnd_0 is the congestion window at the beginning of a congestion avoidance stage, is calculated using beta_cubic in {{mult-dec}}, although implementations can further adjust the congestion window size based on other fast recovery mechanisms. We discuss how we set beta_cubic in {{mult-dec}} and how we set C in {{discussion}}.\r\n> ```\r\n\r\nIf I use cwnd_0 (which is beta_cubic * W_max) , then I don't need the else condition, right?",
          "createdAt": "2020-11-18T23:38:40Z",
          "updatedAt": "2020-11-18T23:39:07Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "How about revising Section 4.1 as follows?\r\n\r\nCUBIC uses the following window increase function:\r\n```\r\n       W_cubic(t) = C*(t-K)^3 + W_max (Eq. 1)\r\n```\r\n   where C is a constant fixed to determine the aggressiveness of window increase in high BDP networks and is discussed in Section 5, t is the elapsed time from the beginning of the current congestion avoidance stage, and K is the time period that the above function takes to increase the current window size to W_max if there are no further congestion events and is calculated using the following equation:\r\n```\r\n       K = cubic_root( (W_max-cwnd_0) /C)  (Eq. 2)\r\n```\r\n   where cwnd_0 is the congestion window at the beginning of the current congestion avoidance stage. In special cases, if cwnd_0 is greater than W_max, K is set to 0.\r\n\r\n   Upon receiving an ACK during congestion avoidance, CUBIC computes the target congestion window size after the next RTT as follows, where RTT is the weighted average RTT calculated by Standard TCP.\r\n```\r\n        target = W_Cubic(t + RTT)      // cwnd after a RTT\r\n        if (target < cwnd)             // lower bound\r\n            target = cwnd\r\n        else if (target > 2*cwnd)      // upper bound\r\n            target = 2 * cwnd\r\n```",
          "createdAt": "2020-11-19T01:55:59Z",
          "updatedAt": "2020-11-19T01:55:59Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "this looks good to me. I will update the PR with some minor text edits. ",
          "createdAt": "2020-11-19T02:24:47Z",
          "updatedAt": "2020-11-19T02:24:47Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thinking a bit more about it, I think cwnd_0 looks a bit confusing. Also, as we are adding text for special case (if cwnd > W_max),  and later to ensure target is within bounds, I think we should just call it `cwnd` and describe it as you did `where cwnd is the congestion window at the beginning of the current congestion avoidance stage`",
          "createdAt": "2020-11-19T02:35:26Z",
          "updatedAt": "2020-11-19T02:35:26Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi fine with me. Thanks.",
          "createdAt": "2020-11-19T02:42:45Z",
          "updatedAt": "2020-11-19T02:42:45Z"
        },
        {
          "author": "rscheff",
          "authorAssociation": "NONE",
          "body": "> We calculate K only once at the beginning of a congestion avoidance stage.\r\n\r\nWhile this is a correct statement, there are many more events that signify the beginning of the CA stage than just coming out from slow-start. In the cubic implementaiton in FreeBSD, the recalculation of K was missed in most of these instances (after idle, RTO rewind, loss recovery*, ecn recovery*). \r\n\r\nAs a note from an implementer, mentioning these other cases that signify the beginning of the congestion avoidance stage may avoid issues where someone only thinks of the textbook example when cwnd > ssthresh as the start of CA...\r\n\r\n\r\n(*) strictly speaking, K should be recalculated once the loss/ecn recovery has finished; FreeBSD takes a shortcut here and calculates K when entering recovery rather after leaving recovery.\r\n",
          "createdAt": "2020-11-19T11:02:53Z",
          "updatedAt": "2020-11-19T11:02:53Z"
        },
        {
          "author": "rscheff",
          "authorAssociation": "NONE",
          "body": "> Thinking a bit more about it, I think cwnd_0 looks a bit confusing. Also, as we are adding text for special case (if cwnd > W_max), and later to ensure target is within bounds, I think we should just call it `cwnd` and describe it as you did `where cwnd is the congestion window at the beginning of the current congestion avoidance stage`\r\n\r\nActually, reading \"cwnd\" in the formula by itself is more confusing to me, than referecing this by any other name; cwnd is the \"current\" cwnd on a casual glance; if it is NOT the current cwnd, but some state which has to be kept, use a differnt variable name in the formulas to make this clear (cwnd_0 or cwnd_base would be fine by me).",
          "createdAt": "2020-11-19T11:05:20Z",
          "updatedAt": "2020-11-19T11:05:20Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> (*) strictly speaking, K should be recalculated once the loss/ecn recovery has finished; FreeBSD takes a shortcut here and calculates K when entering recovery rather after leaving recovery.\r\n\r\nI don't think there is any mention of K being calculated only when cwnd > ssthresh. K is always recalculated whenever there is a congestion event.\r\n\r\n\r\n\r\n> Actually, reading \"cwnd\" in the formula by itself is more confusing to me, than referecing this by any other name; cwnd is the \"current\" cwnd on a casual glance; if it is NOT the current cwnd, but some state which has to be kept, use a differnt variable name in the formulas to make this clear (cwnd_0 or cwnd_base would be fine by me).\r\n\r\n'cwnd' is current congestion window in that formula. As @lisongxu noted, `In special cases, if cwnd is greater than W_max, K is set to 0.`, this additional statement will clarify what one needs to do if it is greater than W_max.",
          "createdAt": "2020-11-20T02:34:11Z",
          "updatedAt": "2020-11-20T02:34:11Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi @rscheff  Using 'cwnd' looks okay to me, and an implementer can use any variable of her choice to reference or store this value, e.g., 'origin_point' or 'cwnd_0.' Thanks!",
          "createdAt": "2020-11-20T08:48:40Z",
          "updatedAt": "2020-11-20T08:48:40Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @sangtaeha. Could you please review https://github.com/NTAP/rfc8312bis/pull/3? Thanks.",
          "createdAt": "2020-11-20T08:59:35Z",
          "updatedAt": "2020-11-20T08:59:35Z"
        },
        {
          "author": "rscheff",
          "authorAssociation": "NONE",
          "body": "Sorry, I probably have missed something - K is recalculated at the beginning of a congestion avoidance phase, with the then-current cwnd. What would be the reason to store that value for later use (or why was it referred to as 'cwnd_0' or 'origin_point'? What uses are for that cwnd in the past in some implementations. (Still suffering from virtual jetlag, sorry).",
          "createdAt": "2020-11-20T11:18:00Z",
          "updatedAt": "2020-11-20T11:18:00Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@rscheff Thank you. In normal cases, we do not need to store that value (cwnd_0, or origin_point) for later use. ",
          "createdAt": "2020-11-20T14:55:01Z",
          "updatedAt": "2020-11-20T14:55:01Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "MDU6SXNzdWU3NDI5MzYxODU=",
      "title": "Congestion window TCP friendly region after W_max",
      "url": "https://github.com/NTAP/rfc8312bis/issues/2",
      "state": "CLOSED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "design"
      ],
      "body": "The idea of using alpha_aimd as defined below is to ensure that the congestion window growth for Cubic is similar to standard TCP as Cubic's reduction factor (0.3) is smaller than that of standard TCP (0.5)\r\n\r\nCurrently, alpha_aimd = 3*(1-beta_cubic)/(1+beta_cubic) // for the entire TCP friendly region\r\n\r\nBut we think that once the cwnd in TF region reaches W_max, we should set the alpha_aimd to 1 to have similar behavior as standard TCP congestion algorithm (eg. NewReno)\r\n\r\nif (W_est < W_max)\r\n\talpha_aimd = 3*(1-beta_cubic)/(1+beta_cubic)\r\nelse\r\n\talpha_aimd = 1\r\n\r\nI'd be happy to work on a PR for this if folks think that this would be a good addition.",
      "createdAt": "2020-11-14T06:01:03Z",
      "updatedAt": "2020-12-01T07:17:58Z",
      "closedAt": "2020-12-01T07:17:58Z",
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you, you are right that once cwnd reaches W_max, we should set alpha_aimd (or the delta variable in Linux) to 1 to make sure that CUBIC has at least the same throughput as the standard TCP. \r\n\r\nBut if the purpose of this RFC is to document the current Linux CUBIC implementation, then we do not need to change it. ",
          "createdAt": "2020-11-14T22:29:47Z",
          "updatedAt": "2020-11-16T07:24:18Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@lisongxu Is this a change that should be committed to Linux?\n\nWe should also poll other implementations if they are doing something similar to what is proposed already, or would start doing so if we made the change.",
          "createdAt": "2020-11-15T08:25:37Z",
          "updatedAt": "2020-11-15T08:25:37Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Correct me if I am wrong, but I think the purpose of an RFC should be to document what would be the right behavior for the algorithm instead of what a particular implementation is doing. Having said that, as Linux is widely used OS, I think it would be good to commit this to Linux if we agree that this is a required change.\r\n\r\n@larseggert what is the best way to start a poll for other implementations? A slack channel?\r\n\r\n",
          "createdAt": "2020-11-16T07:17:44Z",
          "updatedAt": "2020-11-16T07:17:54Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@goelvidhi RFC8312 was specifically written because there was no accurate CUBIC specification at the time other than the Linux source code (the paper algorithm was outdated.) I think we should try and stick to this for the revision, i.e., document the CUBIC variant that is used in production now, in Linux and other stacks.\r\n\r\nThat said, *if* there are modifications that we want to propose that would further improve CUBIC beyond what current implementations are doing, that is possible. But I'd like to then see if Linux and other stacks would be open to implementing these improvements -- I wouldn't want to end up with a CUBIC spec that is (again) divergent from what the main stacks do (in some aspects).\r\n\r\nAs for how to ask, I think an email to the TCPM WG mailing list with a pointer to the respective GitHub issue/PR works best.",
          "createdAt": "2020-11-16T07:24:03Z",
          "updatedAt": "2020-11-16T07:24:03Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I am not sure, but I guess this change has little impact on the cubic performance, especially in highspeed networks.  Thanks",
          "createdAt": "2020-11-17T02:28:51Z",
          "updatedAt": "2020-11-17T02:28:51Z"
        },
        {
          "author": "maolson-msft",
          "authorAssociation": "NONE",
          "body": "I can speak for Windows TCP and MsQuic, and this proposal isn't done in either today.\r\n\r\nIf you just change the slope but not the base of the linear function, then I think you'll see a jump discontinuity in the window. That's a problem for Windows TCP because we don't pace by default. To avoid the jump discontinuity, you could rebase the linear function:\r\n\r\ninstead of the proposed\r\nW_est(t) = W_max*BETA + t/RTT\r\n[where t = time in congestion avoidance],\r\n\r\nyou could do\r\nW_est(t) = W_max + t/RTT\r\n[where t = time since W_est hit W_max].\r\n\r\nSomething like that. But of course, if this isn't going to substantially affect perf in real scenarios, I'd rather not risk the bugs from making this change.",
          "createdAt": "2020-11-17T19:28:23Z",
          "updatedAt": "2020-11-17T21:06:05Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@maolson-msft \r\nThe W_est equation is\r\nW_est(t)= W_max*beta_cubic +\r\n                   [3*(1-beta_cubic)/(1+beta_cubic)] * (t/RTT)\r\n\r\nwhere alpha_aimd = 3*(1-beta_cubic)/(1+beta_cubic)\r\n\r\nAnd the suggestion is to set alpha_aimd to 1 after W_est hit W_max for parity with New Reno.\r\n\r\n",
          "createdAt": "2020-11-18T09:37:51Z",
          "updatedAt": "2020-11-18T09:37:51Z"
        },
        {
          "author": "maolson-msft",
          "authorAssociation": "NONE",
          "body": "@goelvidhi , setting alpha to 1 reduces the RFC's current equation to W_est(t) = W_max*BETA + t/RTT, which is the equation I wrote. Sorry if that was unclear.",
          "createdAt": "2020-11-18T21:32:26Z",
          "updatedAt": "2020-11-18T21:32:26Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm, I see your point.\r\nI use bytes_acked/cwnd instead of time t/RTT, so don't have the problem as you described. I need to think more about this issue.",
          "createdAt": "2020-11-19T00:11:23Z",
          "updatedAt": "2020-11-19T00:11:23Z"
        },
        {
          "author": "maolson-msft",
          "authorAssociation": "NONE",
          "body": "@goelvidhi , I agree that issue #20 (replacing the equation-based window to an ACK-clocked one), if accepted, will resolve this jump discontinuity problem.",
          "createdAt": "2020-11-19T21:17:01Z",
          "updatedAt": "2020-11-19T21:17:01Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "NONE",
          "body": "Yuchung Cheng ( @yuchungcheng ) and I chatted about this proposed fix above ( https://github.com/NTAP/rfc8312bis/issues/2#issue-742936185 ) and we agreed this looks like a nice and worthwhile fix, which we should be able to integrate\r\ninto the Linux TCP CUBIC implementation.\r\n\r\nThis should address the concern mentioned above from Lars about potential drift between Linux TCP CUBIC and the RFC ( https://github.com/NTAP/rfc8312bis/issues/2#issuecomment-727789321 ).\r\n",
          "createdAt": "2020-11-20T16:29:09Z",
          "updatedAt": "2020-11-20T16:31:33Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Would someone volunteer to craft a PR for this?",
          "createdAt": "2020-11-25T09:44:46Z",
          "updatedAt": "2020-11-25T09:44:46Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I can work on this one",
          "createdAt": "2020-11-25T10:20:14Z",
          "updatedAt": "2020-11-25T10:20:14Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "MDU6SXNzdWU3NDM2NzEyMjU=",
      "title": "Code to re-generate tables",
      "url": "https://github.com/NTAP/rfc8312bis/issues/4",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "larseggert"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Does anyone have code to (re-)generate Tables 1, 2 and 3 for when we make changes to the math?",
      "createdAt": "2020-11-16T09:26:30Z",
      "updatedAt": "2020-11-18T08:08:36Z",
      "closedAt": "2020-11-18T08:08:36Z",
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I do have the code.  But we do not need to change these tables for the changes that we have discussed so far.  Thanks",
          "createdAt": "2020-11-17T02:36:27Z",
          "updatedAt": "2020-11-17T02:36:27Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Do you think it might be a good idea to add that code to the repo anyway, so we have it handy in the future?",
          "createdAt": "2020-11-17T05:02:03Z",
          "updatedAt": "2020-11-17T05:02:03Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Sure, here is the code to generate the cubic columns in tables 1 and 2. \r\n\r\n```\r\n#include<stdio.h>\r\n#include<math.h>\r\n\r\ndouble ww(double C, double RTT, double p){\r\n\tdouble w, tcp;\r\n\tw = pow(RTT, 0.75);\r\n\tw = w / pow(p, 0.75);\r\n\tw = w * pow(C*3.7/1.2, 0.25);\r\n\r\n\ttcp = 1.2*pow(1.0/p, 0.5);\r\n\r\n\tif (tcp>w)\r\n\t\treturn (int)(tcp+0.5);\r\n\telse\r\n\t\treturn (int)(w+0.5);\r\n}\r\n\r\nint main(){\r\n\tdouble p;\r\n\tint i;\r\n\r\n\tfor(i=2;i<=8;i++){\r\n\t\tp = pow(10, -i);\r\n\t\tprintf(\"%g\\t\", p);\r\n\t\tprintf(\"||%g\\t%g\\t%g\\t||\", ww(0.04, 0.1, p), ww(0.4, 0.1, p), ww(4, 0.1, p));\r\n\t\tprintf(\"%g\\t%g\\t%g\\t\\n\", ww(0.04, 0.01, p), ww(0.4, 0.01, p), ww(4, 0.01, p));\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n```",
          "createdAt": "2020-11-17T05:12:14Z",
          "updatedAt": "2020-11-17T05:12:14Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Thanks!",
          "createdAt": "2020-11-17T05:14:33Z",
          "updatedAt": "2020-11-17T05:14:33Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@lisongxu the code seems to not compute the TCP and HSTCP columns?",
          "createdAt": "2020-11-17T14:31:23Z",
          "updatedAt": "2020-11-17T14:31:23Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I made some changes to the code to print out all the columns of Tables 1 and 2.\r\n\r\n```\r\n#include<stdio.h>\r\n#include<math.h>\r\n\r\nlong reno(double p){\r\n    return round(1.2/pow(p, 0.5));\r\n}\r\n\r\n\r\nlong hstcp(double p){\r\n    long cwnd, tcp_friend;\r\n\r\n    cwnd = round(0.12/pow(p, 0.835));\r\n    \r\n    tcp_friend = reno(p);\r\n\r\n    if (tcp_friend > cwnd)\r\n        return tcp_friend;\r\n    else\r\n        return cwnd;\r\n}\r\n\r\nlong cubic(double C, double RTT, double p){\r\n    double w;\r\n    long cwnd, tcp_friend;\r\n    \r\n    w = pow(RTT, 0.75);\r\n    w = w / pow(p, 0.75);\r\n    w = w * pow(C*3.7/1.2, 0.25);\r\n    cwnd = round(w);\r\n\r\n    tcp_friend = reno(p);\r\n\r\n    if (tcp_friend > cwnd)\r\n        return tcp_friend;\r\n    else\r\n        return cwnd;\r\n}\r\n\r\nint main(){\r\n    double p;\r\n    int i;\r\n\r\n\r\n    printf(\"Table 1\\n\");\r\n    printf(\"%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n\", \"P\", \"TCP\", \"HSTCP\", \"C=0.04\", \"C=0.4\", \"C=4\");\r\n    for(i=2;i<=8;i++){\r\n    p = pow(10, -i);\r\n        printf(\"%.1e\\t\", p);\r\n        printf(\"%ld\\t%ld\\t%ld\\t%ld\\t%ld\\n\", reno(p), hstcp(p), cubic(0.04, 0.1, p), cubic(0.4, 0.1, p), cubic(4, 0.1, p));\r\n    }\r\n\r\n\r\n    printf(\"Table 2\\n\");\r\n    printf(\"%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n\", \"P\", \"TCP\", \"HSTCP\", \"C=0.04\", \"C=0.4\", \"C=4\");\r\n    for(i=2;i<=8;i++){\r\n        p = pow(10, -i);\r\n        printf(\"%.1e\\t\", p);\r\n        printf(\"%ld\\t%ld\\t%ld\\t%ld\\t%ld\\n\", reno(p), hstcp(p), cubic(0.04, 0.01, p), cubic(0.4, 0.01, p), cubic(4, 0.01, p));\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n```",
          "createdAt": "2020-11-17T15:14:50Z",
          "updatedAt": "2020-11-17T15:14:50Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Thanks! I will update the PR tomorrow.",
          "createdAt": "2020-11-17T15:29:37Z",
          "updatedAt": "2020-11-17T15:29:37Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "MDU6SXNzdWU3NDM3MzU3ODc=",
      "title": "List of variables and constants",
      "url": "https://github.com/NTAP/rfc8312bis/issues/5",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "editorial"
      ],
      "body": "It would be useful to add a consolidated list of all constants and variables with their units and a brief description.",
      "createdAt": "2020-11-16T10:54:14Z",
      "updatedAt": "2020-11-19T17:02:45Z",
      "closedAt": "2020-11-19T17:02:45Z",
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I can help with this",
          "createdAt": "2020-11-17T02:16:42Z",
          "updatedAt": "2020-11-17T02:16:42Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you, Vidhi!\r\n",
          "createdAt": "2020-11-17T02:37:54Z",
          "updatedAt": "2020-11-17T02:37:54Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu  @sangtaeha could you please review https://github.com/NTAP/rfc8312bis/pull/12?",
          "createdAt": "2020-11-19T02:25:58Z",
          "updatedAt": "2020-11-19T02:25:58Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": " the unit of C should be MSS / S^3 ? Thanks",
          "createdAt": "2020-11-19T02:41:20Z",
          "updatedAt": "2020-11-19T02:41:20Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Is Segment / S^3 ok? (as I am calling the units of cwnd, W_max as segments)",
          "createdAt": "2020-11-19T02:57:05Z",
          "updatedAt": "2020-11-19T02:57:05Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, thanks. ",
          "createdAt": "2020-11-19T03:05:03Z",
          "updatedAt": "2020-11-19T03:05:03Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "done. please review.",
          "createdAt": "2020-11-19T03:07:22Z",
          "updatedAt": "2020-11-19T03:07:22Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "MDU6SXNzdWU3NDM3NDA5ODE=",
      "title": "Units are missing or unclear",
      "url": "https://github.com/NTAP/rfc8312bis/issues/6",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "editorial"
      ],
      "body": "@martinthomson raised this on the QUIC slack:\r\n> What are the units of C?  What are the units of t? (edited) \r\nI'm assuming that the units of W_cubic(t) and W_max are bytes (or multiples of MSS, I guess).  But what about W_est(t)?\r\nW_est(t) = W_max*0.7 + 1.1 * t / RTT\r\n(Numbers approximated.)  That's a component in bytes, and a unit-less component. ",
      "createdAt": "2020-11-16T11:01:44Z",
      "updatedAt": "2020-11-19T17:02:45Z",
      "closedAt": "2020-11-19T17:02:45Z",
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Copied from the beginning of Section 4: \"The unit of all window sizes in this document is segments of the  maximum segment size (MSS), and the unit of all times is seconds.\"  ",
          "createdAt": "2020-11-17T02:40:37Z",
          "updatedAt": "2020-11-17T02:40:37Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "So all variables either window sizes or times?",
          "createdAt": "2020-11-17T04:52:22Z",
          "updatedAt": "2020-11-17T04:52:52Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "If I did my math correctly ... \r\n\r\nUnit of C : MSS / (Second^3)\r\nUnit of K : Second\r\n\r\n",
          "createdAt": "2020-11-17T05:20:13Z",
          "updatedAt": "2020-11-17T05:20:13Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think,\r\nC is 1/ S^3 \r\nt is time in sec\r\nK is time in sec\r\nAll Ws are in packets. (W_est is also in packets and packets don't have any units)",
          "createdAt": "2020-11-17T05:29:46Z",
          "updatedAt": "2020-11-17T05:29:46Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "What would be the best place to add these units? Next to the equation or the section where all variables would be described? (ref. https://github.com/NTAP/rfc8312bis/issues/5)",
          "createdAt": "2020-11-17T05:31:48Z",
          "updatedAt": "2020-11-17T05:31:48Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi Where we explain C, t, K, Wmax, etc.? ",
          "createdAt": "2020-11-17T06:06:20Z",
          "updatedAt": "2020-11-17T06:06:20Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "that should be fine too. But there was an issue #5 to define the variables with units. I was thinking to put it all at one place and then remove redundant explanations.",
          "createdAt": "2020-11-17T06:30:11Z",
          "updatedAt": "2020-11-17T06:30:36Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@goelvidhi I think consolidating it as you suggest (e.g., into a table) is probably best.",
          "createdAt": "2020-11-17T06:31:21Z",
          "updatedAt": "2020-11-17T06:31:21Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi The unit of all windows should be MSS (or segment), and then the unit of C should be MSS / S^3 ? Thanks",
          "createdAt": "2020-11-17T14:04:17Z",
          "updatedAt": "2020-11-17T14:04:17Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "MDU6SXNzdWU3NDM3NDIyNDU=",
      "title": "cwnd can now be less than 2",
      "url": "https://github.com/NTAP/rfc8312bis/issues/7",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "design"
      ],
      "body": "@martinthomson raised this on the QUIC slack:\r\n```\r\n      W_max = cwnd;                 // save window size before reduction\r\n      ssthresh = cwnd * beta_cubic; // new slow-start threshold\r\n      ssthresh = max(ssthresh, 2);  // threshold is at least 2 MSS\r\n      cwnd = cwnd * beta_cubic;     // window reduction\r\n```\r\n>cwnd can now be less than 2.",
      "createdAt": "2020-11-16T11:03:25Z",
      "updatedAt": "2020-11-17T15:28:19Z",
      "closedAt": "2020-11-17T15:28:19Z",
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah.. for this code, a simple fix would be:\r\n```\r\nW_max = cwnd;                 // save window size before reduction\r\n      ssthresh = cwnd * beta_cubic; // new slow-start threshold\r\n      ssthresh = max(ssthresh, 2);  // threshold is at least 2 MSS\r\n      cwnd = ssthresh;                    // window reduction\r\n```\r\nI can work on this one, if no one else is.",
          "createdAt": "2020-11-17T02:18:36Z",
          "updatedAt": "2020-11-17T02:18:36Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, Linux also implements it this way. ",
          "createdAt": "2020-11-17T02:38:50Z",
          "updatedAt": "2020-11-17T02:38:50Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "MDU6SXNzdWU3NDQ0MTgyNTY=",
      "title": "Highlight difference to paper",
      "url": "https://github.com/NTAP/rfc8312bis/issues/10",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "NONE",
      "assignees": [
        "sangtaeha"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Would be nice to highlight what has changed from the original paper as that paper is still a good source to start with and understand cubic.",
      "createdAt": "2020-11-17T05:15:38Z",
      "updatedAt": "2020-12-16T08:41:21Z",
      "closedAt": "2020-12-16T08:41:21Z",
      "comments": [
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "RFC 8312 was close to the original paper, and this version clarifies a few implementation details. This is more like we explain the difference between RFC 8312 and a new version. @larseggert and @lisongxu If you want to include this, I can help. We may have to use a separate section for this information? ",
          "createdAt": "2020-11-17T05:49:32Z",
          "updatedAt": "2020-11-17T05:49:32Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Yes, a separate section (or an appendix) makes sense. I think discussing both the changes from the paper to RFC8312 and from RFC8312 to this document (RFC8312bis) would make sense?",
          "createdAt": "2020-11-17T06:14:49Z",
          "updatedAt": "2020-11-17T06:14:49Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "NONE",
          "body": "Actually the main reason why I checked the paper is because it has the pseudo code. I also look at the linux implementation but that's much harder to understand, especially if your implementation doesn't need the same optimisations. Might be also worth discussing in an appendix. ",
          "createdAt": "2020-11-17T06:30:51Z",
          "updatedAt": "2020-11-17T06:30:51Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@mirjak I agree.",
          "createdAt": "2020-11-17T06:32:22Z",
          "updatedAt": "2020-11-17T06:32:22Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @sangtaeha for helping with this section",
          "createdAt": "2020-11-17T15:15:42Z",
          "updatedAt": "2020-11-17T15:16:34Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@sangtaeha would you start a PR for this?",
          "createdAt": "2020-11-25T09:44:32Z",
          "updatedAt": "2020-11-25T09:44:32Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert Yes, let me get back to you on this.",
          "createdAt": "2020-11-25T20:26:32Z",
          "updatedAt": "2020-11-25T20:26:32Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@mirjak @lisongxu @larseggert There are a few differences between the original paper and RFC8312. The major difference is the first bullet. The second bullet of each version might be trivial and can be removed. Any feedback on the following? After that, I will submit a PR.\r\n\r\n## RFC 8312\r\n\r\n- It changed the definition of beta_cubic constant and thus updated the pseudocode of CUBIC accordingly. For example, beta_cubic in the original paper was the window decrease constant while RFC8312 changed it to CUBIC multiplication decrease factor. With this change, the current congestion window size after a loss event is beta_cubic * W_max while it was (1-beta_cubic) * W_max in the original paper.\r\n- It included the discussion on safety features of CUBIC, such as CUBIC's fairness in small and high bandwidth-delay product (BDP) networks and the recommended CUBIC constant C.\r\n\r\n## Original paper\r\n\r\n- The original paper included the pseudocode of CUBIC implementation using Linux's pluggable congestion control framework, which excludes system-specific optimizations. The simplified pseudocode might be a good source to start with and understand CUBIC.\r\n- It also includes experimental results showing its performance and fairness.",
          "createdAt": "2020-12-01T09:21:10Z",
          "updatedAt": "2020-12-01T09:21:59Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, @sangtaeha ",
          "createdAt": "2020-12-01T13:55:42Z",
          "updatedAt": "2020-12-01T13:55:42Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "There is one more difference: W_last_max in the paper and in the Linux code is called W_max in the RFC. Thanks",
          "createdAt": "2020-12-01T14:21:29Z",
          "updatedAt": "2020-12-01T14:21:29Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "Good point. I add that. Thanks, @lisongxu ",
          "createdAt": "2020-12-01T18:40:20Z",
          "updatedAt": "2020-12-01T18:40:20Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> There is one more difference: W_last_max in the paper and in the Linux code is called W_max in the RFC. Thanks\r\n\r\nI think the paper uses W_max in the text but only uses W_last_max in the code.\r\n\r\nOther differences that I see based on the recent changes to the IETF draft:\r\n1. K formula has changed in the RFC, to cbrt ((W_max - cwnd)/C) whereas in the paper it is cbrt((W_max * Beta)/C) where Beta = 1-cubic_beta\r\n2. TCP friendly window is called W_est in the RFC whereas it is W_tcp in the paper (subtle difference). Also, we added a note to change alpha_aimd to 1 when W_est > W_max\r\n3. Fast Convergence section - Although Section 3.7 describes the fast convergence using W_max and W_last_max (which is same as the RFC), the corresponding pseudocode in Algorithm 1 only uses W_last_max (as W_max) and it seems a bit incorrect. Not sure what we add regarding this.",
          "createdAt": "2020-12-01T20:11:44Z",
          "updatedAt": "2020-12-01T20:12:04Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, @goelvidhi. Yes, we may have more changes as well. I will incorporate them into the list.",
          "createdAt": "2020-12-02T02:18:39Z",
          "updatedAt": "2020-12-02T02:18:39Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Should we also discuss the improvements taken from the NSDI paper, and cite that?",
          "createdAt": "2020-12-02T06:34:25Z",
          "updatedAt": "2020-12-02T06:34:25Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert Yes, we can include those in the list of changes since RFC 8312.",
          "createdAt": "2020-12-02T06:50:06Z",
          "updatedAt": "2020-12-02T06:50:06Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi Yes, the Fast Convergence pseudocode was wrong while the explanation was correct. That was the issue of using w_max and w_last_max in different places. We may not add this issue but we should add the changes in the K formula and TCP friendly region which now emulates TCP throughput using segments or bytes received instead of time t.   ",
          "createdAt": "2020-12-02T06:55:42Z",
          "updatedAt": "2020-12-02T06:55:42Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds good.",
          "createdAt": "2020-12-02T07:26:01Z",
          "updatedAt": "2020-12-02T07:26:01Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "MDU6SXNzdWU3NDQ0MzQ0MzQ=",
      "title": "Add details about response to ECN marks",
      "url": "https://github.com/NTAP/rfc8312bis/issues/11",
      "state": "CLOSED",
      "author": "mohittahiliani",
      "authorAssociation": "NONE",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "editorial"
      ],
      "body": "It would be nice to describe how a CUBIC sender should respond to ECN marks from the receiver. On receiving an ECE mark, the Linux CUBIC enters a CWR state and follows PRR.\r\n\r\nMore details about this are available in the document:\r\nhttps://docs.google.com/document/d/1QiDqBo94wKr1eptTFe6xAB0RWWlwYOy8VLOWrpVAie8/edit",
      "createdAt": "2020-11-17T05:52:58Z",
      "updatedAt": "2020-12-04T08:41:15Z",
      "closedAt": "2020-12-04T08:41:15Z",
      "comments": [
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@mohittahiliani In fact, CUBIC is not different from the other CCs (e.g., NewReno/SACK) in dealing with ECN marks (treating as a congestion event). Responding to ECN is always beneficial for loss-based algorithms. Yes, we can add that. ",
          "createdAt": "2020-11-17T16:54:56Z",
          "updatedAt": "2020-11-17T16:54:56Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "This was discussed during IETF 109 tcpm meeting. I think what @mohittahiliani was referring to was to document CWR and PRR as done in Linux on ECN which is probably not the same reaction as 3 dup ACKs.\r\n\r\nI am not sure if we want to document this behavior of Linux on ECN signaling.",
          "createdAt": "2020-11-18T07:44:48Z",
          "updatedAt": "2020-11-18T07:44:48Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi @mohittahiliani If so, all standard loss-based TCP CCs in Linux will do the same for ECN. PRR is how Linux reduces its cwnd and different platforms could do differently. By the way, CUBIC treats ECN as a loss event and sets W_max upon receiving ECN-Echo, which may be enough?  The current draft already has the following.\r\n\r\n~~~\r\nAfter a window reduction in response to a congestion event is detected by \r\nduplicate ACKs or Explicit Congestion Notification-Echo (ECN-Echo) ACKs [RFC3168], \r\nCUBIC registers the congestion window size where it got the congestion event \r\nas W_max and performs a multiplicative decrease of congestion window.\r\n~~~",
          "createdAt": "2020-11-18T08:39:04Z",
          "updatedAt": "2020-11-18T08:44:21Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I did point out this text to @mohittahiliani during the tcpm meeting.\r\nI agree that we don't have to document the CWR and PRR for CUBIC specifically.",
          "createdAt": "2020-11-18T09:32:32Z",
          "updatedAt": "2020-11-18T09:32:32Z"
        },
        {
          "author": "tomhenderson",
          "authorAssociation": "NONE",
          "body": "I might suggest that Section 4.5 on Multiplicative Decrease include an additional sentence \"For both loss and congestion events, the sender MAY employ a fast recovery algorithm to gradually adjust the congestion window to its new reduced value.\"  I believe that without this, implementers will assume that cwnd must be immediately reduced (also because PRR does not mention any applicability to ECN).\r\n\r\nThere is also an opportunity to add ECN support to PRR if that RFC is being revised.",
          "createdAt": "2020-11-18T15:16:45Z",
          "updatedAt": "2020-11-18T15:16:45Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, @tomhenderson. We will add that.",
          "createdAt": "2020-11-18T19:37:05Z",
          "updatedAt": "2020-11-18T19:37:05Z"
        },
        {
          "author": "mohittahiliani",
          "authorAssociation": "NONE",
          "body": "Thank you all for the discussion!",
          "createdAt": "2020-11-21T19:46:12Z",
          "updatedAt": "2020-11-21T19:46:12Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Would someone volunteer to craft a PR for this?",
          "createdAt": "2020-11-25T09:44:00Z",
          "updatedAt": "2020-11-25T09:44:00Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I can work on this one",
          "createdAt": "2020-11-25T10:23:26Z",
          "updatedAt": "2020-11-25T10:23:26Z"
        },
        {
          "author": "mwelzl",
          "authorAssociation": "NONE",
          "body": "This is not the same thing, but it also fits the topic line: reference [KWAF17] in RFC 8312 is an I-D but it is now RFC 8511, and it's not cited for what it really is about in RFC 8312. RFC 8511 proposes that senders should back off less in response to a CE-mark (note, this is in the world of ECT(0) ) than to a packet loss, because the CE-mark not only indicates congestion - it also indicates the presence of an AQM algorithm, which probably keeps the queue relatively short.\r\n\r\nWe found this to be generally beneficial, some details here:  https://folk.universitetetioslo.no/michawe/research/publications/Networking2017ABE.pdf\r\nand recommend a value of 0.85 for cubic_beta in the RFC, for whoever wants to participate in this experiment.\r\n\r\nI'm not saying that Cubic should now change its backoff factor for good, but the experiment should probably be cited as such, and the reference updated - and if one of you implementers would like to try out a value greater than 0.8, such as 0.85 or 0.8, that would of course be extra cool!",
          "createdAt": "2020-12-02T18:16:41Z",
          "updatedAt": "2020-12-02T18:16:41Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@mwelzl The mention of [KWAF17] in Section 5.4 is to note the aggressiveness of CUBIC in fast networks leading to more queuing in the network. For the CUBIC draft, I think it would be best to provide a generic recommendation instead of pointing to specific RFCs for congestion window reduction during fast recovery.",
          "createdAt": "2020-12-03T09:29:21Z",
          "updatedAt": "2020-12-03T09:29:21Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "MDU6SXNzdWU3NDQ3OTk3NzM=",
      "title": "Overly aggressive window increase",
      "url": "https://github.com/NTAP/rfc8312bis/issues/14",
      "state": "CLOSED",
      "author": "lisongxu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "design"
      ],
      "body": "Since we are revising this RFC, I guess it is a good time to fix some Cubic bugs reported in [our NSDI 2019 paper](https://www.usenix.org/conference/nsdi19/presentation/sun) .\r\n\r\nThis RFC sets W_cubic(t + RTT) as the target window size after in the next RTT. However, this targe size may be too high, like even higher than 2 * cwnd (i.e., more aggressive than slow start), in the following special cases.\r\n\r\n   * case 1: RTT is extremely long. An extremely long RTT is very likely an indication of network congestion, in such an environment it is dangerous to set a very high target. \r\n\r\n  * case 2: after a long idle period (i.e., a big increase of t). This is a [bug reported and fixed by Google](http://bitsup.blogspot.com/2015/09/).\r\n\r\n  * case 3: after a long application rate-limited period (i.e., a bug increase of t). Similar to case 2\r\n\r\nTo be safer, we may change Equation (1) as follow to fix all the above bugs\r\n\r\n```\r\n    W_cubic(t) = C*(t-K)^3 + origin_point (Eq. 1)\r\n    if (W_cubic (t) > 2* cwnd)\r\n        W_cubic(t)  =  2 * cwnd\r\n```\r\nNote that, Linux Cubic already does something similar ([line 328](https://github.com/torvalds/linux/blob/master/net/ipv4/tcp_cubic.c#L328)) by limiting target to be no more then 1.5 * cwnd.\r\n\r\nThanks",
      "createdAt": "2020-11-17T14:44:17Z",
      "updatedAt": "2020-11-24T09:11:15Z",
      "closedAt": "2020-11-24T09:11:15Z",
      "comments": [
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu Agreed. We also include this change in the list of changes for this new revision.",
          "createdAt": "2020-11-17T19:09:52Z",
          "updatedAt": "2020-11-17T19:09:52Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu Below is my response for the three cases you mentioned,\r\n1. At least we use SRTT instead of RTT which mitigates the problem somewhat\r\n2. For any idle period, we reset the epoch period to 0.\r\n3. Same as 2.\r\n\r\nHaving said that, your suggestion is a safe option regardless.\r\n",
          "createdAt": "2020-11-18T06:47:15Z",
          "updatedAt": "2020-11-18T06:47:30Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert  I can do this change. Feel free to assign :-)",
          "createdAt": "2020-11-18T06:47:56Z",
          "updatedAt": "2020-11-18T06:47:56Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "What I proposed is a simple fix mainly for other implementations. For bug 2, Google already proposed a fix that has been implemented in [Linux](https://github.com/torvalds/linux/blob/master/net/ipv4/tcp_cubic.c#L151) and been adopted into the cubic RFC. (Section 5.8). Thanks ",
          "createdAt": "2020-11-18T14:28:34Z",
          "updatedAt": "2020-11-18T14:28:34Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Would good to give this issue a more descriptive title.",
          "createdAt": "2020-11-19T14:47:48Z",
          "updatedAt": "2020-11-19T14:47:48Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert done",
          "createdAt": "2020-11-19T19:31:35Z",
          "updatedAt": "2020-11-19T19:31:35Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@yuchungcheng  Case 2 is already fixed by Google in function [bictcp_cwnd_event](https://github.com/torvalds/linux/blob/master/net/ipv4/tcp_cubic.c#L149). How about case 3? Does bictcp_cwnd_event also fix case 3? Thanks",
          "createdAt": "2020-11-19T19:35:34Z",
          "updatedAt": "2020-11-19T19:35:34Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu  The fix to bound the CUBIC target cwnd is added to https://github.com/NTAP/rfc8312bis/pull/3. Let me know if there is any remaining items for this issue.",
          "createdAt": "2020-11-20T04:17:28Z",
          "updatedAt": "2020-11-20T04:17:28Z"
        },
        {
          "author": "yuchungcheng",
          "authorAssociation": "NONE",
          "body": "I believe bictcp_cwnd_event does fix case 3, specifically on the comment of\n\" We were application limited (idle) for a while...\"\n\nThis commit message has more details:\ncommit 30927520dbae297182990bb21d08762bcc35ce1d\nAuthor: Eric Dumazet <edumazet@google.com>\nDate:   Wed Sep 9 21:55:07 2015 -0700\n\n    tcp_cubic: better follow cubic curve after idle period\n\n    Jana Iyengar found an interesting issue on CUBIC :\n\n    The epoch is only updated/reset initially and when experiencing losses.\n    The delta \"t\" of now - epoch_start can be arbitrary large after app idle\n    as well as the bic_target. Consequentially the slope (inverse of\n    ca->cnt) would be really large, and eventually ca->cnt would be\n    lower-bounded in the end to 2 to have delayed-ACK slow-start behavior.\n\n    This particularly shows up when slow_start_after_idle is disabled\n    as a dangerous cwnd inflation (1.5 x RTT) after few seconds of idle\n    time.\n\n    Jana initial fix was to reset epoch_start if app limited,\n    but Neal pointed out it would ask the CUBIC algorithm to recalculate the\n    curve so that we again start growing steeply upward from where cwnd is\n    now (as CUBIC does just after a loss). Ideally we'd want the cwnd growth\n    curve to be the same shape, just shifted later in time by the amount of\n    the idle period.\n\n    Reported-by: Jana Iyengar <jri@google.com>\n    Signed-off-by: Eric Dumazet <edumazet@google.com>\n    Signed-off-by: Yuchung Cheng <ycheng@google.com>\n    Signed-off-by: Neal Cardwell <ncardwell@google.com>\n    Cc: Stephen Hemminger <stephen@networkplumber.org>\n    Cc: Sangtae Ha <sangtae.ha@gmail.com>\n    Cc: Lawrence Brakmo <lawrence@brakmo.org>\n    Signed-off-by: David S. Miller <davem@davemloft.net>\n\nOn Thu, Nov 19, 2020 at 11:35 AM Lisong Xu <notifications@github.com> wrote:\n\n> @yuchungcheng <https://github.com/yuchungcheng> Case 2 is already fixed\n> by Google in function bictcp_cwnd_event\n> <https://github.com/torvalds/linux/blob/master/net/ipv4/tcp_cubic.c#L149>.\n> How about case 3? Does bictcp_cwnd_event also fix case 3? Thanks\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/NTAP/rfc8312bis/issues/14#issuecomment-730591804>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AM5EPYAUMQWLOANKGDO7DEDSQVXRJANCNFSM4TYVHEFQ>\n> .\n>\n",
          "createdAt": "2020-11-20T04:50:25Z",
          "updatedAt": "2020-11-20T04:50:25Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "> @lisongxu The fix to bound the CUBIC target cwnd is added to #3. Let me know if there is any remaining items for this issue.\r\n\r\nCould I ask that we do individual PRs to address individual issues? It sometimes causes a little rebasing effort, but it's much easier to review such PRs compared to ones that contain changes for multiple issues.",
          "createdAt": "2020-11-20T05:13:30Z",
          "updatedAt": "2020-11-20T05:13:30Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@yuchungcheng Thanks.\r\n\r\nThe reason that I am not sure about case 3 is that Cubic still sends out packets just at a low rate limited by application instead of cwnd. If Cubic remains in case 3 for a long time,  cwnd will not be increased for a long time but it is not idle. As a result, I guess bictcp_cwnd_event does not fix case 3, because bictcp_cwnd_event only detects the idle period? Am I missing something? Thanks",
          "createdAt": "2020-11-20T05:28:57Z",
          "updatedAt": "2020-11-20T05:28:57Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > @lisongxu The fix to bound the CUBIC target cwnd is added to #3. Let me know if there is any remaining items for this issue.\r\n> \r\n> Could I ask that we do individual PRs to address individual issues? It sometimes causes a little rebasing effort, but it's much easier to review such PRs compared to ones that contain changes for multiple issues.\r\n\r\nSorry about that but the fix in #3 is incomplete without the bounds on target. Will try to keep them separate as much as possible.",
          "createdAt": "2020-11-20T07:18:47Z",
          "updatedAt": "2020-11-20T07:18:47Z"
        },
        {
          "author": "yuchungcheng",
          "authorAssociation": "NONE",
          "body": "@lisongxu <https://github.com/lisongxu>  I see your point now -- however it\ngets tricky what the right action is.\n\nFor example, let's cwnd is 100, and the application keeps using only 99\npkts for 5 minutes w/o experiencing any losses (so it's\n\"application-limited\"), then starts using cwnd fully 1 second after. should\nt = 5m or 1s? 1s seems over-conservative afterall cwnd was nearly fully\nused all time.\n\nAn obvious opposite example is the application using the minimal cwnd of 1\nfor a long time.\n\nMy sense is, for most application-limited traffic eventually go idle.\nAddressing the idle period may be good enough (if we want to keep it\nsimple).\n\nOn Thu, Nov 19, 2020 at 9:29 PM Lisong Xu <notifications@github.com> wrote:\n\n> @yuchungcheng <https://github.com/yuchungcheng> Thanks.\n>\n> The reason that I am not sure about case 3 is that Cubic still sends out\n> packets just at a low rate limited by application instead of cwnd. If Cubic\n> remains in case 3 for a long time, cwnd will not be increased for a long\n> time but it is not idle. As a result, I guess bictcp_cwnd_event does not\n> fix case 3, because bictcp_cwnd_event only detects the idle period? Am I\n> missing something? Thanks\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/NTAP/rfc8312bis/issues/14#issuecomment-730860015>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AM5EPYBPVJOSO3W35HWUL3LSQX5CNANCNFSM4TYVHEFQ>\n> .\n>\n",
          "createdAt": "2020-11-20T07:28:16Z",
          "updatedAt": "2020-11-20T07:28:16Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@yuchungcheng  Doesn't https://tools.ietf.org/html/rfc7661 solve the different app-limited scenarios?",
          "createdAt": "2020-11-20T08:51:16Z",
          "updatedAt": "2020-11-20T08:51:16Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@yuchungcheng Thank you! \r\n\r\nYes, we should avoid overly conservative (e.g., 1s in your example) and overly aggressive (e.g., 5m in your example). This is why I am suggesting a simple fix to set the lower bound (cwnd) and the upper bound (2*cwnd) to the target cwnd in the next RTT, and the detailed discussions can be found [in issue #1](https://github.com/NTAP/rfc8312bis/issues/1) . Thanks",
          "createdAt": "2020-11-20T14:46:32Z",
          "updatedAt": "2020-11-20T14:46:32Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi Thank you. That (rfc7661) requests a major change to Cubic, and I believe that the basic idea of rfc7661 is consistent with what we have been discussed (i.e., avoiding overly conservative and overly aggressive and being responsive to congestion). Thanks",
          "createdAt": "2020-11-20T14:50:27Z",
          "updatedAt": "2020-11-20T14:50:27Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "NONE",
          "body": "AFAICT the effect of the proposed fix in the first message in this thread -- https://github.com/NTAP/rfc8312bis/issues/14#issue-744799773 -- would be to bound the rate of increase of the cwnd to at most doubling each round trip time. Is that the intent?\r\n\r\nThe Linux TCP CUBIC implementation has already always bounded the rate of increase of the cwnd to at most 1.5x per round trip time. Initially it did this implicitly (the logic only allowed cwnd increases on at most every alternate ACK), and then when the stretch ACKs fixes were put in place the bound became explicit. See:\r\n  https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/net/ipv4/tcp_cubic.c?id=d578e18ce93f5d33a7120fd57c453e22a4c0fc37\r\n\r\nGiven that separate pre-existing bound of 1.5x per round trip, AFAICT the proposed fix of bounding to less than 2x per round trip would be NOP, AFAICT? Or perhaps I misunderstand the proposal.\r\n\r\nBy the way, for YouTube we found this implicit bound of 1.5x per round trip was important for keeping losses at a reasonable level. This has a large impact on behavior, and presumably big implications for fairness between CUBIC implementations. So this may be important to document in the RFC, if it is not already (I couldn't find it, but I may have just missed it).\r\n",
          "createdAt": "2020-11-20T16:19:18Z",
          "updatedAt": "2020-11-20T16:22:03Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@nealcardwell Yes, you are right that Linux has already implemented the 1.5x upper bound. I am fine to change the upper bound from 2.0x to 1.5x. What is important is to add an upper bound to RFC to make sure that all other implementations also implement something similar. Thanks\r\n\r\n",
          "createdAt": "2020-11-20T16:28:34Z",
          "updatedAt": "2020-11-20T16:28:34Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by https://github.com/NTAP/rfc8312bis/pull/3",
          "createdAt": "2020-11-24T09:11:15Z",
          "updatedAt": "2020-11-24T09:11:15Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "MDU6SXNzdWU3NDQ5MTQ3ODk=",
      "title": "Acknowledge previous authors/editors",
      "url": "https://github.com/NTAP/rfc8312bis/issues/15",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "larseggert"
      ],
      "labels": [
        "editorial"
      ],
      "body": "In the ack section.",
      "createdAt": "2020-11-17T17:00:00Z",
      "updatedAt": "2020-11-18T08:07:58Z",
      "closedAt": "2020-11-18T08:07:58Z",
      "comments": []
    },
    {
      "number": 16,
      "id": "MDU6SXNzdWU3NDUzMTgwNzI=",
      "title": "Add Injong as co-author",
      "url": "https://github.com/NTAP/rfc8312bis/issues/16",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Welcome @injongrhee! Please prepare a pull request to add yourself to the authors' block and `CODEOWNERS`.",
      "createdAt": "2020-11-18T04:27:02Z",
      "updatedAt": "2020-12-17T07:33:04Z",
      "closedAt": "2020-12-17T07:12:45Z",
      "comments": [
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Merged, thanks! @Injongrhee could you please accept the invite to join the repo, so we can assign you reviews, etc.?",
          "createdAt": "2020-12-17T07:20:26Z",
          "updatedAt": "2020-12-17T07:20:26Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert, @Injongrhee could not find that invitation. Can you send an invite to him again?",
          "createdAt": "2020-12-17T07:31:14Z",
          "updatedAt": "2020-12-17T07:31:14Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Done. He should have gotten an email and see a notification in GitHub.",
          "createdAt": "2020-12-17T07:33:04Z",
          "updatedAt": "2020-12-17T07:33:04Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "MDU6SXNzdWU3NDU0MTUyMzg=",
      "title": "Add Vidhi as co-author",
      "url": "https://github.com/NTAP/rfc8312bis/issues/17",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "editorial"
      ],
      "body": "@goelvidhi please prepare a pull request to add yourself to the authors' block and `CODEOWNERS`. Welcome aboard!",
      "createdAt": "2020-11-18T07:38:20Z",
      "updatedAt": "2020-12-02T16:24:58Z",
      "closedAt": "2020-12-02T16:24:58Z",
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you @larseggert and all other Authors.",
          "createdAt": "2020-11-18T07:52:45Z",
          "updatedAt": "2020-11-18T07:52:45Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you! @goelvidhi ",
          "createdAt": "2020-11-18T19:40:32Z",
          "updatedAt": "2020-11-18T19:40:32Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "MDU6SXNzdWU3NDU0NDYzMjY=",
      "title": "Replace modelled TCP Reno window approach with AIMD emulation",
      "url": "https://github.com/NTAP/rfc8312bis/issues/20",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "design"
      ],
      "body": "Yuchung Cheng [wrote](https://mailarchive.ietf.org/arch/msg/tcpm/KUQtS5nnRA1TaBzF2M2tnmTryGQ):\r\n>I'd recommend replacing the modelled TCP Reno window approach in\r\nsection 4.2 with an AIMD emulation (Linux's approach).\r\n>\r\n>In our experience, TCP-friendly regions are the predominant mode of\r\n(Linux) Cubic for any regular Internet connection. IOW Cubic is often\r\n\"Reno\" unless the loss rate is abysmal. The modelled approach is based\r\non a simple bulk transfer where modern network applications are mostly\r\nstructured traffic (burst, idle, repeat). Under such traffic\r\nstructures the model has two issues:\r\n>\r\n>The model assumes cwnd overshoot causes losses that are repaired in\r\none round of fast recovery. In reality, the losses are often due to\r\nbursts to short messages, causing more rounds and even timeouts to\r\nrepair. So the overall loss rate \"p\" tends to be higher than the ideal\r\nmodel, causing the model to underestimate the window (hence runs in a\r\nmore conservative Reno). Instead Linux's approach is to simply emulate\r\nReno AIMD based on the number of packets per ACK. This also avoids\r\nsquare-root operation.",
      "createdAt": "2020-11-18T08:27:38Z",
      "updatedAt": "2020-11-24T12:02:50Z",
      "closedAt": "2020-11-24T12:02:50Z",
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree, and this is reasonable, as CUBIC is based on time t but AIMD is not.  Thanks",
          "createdAt": "2020-11-18T19:40:05Z",
          "updatedAt": "2020-11-18T19:40:05Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I am not sure what's the AI here - do we need to modify Eq. 3?",
          "createdAt": "2020-11-19T03:19:06Z",
          "updatedAt": "2020-11-19T03:19:06Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Eq 3 is fine. But we need to change Eq 4 to update W_est for each ACK, instead of using that t/RTT.\r\n\r\nThanks",
          "createdAt": "2020-11-19T03:48:48Z",
          "updatedAt": "2020-11-19T18:06:25Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "In my earlier comment, AI = Action Item.\r\n\r\nIn Apple's implementation, I use bytes_acked / cwnd per ACK received instead of t/RTT. That ensures once the entire congestion window is acknowledged, the increase is 1MSS. I didn't file an issue for this as I thought this is an implementation choice. Does the below look like it:\r\n```\r\nOn every ACK,\r\nW_est = W_max*beta_cubic +\r\n                   [3*(1-beta_cubic)/(1+beta_cubic)] * (bytes_acked/cwnd)\r\n```",
          "createdAt": "2020-11-19T03:55:46Z",
          "updatedAt": "2020-11-19T03:57:20Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "How about the following?\r\n\r\nAt the beginning of a congestion avoidance stage, \r\n```\r\n    W_est = cwnd\r\n```\r\n\r\nOn every ACK,\r\n```\r\n   W_est += [3*(1-beta_cubic)/(1+beta_cubic)] * (Segments_acked/cwnd)\r\n```\r\n\r\n\r\n\r\n",
          "createdAt": "2020-11-19T04:34:39Z",
          "updatedAt": "2020-11-19T04:34:39Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, that's how an implementation would do it.\r\n\r\nWith this proposal, I think https://github.com/NTAP/rfc8312bis/issues/2 would be good to address as well. I think when we use segments_acked/cwnd instead of t/RTT, the W_est growth after it reached W_max, should use alpha_aimd = 1.",
          "createdAt": "2020-11-19T05:50:44Z",
          "updatedAt": "2020-11-19T05:50:44Z"
        },
        {
          "author": "rscheff",
          "authorAssociation": "NONE",
          "body": "FYI: freebsd is following the rtt-based tcp-friendly approach. However, we are not particularly fond of this due to the interaction with app-limited/discontinous data availablilty. Changing this into a bytes_acked/cwnd approach, which removes the RTT during that region, sounds good.",
          "createdAt": "2020-11-19T11:28:15Z",
          "updatedAt": "2020-11-19T11:28:15Z"
        },
        {
          "author": "yuchungcheng",
          "authorAssociation": "NONE",
          "body": "I like Lisong's proposal to use Segments_acked or Rscheff's Bytes_acked. We have changed Linux Cubic several years ago to perform well under the prevalent ACK-thining/compression world (notably for cable and wireless networks). Sometimes we get one ACK for more than one hundred segments.\r\n\r\nhttps://www.spinics.net/lists/netdev/msg314082.html\r\n",
          "createdAt": "2020-11-19T17:47:37Z",
          "updatedAt": "2020-11-19T17:47:37Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, @yuchungcheng . Could you please take a look at [issue 14](https://github.com/NTAP/rfc8312bis/issues/14) for a bug that Google fixed?",
          "createdAt": "2020-11-19T19:37:12Z",
          "updatedAt": "2020-11-19T19:37:12Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "MDU6SXNzdWU3NDY0NTg2NDk=",
      "title": "Clear definition of \"the beginning of the current congestion avoidance stage\"",
      "url": "https://github.com/NTAP/rfc8312bis/issues/21",
      "state": "CLOSED",
      "author": "rscheff",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "While improving the FreeBSD Cubic implementation, we found that there is ambiguity as to when to define \"the beginning of the current congestion avoidance stage\". However, for the classical design assumption for TCP with infinite data available to send, the minutae don't matter much.\r\n\r\nBut in a corner case, let us assume the send buffer allows the transmission of exactly ssthresh bytes. After that, the application stalls for some time (in multiples of the RTT) before making more data available to send...\r\n\r\nIn the original code, t(0) was set, once cwnd > ssthresh (before the application stall above). \r\n\r\nHowever, that can lead to excessive jumps, when cubic re-calculates cwnd the next time data is available for sending, as an excessive amount of time may have passed.\r\n\r\nWhen FreeBSD is doing now ([https://reviews.freebsd.org/D25746](D25746)) is to track properly, when the first time to recalculate cwnd is after having left ssthresh (or having been application limited, which is similar).\r\n\r\nWe have not looked closely how app-limited and request/response type flows are handled with cubic in Linux or other OS.\r\n\r\nA clear definition as to when to start taking the base t(0) for calculating t in the cubic formular may be good to have.",
      "createdAt": "2020-11-19T10:41:56Z",
      "updatedAt": "2020-11-19T14:47:23Z",
      "closedAt": "2020-11-19T14:47:22Z",
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, @rscheff . This is what we are discussing in \"[Some bugs to fix #14](https://github.com/NTAP/rfc8312bis/issues/14)\".\r\n\r\nWhat Linux does and what the current RFC 8312 specifies is \"Section 5.8: CUBIC does not raise its congestion window size if the flow is currently limited by the application instead of the congestion window.  In case of long periods when cwnd has not been updated due  to the application rate limit, such as idle periods, t in Eq. 1 MUST NOT include these periods; otherwise, W_cubic(t) might be very high after restarting from these periods.\"\r\n\r\n",
          "createdAt": "2020-11-19T14:08:14Z",
          "updatedAt": "2020-11-19T14:08:14Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Closing this, since the discussion is in #14 ",
          "createdAt": "2020-11-19T14:47:22Z",
          "updatedAt": "2020-11-19T14:47:22Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "MDU6SXNzdWU3NDc4MTk0MzM=",
      "title": "Add handling of spurious retransmissions",
      "url": "https://github.com/NTAP/rfc8312bis/issues/23",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "NONE",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "design"
      ],
      "body": "I wrote up a blog last year describing [my experience implementing Cubic for QUIC](https://huitema.wordpress.com/2019/11/11/implementing-cubic-congestion-control-in-quic/). There were three points:\r\n\r\n1) Issues with the formula base \"Reno compatibility\", which is documented in issue #20 \r\n2) Sensitivity of Hystart to delay jitter, which is more an issue with Hystart than with Cubic\r\n3) Sensitivity to spurious repeats\r\n\r\nI think that third issue should be addressed in the revised RFC. The basic problem is that any detected packet loss causes the host to reduce the window and start a new epoch. In some environments we can see spurious loss detection, caused for example by delayed ACKs or out of order delivery. These spurious losses can be easily identified in QUIC, and with some extra work in TCP. It would be useful if the revised RFC has a section on handling spurious losses.\r\n\r\nThe handling that I did implement was simple: reset the epoch parameters to the value of the previous epoch, before the loss. Documenting at least that would be nice.\r\n\r\n",
      "createdAt": "2020-11-20T21:56:16Z",
      "updatedAt": "2020-12-14T07:12:07Z",
      "closedAt": "2020-12-14T07:12:07Z",
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "NONE",
          "body": "Fixing this would be great, since spurious retransmissions (e.g. from reordering) are so common. FWIW, undoing cwnd reductions is not correctly implemented in Linux TCP CUBIC (only cwnd is reverted, not the epoch parameters), but @yuchungcheng has a patch for this that we should be able to incorporate into Linux.\r\n",
          "createdAt": "2020-11-20T22:17:58Z",
          "updatedAt": "2020-11-20T22:17:58Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a good suggestion. Hopefully, it will promote any future congestion controllers draft to include this scenario among others, i.e. aim for completeness.",
          "createdAt": "2020-11-21T00:06:21Z",
          "updatedAt": "2020-11-21T00:06:21Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you all, yes, I agree that this is a very good suggestion.  \r\n\r\nWhat are some common reasons for spurious retransmissions?   \r\n\r\n@nealcardwell you mentioned packet ordering, do you know why it is common (now)? because of more wireless/cellular networks?  \r\n\r\n@huitema you mentioned ACK compression in your blog (interesting to read!), could you please explain why ACK compression leads to spurious retransmissions? \r\n\r\nThank you!\r\n",
          "createdAt": "2020-11-21T03:40:22Z",
          "updatedAt": "2020-11-21T03:40:22Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "NONE",
          "body": "@lisongxu the RACK draft has one perspective on some reasons for reordering: https://tools.ietf.org/html/draft-ietf-tcpm-rack-13#section-2.2\r\n\r\n   3.  Packet reordering.  Link-layer protocols (e.g., 802.11 block\r\n       ACK), link bonding, or routers' internal load-balancing (e.g.,\r\n       ECMP) can deliver TCP segments out of order.  ...",
          "createdAt": "2020-11-21T03:54:55Z",
          "updatedAt": "2020-11-21T03:54:55Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "I observed that on some wireless connections (WiFi plus fixed LTE), one of the routers on path was bundling short packets together and only sending them when the bundle had attained a sufficient size. (QUIC ACK are short packets, but they are encrypted and the routers cannot tell them from other short packets.) In my case, the packet bundling process caused extra delays, and sometimes the timers were firing.\r\n\r\nAs for reordering, that's very common too. @nealcardwell has access to much better telemetry than I do, but one behavior I saw was routers putting short packets in front of the queue, before longer packets. That can confuse algorithms like RACK.",
          "createdAt": "2020-11-21T03:58:03Z",
          "updatedAt": "2020-11-21T03:58:03Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you, Neal and Christian!",
          "createdAt": "2020-11-21T06:08:04Z",
          "updatedAt": "2020-11-21T06:08:04Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Would someone volunteer to craft a PR for this?",
          "createdAt": "2020-11-25T09:43:36Z",
          "updatedAt": "2020-11-25T09:43:36Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I can work on this",
          "createdAt": "2020-11-25T10:20:49Z",
          "updatedAt": "2020-11-25T10:20:49Z"
        },
        {
          "author": "mwelzl",
          "authorAssociation": "NONE",
          "body": "I wonder how \"reset the epoch parameters to the value of the previous epoch, before the loss\" is different from \"only initialize the epoch parameters when a CA epoch begins *normally*, i.e. not after a spurious loss event\".\r\n\r\nIn the latter case, the fix could just be a matter of writing:  \"If the loss event preceding this CA epoch was not spurious: \"  in front of the text describing how some variables are initialised at the beginning of CA.",
          "createdAt": "2020-12-02T11:24:29Z",
          "updatedAt": "2020-12-02T11:24:29Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "NONE",
          "body": "IMHO it is important to do more than add the text \"If the loss event preceding this CA epoch was not spurious: \".\r\n\r\nThe CUBIC implementation will not know at the time of the loss event whether the loss recovery episode was spurious or not. So for the implementation these are necessarily two different events at different times:\r\n\r\n (a) loss event\r\n (b) subsequent discovery that the loss recovery episode was spurious\r\n\r\nIMHO it is important to document exactly how the algorithm handles both (a) and (b), since there is a specific set of algorithm variables that need to be saved in (a) and then restored in (b). (It would be easy for an implementation to forget to save/store one ore more of the variables.)\r\n",
          "createdAt": "2020-12-02T14:34:27Z",
          "updatedAt": "2020-12-02T14:34:27Z"
        },
        {
          "author": "mwelzl",
          "authorAssociation": "NONE",
          "body": "Hm, so maybe \"saving\" and \"restoring\" is a kernel implementation specific requirement?\r\n\r\nI thought that the \"epoch parameters\" are things like the cwnd at the time of starting CA and the time when CA begins (to later calculate t), for example. These things can be set exactly when CA begins - and when it does, TCP can (in principle) know how it got there - via a regular termination of, e.g., FR, or via a spurious loss event \"undo\".",
          "createdAt": "2020-12-02T14:39:29Z",
          "updatedAt": "2020-12-02T14:39:29Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "NONE",
          "body": "It is not the case that TCP will always know when CA begins whether the preceding loss event was spurious or not. For example, DSACKs for spurious retransmits often arrive one round-trip *after* the loss recovery episode completes and the CA episode begins. So if the loss recovery episode is detected as spurious via DSACKs, then usually the sender does not know at the time CA starts that the loss recovery was spurious.\r\n\r\nSo the implementation needs to be prepared for the events (a) and (b) in my timeline above to be separate events at separate times.\r\n",
          "createdAt": "2020-12-02T15:02:54Z",
          "updatedAt": "2020-12-02T15:02:54Z"
        },
        {
          "author": "mwelzl",
          "authorAssociation": "NONE",
          "body": "Ah, sure; I didn't think of that - DSACKs in particular are a good example, thanks.",
          "createdAt": "2020-12-02T16:06:43Z",
          "updatedAt": "2020-12-02T16:06:43Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@nealcardwell Thank you for your comments! We are working on a section for this issue and plan to refer to some possible methods (e.g., using DSACK) to determine whether a loss event was spurious or not. Are you aware of any related documents or RFCs? Thanks",
          "createdAt": "2020-12-09T14:23:14Z",
          "updatedAt": "2020-12-09T14:23:14Z"
        },
        {
          "author": "mwelzl",
          "authorAssociation": "NONE",
          "body": "I'm not Neal, but still - AFAIK there are three well known methods, which are documented in RFCs: Eifel (RFCs 3522 / 4015, working very well but only if you have timestamps), F-RTO (RFC 5682), working very well and not needing anything extra from the receiver but limited to timeouts, and DSACK (RFC 3708), which is reliable when available, but late.\r\n\r\nVarious other methods are possible, depending on the transport... quite possibly something reliable could be done with QUIC. I once worked on doing it with the ECN nonce, which noone ever used anyway and which is now even obsolete  :-) https://folk.universitetetioslo.no/michawe/research/projects/spurious/index.html",
          "createdAt": "2020-12-09T14:32:41Z",
          "updatedAt": "2020-12-09T14:32:41Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi @yuchungcheng , @nealcardwell  mentioned that you already have a patch to undo the cwnd reduction of Cubic in case of spurious loss events. In this case, do you think it is better to shift epoch_start as Cubic currently [does for application-limited cases](https://github.com/torvalds/linux/blob/master/net/ipv4/tcp_cubic.c#L149) (i.e., exclude the spurious-loss-related period from K)? Otherwise, Cubic would increase its cwnd too aggressively, especially if the fast recovery period is very long. Thanks",
          "createdAt": "2020-12-09T14:37:48Z",
          "updatedAt": "2020-12-09T14:37:48Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you so much, @mwelzl ! This is very helpful!",
          "createdAt": "2020-12-09T14:38:20Z",
          "updatedAt": "2020-12-09T14:38:20Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "NONE",
          "body": "Yes, thanks, @mwelzl. That's a nice summary of all the undo mechanisms I'm aware of (and all the undo mechanisms that I can think of in the Linux TCP stack).\r\n",
          "createdAt": "2020-12-09T15:01:19Z",
          "updatedAt": "2020-12-09T15:01:19Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "NONE",
          "body": "Re \"do you think it is better to shift epoch_start as Cubic currently does for application-limited cases\", I think it is much better to restore the epoch_start and related variables (epoch_start, last_max_cwnd, cwnd,...) to the values they had before the spurious loss recovery, so that the sender can quickly get back to the cwnd curve it would have had if there had not been a spurious loss recovery. And this is what the draft patch by @yuchungcheng did.\r\n",
          "createdAt": "2020-12-09T15:05:33Z",
          "updatedAt": "2020-12-09T15:05:33Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you, @nealcardwell ! Just to clarify, there are two possible different methods to restore Cubic, depending on whether we restore cwnd or epoch_start. Considering one example, where the original cwnd was 100 and the original epoch_start was 10 seconds just before the spurious loss.\r\n\r\n1) restore to the original cwnd just before the spurious loss.  For the above example, we restore cwnd back to 100 after detecting the spurious loss. But to do so, we need to shift epoch_start accordingly (i.e., plus the time period between when the spurious loss occurred and when it was detected).\r\n\r\n2) restore to the original epoch_start. For the above example, we restore epoch_start back to 10 seconds after detecting the spurious loss, but then the new cwnd calculated using the restored original epoch_start would be much higher than the original cwnd 100.  \r\n\r\nAmong these two methods, it seems that method 1 is safer. \r\n\r\nThanks",
          "createdAt": "2020-12-09T15:38:23Z",
          "updatedAt": "2020-12-09T15:38:23Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "About the \"other transports\": for QUIC, detection of spurious loss detection is very simple because all packets have monotonically increasing sequence numbers. Spurious loss detection happens as follow:\r\n\r\n1) At time t, packet number N is marked as lost by standard loss detection, triggering actions like scheduling retransmission of some of the frames carried by the packet and signalling of a packet loss event to the congestion controller.\r\n2) Later, at time t + dt, an acknowledgement is received for the same packet number N. At that point, a \"spurious loss detection\" event is sent to the congestion controller.\r\n\r\n",
          "createdAt": "2020-12-09T15:52:03Z",
          "updatedAt": "2020-12-09T15:52:03Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "For the correction of spurious losses, what I did in my implementation of QUIC was pretty much what @nealcardwell described: restore the epoch start and the associated variables. Only restoring the CWIN leaves the connection in a \"half-way\" state between erasing the spurious loss and suffering from it, and that's probably a bad idea.",
          "createdAt": "2020-12-09T15:58:54Z",
          "updatedAt": "2020-12-09T15:58:54Z"
        },
        {
          "author": "yuchungcheng",
          "authorAssociation": "NONE",
          "body": "Lisong -- my (drafted) patch does #1. diff attached (it was written a few\nyears ago so may not apply cleanly)\n\n\n\n\nOn Wed, Dec 9, 2020 at 7:38 AM Lisong Xu <notifications@github.com> wrote:\n\n> Thank you, @nealcardwell <https://github.com/nealcardwell> ! Just to\n> clarify, there are two possible different methods to restore Cubic,\n> depending on whether we restore cwnd or epoch_start. Considering one\n> example, where the original cwnd was 100 and the original epoch_start was\n> 10 seconds just before the spurious loss.\n>\n>    1.\n>\n>    restore to the original cwnd just before the spurious loss. For the\n>    above example, we restore cwnd back to 100 after detecting the spurious\n>    loss. But to do so, we need to shift epoch_start accordingly (i.e., plus\n>    the time period between when the spurious loss occurred and when it was\n>    detected).\n>    2.\n>\n>    restore to the original epoch_start. For the above example, we restore\n>    epoch_start back to 10 seconds after detecting the spurious loss, but then\n>    the new cwnd calculated using the restored original epoch_start would be\n>    much higher than the original cwnd 100.\n>\n> Among these two methods, it seems that method 1 is safer.\n>\n> Thanks\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/NTAP/rfc8312bis/issues/23#issuecomment-741853499>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AM5EPYB46BOXXSTT6PAJFM3ST6KYBANCNFSM4T5JQAGA>\n> .\n>\n",
          "createdAt": "2020-12-09T17:46:24Z",
          "updatedAt": "2020-12-09T17:46:24Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "NONE",
          "body": "@lisongxu, you mentioned: \"there are two possible different methods to restore Cubic, depending on whether we restore cwnd or epoch_start\". AFAICT it is better to restore both cwnd and epoch_start (to the values they had immediately before the spurious loss detection event). How does that sound?\r\n\r\nYou also mentioned: \"1. restore to the original cwnd just before the spurious loss. For the above example, we restore cwnd back to 100 after detecting the spurious loss. But to do so, we need to shift epoch_start accordingly (i.e., plus the time period between when the spurious loss occurred and when it was detected).\" In this case, why would we need to shift epoch_start? Why not restore epoch_start to the value it had before the spurious loss detection event?\r\n\r\nMy sense would be that the goal for handling spurious retransmissions should be that, as much as possible, the state of the CUBIC algorithm should be restored so that the behavior of the connection would be as if the spurious retransmissions never happened. This is what Reno does in Linux, and it seems to me that this should be doable for CUBIC as well.",
          "createdAt": "2020-12-09T22:46:35Z",
          "updatedAt": "2020-12-09T22:46:35Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you all for your comments!\r\n\r\n@yuchungcheng  Hi Yuchung, it seems that the diff attachment was blocked somewhere. Could you please directly email it to me at xu@unl.edu? Thank you!",
          "createdAt": "2020-12-10T04:18:33Z",
          "updatedAt": "2020-12-10T04:18:33Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@nealcardwell Hi Neal, I can see that my original description is not that clear. Below I try to describe the two methods using two figures.\r\n\r\nMethod 1: undo cwnd and shift epoch_start so that cwnd continues smoothly from the value it had before the spurious loss. \r\n![cubic](https://user-images.githubusercontent.com/10427041/101723253-86126500-3a71-11eb-84b8-f053775e69e1.jpg)\r\n\r\nMethod 2:  undo cwnd and undo epoch_start. In this case, there is a big jump from restored cwnd and the next RTT cwnd (calculated using restored epoch_start)\r\n![cubic2](https://user-images.githubusercontent.com/10427041/101723556-1e104e80-3a72-11eb-9118-cf040113ce78.jpg)\r\n\r\nBoth methods are ok, but method 1 is more conservative and thus possibly safer?\r\n\r\nThanks",
          "createdAt": "2020-12-10T05:03:22Z",
          "updatedAt": "2020-12-10T05:03:22Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @lisongxu for the graphical explanation. I agree with @nealcardwell that setting cwnd and epoch start to the value before the spurious loss event occurred would be good. Which means cwnd is set to 100 and epoch start to epoch_start and W_cubic(t) will likely look like what method 2 shows soon after as t would have progressed much further.\r\n\r\nOTOH method 1 is more conservative, and I don't understand how can a transport extrapolate the shifted epoch start? From your graph, if spurious loss occurred at X and spurious loss detection occurred at Y (at which point we update cwnd to 100), how does one calculate the time X` (between X and Y) for the shifted epoch start?",
          "createdAt": "2020-12-10T07:27:33Z",
          "updatedAt": "2020-12-10T08:35:48Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "NONE",
          "body": "Thanks @lisongxu for the very nice graphical explanation. I agree with @goelvidhi  and maintain that restoring both cwnd and epoch start to the value before the spurious loss event occurred would be the best approach.\r\n\r\nKeeping in mind the typical long time-scales over which the CUBIC curve evolves (for high-BDP connections for which the CUBIC curve is governing behavior, rather than the Reno emulation), and the quick 1-2 round-trip resolution of undo events, my sense is that a depiction that better conveys the sense of Method 2 (restoring both cwnd and epoch start ) would be something like:\r\n\r\n![image](https://user-images.githubusercontent.com/11696413/101785344-a3275200-3aca-11eb-941d-9ed7f71b7d55.png)\r\n",
          "createdAt": "2020-12-10T14:35:03Z",
          "updatedAt": "2020-12-10T14:35:03Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you all for the constructive discussions. Then let's choose method 2, which should be easier to implement than method 1. In addition, the revised RFC requires that the per-RTT cwnd increment is limited by that [1.5x upper bound](https://github.com/NTAP/rfc8312bis/issues/14), so method 2 should be fine even in special cases where undo happens many RTTs after a spurious loss event.",
          "createdAt": "2020-12-10T15:08:03Z",
          "updatedAt": "2020-12-10T15:08:03Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "MDU6SXNzdWU3NTQxNjQyNDg=",
      "title": "Initialization",
      "url": "https://github.com/NTAP/rfc8312bis/issues/28",
      "state": "CLOSED",
      "author": "mwelzl",
      "authorAssociation": "NONE",
      "assignees": [
        "lisongxu"
      ],
      "labels": [
        "editorial"
      ],
      "body": "This is tiny and editorial:\r\n\r\nSection 4.7 of RFC 8312 talks about how values are initialized after an RTO; it seems obvious that these values would also be used at the very beginning, but this is never explicitly said. It seems obvious that, at this point, W_last_max should be set to W_max, but how to initialize W_last_max is also not explicitly said (unless I missed it).",
      "createdAt": "2020-12-01T08:19:58Z",
      "updatedAt": "2020-12-14T07:10:00Z",
      "closedAt": "2020-12-14T07:10:00Z",
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, @mwelzl. W_last_max should be initialized to 0.\r\n\r\nBy the way, there is a confusing difference between RFC and Linux code: RFC has two variables, W_last_max and W_max, whereas Linux code has only W_last_max that corresponds to W_max in RFC. This is confusing, so I would recommend removing W_last_max from the RFC, as it is used only in Section 4.6. \r\n\r\nHow about changing paragraphs 2, 3, 4 of Section 4.6 as follows?\r\n\r\n_With fast convergence, when a congestion event occurs, we update W_max as follows before the window reduction described in Section 4.5._\r\n\r\n```\r\n      if (cwnd < W_max){                        // should we make room for others\r\n          W_max = W_max*(1.0+beta_cubic)/2.0;   // further reduce W_max\r\n      } else {\r\n          W_max = cwnd                          // remember cwnd before reduction\r\n      }\r\n```\r\n\r\n_At a congestion event, if the current cwnd is less than W_max, this indicates that the saturation point experienced by this flow is getting reduced because of the change in available bandwidth.  Then we allow this flow to release more bandwidth by reducing W_max further.  This action effectively lengthens the time for this flow to increase its congestion window because the reduced W_max forces the flow to have the plateau earlier.  This allows more time for the new flow to catch up to its congestion window size._\r\n\r\nThen remove the following line from Section 4.5, because W_max is set in Section 4.6 now.\r\n\r\n```\r\nW_max = cwnd;                 // save window size before reduction\r\n```\r\n",
          "createdAt": "2020-12-01T14:20:34Z",
          "updatedAt": "2020-12-01T14:20:34Z"
        },
        {
          "author": "mwelzl",
          "authorAssociation": "NONE",
          "body": "Oh yes, this is much better! Thanks!",
          "createdAt": "2020-12-01T14:25:46Z",
          "updatedAt": "2020-12-01T14:25:46Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Thanks, @mwelzl. W_last_max should be initialized to 0.\r\n> \r\n> By the way, there is a confusing difference between RFC and Linux code: RFC has two variables, W_last_max and W_max, whereas Linux code has only W_last_max that corresponds to W_max in RFC. This is confusing, so I would recommend removing W_last_max from the RFC, as it is used only in Section 4.6.\r\n> \r\n> How about changing paragraphs 2, 3, 4 of Section 4.6 as follows?\r\n> \r\n> _With fast convergence, when a congestion event occurs, we update W_max as follows before the window reduction described in Section 4.5._\r\n> \r\n> ```\r\n>       if (cwnd < W_max){                        // should we make room for others\r\n>           W_max = W_max*(1.0+beta_cubic)/2.0;   // further reduce W_max\r\n>       } else {\r\n>           W_max = cwnd                          // remember cwnd before reduction\r\n>       }\r\n> ```\r\n\r\nThis looks good. One thing to note though, earlier we were saving W_last_max = W_max (before applying fast convergence) and now we won't have that state saved. Instead we would always compare with W_max after fast convergence is applied.\r\n",
          "createdAt": "2020-12-02T07:33:22Z",
          "updatedAt": "2020-12-02T07:33:22Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Anyone willing to create a PR for this one?",
          "createdAt": "2020-12-03T12:52:51Z",
          "updatedAt": "2020-12-03T12:52:51Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I can help with this one. ",
          "createdAt": "2020-12-03T14:39:06Z",
          "updatedAt": "2020-12-03T14:39:06Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@lisongxu could you prepare a PR? we'd like to be able to submit a -01 version to the IETF soon and ask for adoption.",
          "createdAt": "2020-12-10T07:46:26Z",
          "updatedAt": "2020-12-10T07:46:26Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert done, thanks",
          "createdAt": "2020-12-10T16:22:09Z",
          "updatedAt": "2020-12-10T16:22:09Z"
        }
      ]
    },
    {
      "number": 38,
      "id": "MDU6SXNzdWU3NzI1NDMyMzU=",
      "title": "\"TCP-Friendly\" is a bit misleading",
      "url": "https://github.com/NTAP/rfc8312bis/issues/38",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "NONE",
      "assignees": [
        "lisongxu"
      ],
      "labels": [],
      "body": "Given that a lot of TCP deployments use Cubic, I think that the intent here is to be friendly to Reno instead.  As the text establishes, it is AIMD(1, 0.5) that this wants to be sensitive to.\r\n\r\nIt might have made sense to talk about TCP when Cubic wasn't widely deployed, but now it is just confusing.",
      "createdAt": "2020-12-22T00:08:25Z",
      "updatedAt": "2021-02-19T09:24:47Z",
      "closedAt": "2021-02-19T09:24:47Z",
      "comments": [
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Agreed. We need to do a larger rewrite of much of the beginning of the document, which was historically correct but is now outdated, given that all stacks default to CUBIC.",
          "createdAt": "2020-12-22T06:57:07Z",
          "updatedAt": "2020-12-22T06:57:07Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I can also help to revise the text later next week, is it ok? Thanks, Lars",
          "createdAt": "2021-02-03T06:04:09Z",
          "updatedAt": "2021-02-03T06:04:09Z"
        }
      ]
    },
    {
      "number": 39,
      "id": "MDU6SXNzdWU3OTkxMjExNTE=",
      "title": "Change introductory text to reflect deployment experience",
      "url": "https://github.com/NTAP/rfc8312bis/issues/39",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "lisongxu"
      ],
      "labels": [
        "editorial"
      ],
      "body": "The abstract, introduction and other text throughout the document need to be updated to reflect the significantly broader deployment experience CUBIC has seen since RFC8312 was published. At that time, it had been the default for Linux for years, but since then, it's also been the default for Windows and Apple stacks.",
      "createdAt": "2021-02-02T09:54:14Z",
      "updatedAt": "2021-02-19T09:24:47Z",
      "closedAt": "2021-02-19T09:24:47Z",
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, Lars. I can help to revise the text later next week, is it ok? ",
          "createdAt": "2021-02-03T06:03:16Z",
          "updatedAt": "2021-02-03T06:03:16Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu I just wanted to check with you if you'd have time to work on it? :-)",
          "createdAt": "2021-02-16T03:53:56Z",
          "updatedAt": "2021-02-16T03:53:56Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi Vidhi,\n\nThanks for checking with me. Really sorry that I am much busier than what I expected due to multiple back to back deadlines. It looks like that I will have some time to work on it next week after Monday (my last deadline this month :-) ).\n\nThanks\nLisong\n\n________________________________\nFrom: Vidhi Goel <notifications@github.com>\nSent: Monday, February 15, 2021 9:54 PM\nTo: NTAP/rfc8312bis <rfc8312bis@noreply.github.com>\nCc: Lisong Xu <xu@unl.edu>; Mention <mention@noreply.github.com>\nSubject: Re: [NTAP/rfc8312bis] Change introductory text to reflect deployment experience (#39)\n\nNon-NU Email\n________________________________\n\n@lisongxu<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_lisongxu&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=AMehHSET3Bpt_r3IZ4ZDgyRqVko3-w4Z_w8m9ys__Ro&s=diWMNEcKyo_-XJXx8f_Q82bvoxlQFnmER9PLlTpG_4Y&e=> I just wanted to check with you if you'd have time to work on it? :-)\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_NTAP_rfc8312bis_issues_39-23issuecomment-2D779563927&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=AMehHSET3Bpt_r3IZ4ZDgyRqVko3-w4Z_w8m9ys__Ro&s=JVA21F0udJ1-VhvDChtnEsXz2cERIOTimpkazU-IlJk&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_ACPRVIJL2VNJEMYKSTA5Q23S7HT6DANCNFSM4W6KNQJQ&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=AMehHSET3Bpt_r3IZ4ZDgyRqVko3-w4Z_w8m9ys__Ro&s=C1urot0udNfkV9HL6wQBlqhrpxHB9ToGWiSZq-vrCNk&e=>.\n",
          "createdAt": "2021-02-16T04:05:08Z",
          "updatedAt": "2021-02-16T04:05:08Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Mon, Feb 22 is the cutoff date for i-D submissions for IETF-110. If we're not ready to submit by then, we'll have to wait until mid-March. Which isn't a huge issue, but since we're going to ask for WG adoption, it would be nice to have a more up-to-date I-D to discuss.",
          "createdAt": "2021-02-16T08:50:10Z",
          "updatedAt": "2021-02-16T08:50:10Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I see. I will try my best. Thanks\nLisong\n\n________________________________\nFrom: Lars Eggert <notifications@github.com>\nSent: Tuesday, February 16, 2021 2:50 AM\nTo: NTAP/rfc8312bis <rfc8312bis@noreply.github.com>\nCc: Lisong Xu <xu@unl.edu>; Mention <mention@noreply.github.com>\nSubject: Re: [NTAP/rfc8312bis] Change introductory text to reflect deployment experience (#39)\n\nNon-NU Email\n________________________________\n\nMon, Feb 22 is the cutoff date for i-D submissions for IETF-110. If we're not ready to submit by then, we'll have to wait until mid-March. Which isn't a huge issue, but since we're going to ask for WG adoption, it would be nice to have a more up-to-date I-D to discuss.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_NTAP_rfc8312bis_issues_39-23issuecomment-2D779682893&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=hSUqqOiPfh2Q1N6MuR2Ij_Ox6ZKD-HzrODl1-Istx0g&s=1lbItThazxoaa6MwBWONmQOg-GF9RhrjJ7vhEK1LWYg&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_ACPRVIJ2MY375Q7JVZCWOPDS7IWVLANCNFSM4W6KNQJQ&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=hSUqqOiPfh2Q1N6MuR2Ij_Ox6ZKD-HzrODl1-Istx0g&s=Rb4Gdva2BCz8mFAj60V9sTJh2uHK8qaQPSHjCD-WT5I&e=>.\n",
          "createdAt": "2021-02-17T00:32:22Z",
          "updatedAt": "2021-02-17T00:32:22Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "MDU6SXNzdWU4MTE5MDMyNzA=",
      "title": "Adaptive adjustment",
      "url": "https://github.com/NTAP/rfc8312bis/issues/43",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Is this \"adaptive adjustment\" that is mentioned in the text something that is still planned? Or should we remove this?",
      "createdAt": "2021-02-19T10:30:21Z",
      "updatedAt": "2021-02-22T10:17:49Z",
      "closedAt": "2021-02-22T10:17:49Z",
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I am fine with removing it. Thanks\r\n",
          "createdAt": "2021-02-19T14:14:40Z",
          "updatedAt": "2021-02-19T14:14:40Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Removed as part of #42 ",
          "createdAt": "2021-02-22T10:17:49Z",
          "updatedAt": "2021-02-22T10:17:49Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "MDU6SXNzdWU4MTE5MDM2NTI=",
      "title": "\"prior_cwnd\" is not defined",
      "url": "https://github.com/NTAP/rfc8312bis/issues/44",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "\"prior_cwnd\" is used in the text but not defined.",
      "createdAt": "2021-02-19T10:30:50Z",
      "updatedAt": "2021-02-19T16:18:44Z",
      "closedAt": "2021-02-19T16:18:44Z",
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "all prior_* variables are assigned in Section 4.9 for undo.",
          "createdAt": "2021-02-19T14:16:35Z",
          "updatedAt": "2021-02-19T14:16:35Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Ah yes!",
          "createdAt": "2021-02-19T16:18:35Z",
          "updatedAt": "2021-02-19T16:18:35Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "MDU6SXNzdWU4MTM1MDI2OTE=",
      "title": "CUBIC for QUIC",
      "url": "https://github.com/NTAP/rfc8312bis/issues/45",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Since most of the new implementations for CUBIC will be in the context of QUIC stacks (as opposed to TCP stacks), it would be useful to add a section or an appendix on how one would do that. For example, it might make sense to describe how CUBIC would be integrated into an implementation that followed the [QUIC -recovery](https://quicwg.org/base-drafts/draft-ietf-quic-recovery.html) draft.",
      "createdAt": "2021-02-22T13:29:27Z",
      "updatedAt": "2021-03-11T03:41:51Z",
      "closedAt": "2021-03-11T03:41:51Z",
      "comments": [
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "quiche provides cubic as a default congestion control: https://github.com/cloudflare/quiche/blob/master/src/recovery/cubic.rs\r\nThis is mostly as-is implemetation of RFC8312 and HyStart++ draft. I am working on updating this following changes in this draft, such as https://github.com/cloudflare/quiche/pull/861\r\n\r\nFor implementor, most things are same, but QUIC defines (and I think most of TCP stack other than Linux?) congestion control window as a unit of bytes but the RFC8312 and this drafts defined cwnd as a unit of segment, so need to be careful when you calculate K and W_cubic.",
          "createdAt": "2021-02-24T02:37:14Z",
          "updatedAt": "2021-02-24T02:37:37Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Would you be interested in submitting a PR that would summarize these changes? Are there other QUIC stacks that are implementing CUBIC from scratch? I think picoquic did?",
          "createdAt": "2021-02-24T06:43:27Z",
          "updatedAt": "2021-02-24T06:43:27Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "IMO, it is quite straight forward to implement CUBIC using the pseudocode in [QUIC Recovery](https://quicwg.org/base-drafts/draft-ietf-quic-recovery.html) draft and adding the CUBIC pieces to the functions defined in it.\r\n\r\nCUBIC draft defines congestion window in segments which most implementors simply convert to bytes by multiplying by MSS.\r\n",
          "createdAt": "2021-02-24T07:30:32Z",
          "updatedAt": "2021-02-24T07:30:32Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "My notes on implementing Cubic for QUIC are at https://huitema.wordpress.com/2019/11/11/implementing-cubic-congestion-control-in-quic/. I already provided feedback to the \"bis\" RFC. Yes, porting Cubic to QUIC is fairly straightforward. My main implementation issue was understanding the dimensions of each formula.\r\n\r\nTwo important points from the bis draft:\r\n\r\n1. Forget about the TCP friendly formula. It does not work well, because RTT jitter will translate in CWIN swings. It is much simpler to just run the RENO algorithm in parallel and set the CWIN to max(Reno, Cubic)\r\n2. You really want to implement the recovery from spurious losses discussed in the bis draft. I think this is actually the reason for the drop in perf in face of reordering mentioned in the EPIC paper \"Making QUIC Quicker With QUIC Offload\". Not the CPU cost of reordering.",
          "createdAt": "2021-02-24T08:05:35Z",
          "updatedAt": "2021-02-24T08:05:35Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you @huitema for the issues you had filed earlier. All of these have been addressed. \r\n\r\n> My notes on implementing Cubic for QUIC are at https://huitema.wordpress.com/2019/11/11/implementing-cubic-congestion-control-in-quic/. I already provided feedback to the \"bis\" RFC. Yes, porting Cubic to QUIC is fairly straightforward. My main implementation issue was understanding the dimensions of each formula.\r\n\r\nThis is fixed with the new section [Definitions](https://tools.ietf.org/html/draft-eggert-tcpm-rfc8312bis-02#section-4.1)\r\n> \r\n> Two important points from the bis draft:\r\n> \r\n> 1. Forget about the TCP friendly formula. It does not work well, because RTT jitter will translate in CWIN swings. It is much simpler to just run the RENO algorithm in parallel and set the CWIN to max(Reno, Cubic)\r\n\r\nAIMD friendly formula now is based on RENO - [Section 4.3](https://tools.ietf.org/html/draft-eggert-tcpm-rfc8312bis-02#section-4.3)\r\n\r\n> 2. You really want to implement the recovery from spurious losses discussed in the bis draft. I think this is actually the reason for the drop in perf in face of reordering mentioned in the EPIC paper \"Making QUIC Quicker With QUIC Offload\". Not the CPU cost of reordering.\r\n\r\nIIRC, this was the issue you had filed and we add a new section [Spurious Congestion Events](https://tools.ietf.org/html/draft-eggert-tcpm-rfc8312bis-02#section-4.9)\r\n\r\n",
          "createdAt": "2021-02-24T08:16:51Z",
          "updatedAt": "2021-02-24T08:16:51Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "@goelvidhi yes, I appreciate that the issues have been addressed in the new draft. This is good. @larseggert was asking whether there was something specific to say about Cubic for QUIC. The main remaining issue is about translating the windows counts from \"packets\" to \"bytes\". When I ported Cubic to QUIC, I spent some time doing that. I first rewrote the Cubic formula:\r\n```\r\n                                             3\r\n                      W     (t) = C * (t - K)  + W\r\n                       cubic                      max\r\n```\r\nIn a \"neutral\" way:\r\n```\r\n                                                    3\r\n                                        /    /t - K\\     \\\r\n                      W     (t) = W  * (C' *( ----- )  + 1)\r\n                       cubic       max  \\    \\  K  /     /\r\n```\r\nThis rewrite helped me understand what was going on. We have a windows size coefficient, `Wmax`, expressed in the same unit as CWIN; a coefficient C' that is a pure scalar and defines the `aggressiveness` of the implementation; and a cubic curve that is a function of `(t-K)/K`. The same rewrite helps understand the coefficient C -- or C' in the new notation.\r\n```\r\n                            C     3\r\n                      C' = --- * K\r\n                            W\r\n                             max\r\n```\r\nWhich reduces to:\r\n```\r\n                                   / W    - W    \\\r\n                            C     /   max    start\\     \r\n                      C' = --- * ( ----------------)\r\n                            W     \\       C       /\r\n                             max\r\n\r\n                             / W    - W    \\\r\n                            /   max    start\\     \r\n                      C' = ( ----------------)\r\n                            \\       W       /\r\n                             \\       max   /\r\n```\r\nIn most cases, when `sstresh` is larger than 2 packets, this reduces further:\r\n```\r\n                      W      = \u03b2 W\r\n                       start      max\r\n\r\n                      C' = (1 - \u03b2)\r\n\r\n                                                         3\r\n                                        /         /t - K\\     \\\r\n                      W     (t) = W  * ((1 - \u03b2) *( ----- )  + 1)\r\n                       cubic       max  \\         \\  K  /     /\r\n```\r\nThe formula does not depend on the unit of W, packet or bytes. The coefficient C disappears, but of course it is key in computing the pseudo-period `K` of the cubic curve.",
          "createdAt": "2021-02-24T19:43:47Z",
          "updatedAt": "2021-02-24T19:43:47Z"
        },
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "@huitema re: Spurious Congestion Events. What's your algorithm to detect a spurious retransmissions in QUIC? In the draft DSACK, F-RTO and Eifel is listed but I think none of them is directly applicable to QUIC recovery.\r\n\r\nI tried to do similar thing in Reno before, motivated by your work: https://github.com/cloudflare/quiche/pull/308\r\nIt's still Reno but the idea is same.\r\n\r\nI used the condition `\"<end of recovery> - <start of recovery> < 2 x minRTT\"` here but maybe it's too simple.",
          "createdAt": "2021-02-25T01:13:54Z",
          "updatedAt": "2021-02-25T01:14:43Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "Picoquic detects spurious retransmission event by keeping a list of packets that were recently retransmitted. The logic is:\r\n\r\n1. when the packet is first sent, keep a copy in the list of packets not-yet-acknowledged.\r\n2. when an ACK is received, remove the acked packets from the not-yet-acknowledged list. Mark the frames inside the packet as processed (e.g. stream frames so the corresponding stream data is never repeated; ack frames so ack ranges are marked as already known by the peer). Signal that data was acked to CC engine. (but see also step 4)\r\n3. when running loss detection, if a packet is deemed lost, mark frames for retransmission as appropriate; move the packet copy from the not-yet-acknowledged list to the \"retransmitted\" list. Signal that packet was lost to CC engine.\r\n4. when an ACK is received, check whether some of the acked packets are in the retransmitted list. If so, signal spurious retransmission to the CC engine. Also, mark the frames inside the packet as processed, etc.\r\n5. every so often, trim the retransmitted list and remove the packets that are too old.",
          "createdAt": "2021-02-25T01:49:08Z",
          "updatedAt": "2021-02-25T01:50:09Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n>                                                          3\r\n>                                         /         /t - K\\     \\\r\n>                       W     (t) = W  * ((1 - \u03b2) *( ----- )  + 1)\r\n>                        cubic       max  \\         \\  K  /     /\r\n> ```\r\n> \r\n> The formula does not depend on the unit of W, packet or bytes. The coefficient C disappears, but of course it is key in computing the pseudo-period `K` of the cubic curve.\r\n\r\n@huitema you arrived at this formula by substitution but I don't see how is it better than \r\n[Figure 1](https://www.ietf.org/archive/id/draft-eggert-tcpm-rfc8312bis-02.html#figure-1).\r\n\r\nFor folks who use bytes instead of segments for congestion window, they would still need to divide by mss in [Figure 2](https://www.ietf.org/archive/id/draft-eggert-tcpm-rfc8312bis-02.html#figure-2) to compute K.\r\n\r\nI think the units that we have added in the new draft will help folks in deciding when to divide/multiply by segment size.\r\n",
          "createdAt": "2021-02-26T02:37:37Z",
          "updatedAt": "2021-02-26T02:37:37Z"
        },
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "@huitema thanks for how to detect spurious retransmission! I will take a look if this is applicable to quiche.",
          "createdAt": "2021-02-26T08:18:43Z",
          "updatedAt": "2021-02-26T08:18:43Z"
        },
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "Additionally,\r\n- integer vs floating point arithmetic: most of quic implementaion is userland, easier to use floating point arithmetic for various calculation. But for high performance it'll be better to make it integer ops only. \r\n- I wrote a blog post last year when I implemented cubic in quiche: https://blog.cloudflare.com/cubic-and-hystart-support-in-quiche/\r\n- [quicly](https://github.com/h2o/quicly/blob/master/lib/cc-cubic.c) and [msquic](https://github.com/microsoft/msquic/blob/main/src/core/congestion_control.c) has CUBIC too.",
          "createdAt": "2021-02-26T08:18:53Z",
          "updatedAt": "2021-02-26T08:18:53Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "@goelvidhi I started this rewriting of formulas in an attempt to understand how the coefficients C and \u03b2 affect the behavior of Cubic. The rewritten formula shows that the key coefficients are really:\r\n\r\n* An amplitude coefficient, \u03b2. Changing the value of \u03b2 from for example 3/4th to 7/8th reduces the amplitude of the variations, both before the inflection point and after it.\r\n* A pseudo-period K, which sets the time between the beginning of the epoch and the inflection point. Shorter values of K will cause Cubic to adapt and probe faster, and vice versa.\r\n\r\nThe rewriting also shows the problem with the original formula. This formula results from experiments and adaptations, but it is quite hard to understand how K will vary with bandwidth, latency, and the value of C. A stated design goal of Cubic is to share the bottleneck bandwidth fairly between competing connections experiencing different RTTs. I would expect that the computation of the pseudo-period result such design goals, from design principles, but the formulas are very hard to derive. We end up with empirical tuning, such as \"we tried C=0.0004 and it works well\". I don't find that very satisfactory.",
          "createdAt": "2021-02-26T19:19:08Z",
          "updatedAt": "2021-02-26T19:19:40Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Quoting from the draft, \r\n\r\n> Two CUBIC flows with different RTTs have a throughput ratio that is linearly proportional to the inverse of their RTT ratio, where the throughput of a flow is approximately the size of its congestion window divided by its RTT.\r\n\r\n> Specifically, CUBIC maintains a window increase rate independent of RTTs outside of the AIMD-friendly region, and thus flows with different RTTs have similar congestion window sizes under steady state when they operate outside the AIMD-friendly region.\r\n\r\nThe bandwidth will be shared fairly in the sense that the congestion window will grow similarly but the throughput is still inversely proportional to the RTT. @lisongxu can comment more on this, but the whole point of Cubic increase function and K is to be independent of RTT / latency to give similar cwnd growth to competing flows.",
          "createdAt": "2021-02-27T09:58:26Z",
          "updatedAt": "2021-02-27T10:02:26Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "I understand that each loss event triggers a computation of the formula, and that at equilibrium the average WMAX is a function of packet loss rate. So, yes, in that sense there is fairness. On the other hand, that property is also true for new Reno. There are two problems on New Reno with high latency links: the dependency on loss rate, which limits the size of the window; and the dependency on RTT, which privilege short RTT. WMAX in Cubic converges at a higher value than ssthresh in Reno, which is better for high latency links. But we still have the issue of RTT unfairness.",
          "createdAt": "2021-02-27T17:21:32Z",
          "updatedAt": "2021-02-27T17:21:32Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "If by RTT unfairness, you mean throughput inversely proportional to RTT, then yes, that is a design limitation of CUBIC. I am not sure what update you are expecting/suggesting :-)",
          "createdAt": "2021-03-07T22:51:17Z",
          "updatedAt": "2021-03-07T22:51:26Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "Sorry, not expecting any change at this point. I should write all that in a paper.",
          "createdAt": "2021-03-08T03:20:02Z",
          "updatedAt": "2021-03-08T03:20:02Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "So does the current text address all issues raised by @junhochoi and @huitema? If yes, I will close this.",
          "createdAt": "2021-03-08T13:50:35Z",
          "updatedAt": "2021-03-08T13:50:35Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "And FYI, I am planning to submit a new revision before the TCPM meeting, to roll in all the changes since -01. If we need additional changes that are easy to make to address this issue, it would be good to get them in soon.",
          "createdAt": "2021-03-08T16:26:41Z",
          "updatedAt": "2021-03-08T16:26:41Z"
        },
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "My question is answered in the different ticket so it's ok. I think the goal of this issue is to add some text around QUIC implementation?",
          "createdAt": "2021-03-08T17:00:44Z",
          "updatedAt": "2021-03-08T17:00:44Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "As I mentioned earlier, with the current CUBIC draft, it is quite straight forward to adopt it for QUIC by plugging into the pseudo code in QUIC recovery draft. @junhochoi is there anything specific that seemed tricky to implement Cubic for QUIC?",
          "createdAt": "2021-03-08T17:46:12Z",
          "updatedAt": "2021-03-08T17:46:12Z"
        },
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "@goelvidhi I am still working on updating quiche CUBIC according to this draft. I may find more but I commented most of them in this ticket already.\r\n\r\nAlso it's one of my comment but again, in \"Spurious Congestion Events\" section most of algorithms detecting spurious retransmission is not directly applicable in QUIC and QUIC recovery draft doesn't mention about it, so you need to implement your own.",
          "createdAt": "2021-03-08T22:09:25Z",
          "updatedAt": "2021-03-08T22:09:25Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I had discussed this briefly in QUIC WG and I was pointed to the below text. I know that this text doesn't talk about how the congestion controller should react to it but once a spurious loss is detected (some TCP RFCs talk about how to detect it), one can follow the CUBIC Section for Spurious Congestion events.\r\n\r\n> Spuriously declaring packets as lost leads to unnecessary retransmissions and may result in degraded performance due to the actions of the congestion controller upon detecting loss. Implementations can detect spurious retransmissions and increase the reordering threshold in packets or time to reduce future spurious retransmissions and loss events.",
          "createdAt": "2021-03-09T01:46:40Z",
          "updatedAt": "2021-03-09T01:46:40Z"
        },
        {
          "author": "WesleyRosenblum",
          "authorAssociation": "NONE",
          "body": "One thing I noticed is that if you use min RTT instead of smoothed RTT ([as Linux TCP Cubic does](https://github.com/torvalds/linux/blob/05a59d79793d482f628a31753c671f2e92178a21/net/ipv4/tcp_cubic.c#L266)), you can potentially end up with a divide by zero in the `w_est` calculation. This is because the [QUIC Recovery pseudocode](https://tools.ietf.org/id/draft-ietf-quic-recovery-34.html#name-initialization) initializes the min_rtt to 0. An endpoint can enter congestion avoidance without receiving any acks for any ack-eliciting packets (only non-ack eliciting packets), and thus min_rtt would still be zero at the time `w_est` is calculated. This can be addressed by initializing `min_rtt` to `kInitialRtt` instead of zero.\r\n\r\nThough, now that `w_est` no longer incorporates `t/RTT` this shouldn't be an issue. ",
          "createdAt": "2021-03-10T07:49:47Z",
          "updatedAt": "2021-03-10T07:49:47Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@WesleyRosenblum is this something that should be fixed in the QUIC -recovery document? If yes, please file an issue at https://github.com/quicwg/base-drafts/issues",
          "createdAt": "2021-03-10T09:51:58Z",
          "updatedAt": "2021-03-10T09:51:58Z"
        },
        {
          "author": "WesleyRosenblum",
          "authorAssociation": "NONE",
          "body": "Thanks @larseggert, I've opened an issue to the Quic WG: https://github.com/quicwg/base-drafts/issues/4833",
          "createdAt": "2021-03-10T19:06:09Z",
          "updatedAt": "2021-03-10T19:09:49Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "As of now, there is nothing to do here. I am closing this issue.",
          "createdAt": "2021-03-11T03:41:51Z",
          "updatedAt": "2021-03-11T03:41:51Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "MDU6SXNzdWU4MTUwMTEyODQ=",
      "title": "In PDF, alpha/beta looks broken",
      "url": "https://github.com/NTAP/rfc8312bis/issues/46",
      "state": "CLOSED",
      "author": "junhochoi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "In a converted PDF, it looks like alpha -> \u00ce\u00b1 and beta -> \u00ce\u00b2\r\n\r\nFor example,\r\n```\r\n\u03b1_{aimd} = 3 * \\frac{1 - \u03b2_{cubic}}{1 + \u03b2_{cubic}}\r\n```\r\n\r\nlooks like following:\r\n\r\n<img width=\"745\" alt=\"Screen Shot 2021-02-23 at 6 02 39 PM\" src=\"https://user-images.githubusercontent.com/1229714/108934304-8a2a3980-7601-11eb-96cb-dc0fa1a7855a.png\">\r\n",
      "createdAt": "2021-02-24T02:06:28Z",
      "updatedAt": "2021-04-19T11:41:36Z",
      "closedAt": "2021-04-19T11:41:36Z",
      "comments": [
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "others (txt, html) looks fine.",
          "createdAt": "2021-02-24T02:07:40Z",
          "updatedAt": "2021-02-24T02:07:40Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Which PDF are you looking at? (This is likely a Unicode bug in the converter.)",
          "createdAt": "2021-02-24T06:46:23Z",
          "updatedAt": "2021-02-24T06:47:15Z"
        },
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "I am looking https://tools.ietf.org/pdf/draft-eggert-tcpm-rfc8312bis-02.txt\r\n(wow it's PDF but has .txt extension)",
          "createdAt": "2021-02-24T08:44:25Z",
          "updatedAt": "2021-02-24T08:44:25Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Thanks, I filed https://trac.tools.ietf.org/tools/ietfdb/ticket/3191",
          "createdAt": "2021-02-24T09:27:44Z",
          "updatedAt": "2021-02-24T09:27:44Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Closing this, since it's an issue with tools.ietf.org and not this document.",
          "createdAt": "2021-04-19T11:41:36Z",
          "updatedAt": "2021-04-19T11:41:36Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "MDU6SXNzdWU4MTU5NzA2NDM=",
      "title": "Question on AIMD-Friendly Region",
      "url": "https://github.com/NTAP/rfc8312bis/issues/47",
      "state": "CLOSED",
      "author": "junhochoi",
      "authorAssociation": "NONE",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [],
      "body": "Hi, while I am implementing this change in quiche, I want to make sure my understanding is correct on \"AIMD-Friendly Region\" section.\r\n\r\nIt says to use\r\n```\r\nW_{est} = W_{est} + \u03b1_{aimd} * \\frac{segments\\_acked}{cwnd}\r\n```\r\nTo calculate W_est value and alpha_aimd initially is\r\n\r\n```\r\n\u03b1_{aimd} = 3 * \\frac{1 - \u03b2_{cubic}}{1 + \u03b2_{cubic}}\r\n```\r\n\r\nSince \u03b2_{cubic is 0.7 (Section 4.6), it comes down to\r\n\r\n```\r\n\u03b1_{aimd} = 3 * (1-0.7)/(1+0.7) = 0.529\r\n```\r\n\r\nAnd \u03b1_{aimd} will become 1 when W_est >= W_max.\r\n\r\nWhich means in each ACK, W_est can be calculated as follows:\r\n\r\n```\r\nW_est = W_est + 0.529 * (segments_acked / cwnd)               (W_est < W_max)\r\nW_est = W_est + 1 * (segments_acked / cwnd)                   (W_est >= W_max)\r\n```\r\n\r\nIs my understanding correct? My concern is when W_est < W_max, it's slower than Reno.\r\n\r\nAlso, I think the definition of segments_acked is missing in the draft.",
      "createdAt": "2021-02-25T00:56:43Z",
      "updatedAt": "2021-03-04T03:57:32Z",
      "closedAt": "2021-03-04T03:57:32Z",
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks right. In CUBIC, we start with W_est = 0.7 * cwnd (which is higher than new Reno).\r\n\r\nThe idea of AIMD growth for W_est is to reach the W_max in the same amount of time as New Reno would and as we have a higher starting point for W_est, the growth function is slower than new Reno. And after W_est has reached W_max, we continue with Reno like growth.\r\n\r\nReg. definition of segments_acked, we could add it. Although it seemed obvious to me. :-)",
          "createdAt": "2021-02-25T08:48:54Z",
          "updatedAt": "2021-02-25T08:48:54Z"
        },
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "Thanks for a kind explanation!\r\n\r\nI have some more question\u3134 during my implementation:\r\n\r\n1) In the draft, W_est is\r\n\r\n```\r\nW_est = W_est + alpha_aimd * (segments_acked / cwnd)   (Fig. 4)\r\n```\r\n\r\nHowever, I think `cwnd` here is `W_est`, to match to Reno definition?\r\n\r\n```\r\nW_est = W_est + alpha_aimd * (segments_acked / W_est)\r\n```\r\n\r\nOtherwise I am confused what is `cwnd` here. In the beginning of CA cwnd is 7, but both using the same value or a current cwnd doesn't make sense to me.\r\n\r\nAlso in any case it's slower growth than Reno.\r\n\r\n2) assuming I use 2nd equation for W_est, I tried to plot each W_* values:\r\n\r\n- W_max = 10\r\n- When I run Reno separately, it starts from 5 (10 x 0.5). (Reno cwnd)\r\n- W_est starts from 7 (10 * 0.7). I expect it will meet at W_max, but in the sheet, both meet around after 8.8 (after 12 ACKs) in the draft, not 10. \r\n- W_cubic is only for reference. it doesn't need to match at 10\r\n- X = time Y = cwnd\r\n\r\n![Screen Shot 2021-02-25 at 11 48 10 PM](https://user-images.githubusercontent.com/1229714/109271128-ec329c80-77c3-11eb-8864-bdea4371758d.png)\r\n\r\nAfter 10, both never meet again because they use same slope.\r\n\r\nI tried to play with a different alpha_aimd values and when alpha_aimd = 0.7 (beta_cubic) both meet at 10.\r\n\r\n![Screen Shot 2021-02-25 at 11 49 52 PM](https://user-images.githubusercontent.com/1229714/109271289-28fe9380-77c4-11eb-8bde-fd4aba8924b6.png)\r\n\r\nIs my understanding correct?\r\n\r\nDatasheet is here: https://docs.google.com/spreadsheets/d/1DvNb-hmPpJ31M7RWWqHNCIgBQwKLXWewvzDDWraG8ns/edit?usp=sharing",
          "createdAt": "2021-02-26T07:54:40Z",
          "updatedAt": "2021-02-26T09:07:11Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> However, I think `cwnd` here is `W_est`, to match to Reno definition?\r\n> \r\n> ```\r\n> W_est = W_est + alpha_aimd * (segments_acked / W_est)\r\n> ```\r\n> \r\n> Otherwise I am confused what is `cwnd` here. In the beginning of CA cwnd is 7, but both using the same value or a current cwnd doesn't make sense to me.\r\n> \r\n\r\ncwnd is current congestion window (cubic window or AIMD window, whichever is greater) because we want to increase by alpha_aimd on every RTT and only the current congestion window (not AIMD window) represents one RTT when the full window is ACKed.",
          "createdAt": "2021-02-27T09:30:45Z",
          "updatedAt": "2021-02-27T09:30:45Z"
        },
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "@goelvidhi Thanks. I tried `cwnd` (updated my sheet) as well but it doesn't completely solve my concern, this simulated AIMD started bigger than Reno (because beta_cubic(0.7) > 0.5 of Reno) but soon it's slower growth than Reno. If this is true, simply running Reno in parallel and taking max(reno, cubic) in AIMD region would help. However let it closed and I'll look into a little more.",
          "createdAt": "2021-03-03T08:43:43Z",
          "updatedAt": "2021-03-03T08:43:43Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "(I don't think this should have been closed.)",
          "createdAt": "2021-03-03T11:41:51Z",
          "updatedAt": "2021-03-03T11:41:51Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi Junho, \r\n\r\nThe AIMD (a, b) analysis considers the steady-state performance with a deterministic loss model\r\n- a deterministic loss model:  a packet is lost every 1/p packet. \r\n- steady state:  cwnd increases and reaches Wmax  just before a packet is lost, and then it repeats the same pattern again and again. \r\n\r\nThere is a relation between a and b such that AIMD(a,b) achieves the same average cwnd for a given p.\r\n\r\nThe above analysis assumes that cwnd increases up to Wmax, and thus a is only the increase parameter up to W_max. \r\n\r\nThank you\r\nLisong",
          "createdAt": "2021-03-03T17:31:15Z",
          "updatedAt": "2021-03-03T17:31:15Z"
        },
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "@lisongxu Thanks for your kind explanation! Yes now I understand better. Closing this ticket.",
          "createdAt": "2021-03-04T03:57:32Z",
          "updatedAt": "2021-03-04T03:57:32Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "MDU6SXNzdWU4MjM2OTUxNTM=",
      "title": "Fast convergence",
      "url": "https://github.com/NTAP/rfc8312bis/issues/51",
      "state": "CLOSED",
      "author": "lisongxu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "larseggert",
        "sangtaeha",
        "goelvidhi",
        "Injongrhee"
      ],
      "labels": [],
      "body": "It seems that there is a mistake in Section 4.7\r\n\r\nCurrent draft\r\n~~~ \r\nW_max\r\n= \r\nW_max * (1 + \u03b2_cubic)/2,   if  cwnd < W_max\r\ncwnd,                      otherwise\r\n~~~\r\n\r\nbut it should be \r\n~~~ \r\nW_max\r\n= \r\ncwnd * (1 + \u03b2_cubic)/2,   if  cwnd < W_max\r\ncwnd,                      otherwise\r\n~~~\r\n\r\n\r\nAlso I like to make the following change to clearly specify the behavior with fast convergence is disabled\r\n\r\n~~~ \r\nW_max\r\n= \r\ncwnd * (1 + \u03b2_cubic)/2,   if  (cwnd < W_max) and (fast convergence is enabled)\r\ncwnd,                      otherwise\r\n~~~\r\n\r\nThanks!\r\nLisong\r\n\r\n\r\n\r\n\r\n",
      "createdAt": "2021-03-06T16:59:36Z",
      "updatedAt": "2021-03-08T16:21:47Z",
      "closedAt": "2021-03-08T16:21:47Z",
      "comments": [
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Submit a PR?",
          "createdAt": "2021-03-07T06:30:54Z",
          "updatedAt": "2021-03-07T06:30:54Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, I will do it",
          "createdAt": "2021-03-07T14:17:37Z",
          "updatedAt": "2021-03-07T14:17:37Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "MDU6SXNzdWU4MjU4NzY4MDY=",
      "title": "ssthresh and cwnd_start should not exceed Beta_cubic * congestion window at loss",
      "url": "https://github.com/NTAP/rfc8312bis/issues/53",
      "state": "CLOSED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Lisong's mentioned this in an off-line discussion,\r\n\r\nBelow I will use X to refer to (beta * cwnd right before the congestion event).\r\n\r\nAn implementation of CUBIC can choose different ways to adjust the cwnd during the fast recovery and timeout.\r\n\r\nBut after the fast recovery/ECN, it should set cwnd (i.e., cwnd_start) and ssthresh to X. This is because all the parameters (such as C, alpha, and beta) of CUBIC are chosen based on this assumption. If an implementation chooses its own ssthresh and own cwnd_start, then the performance of such an implementation will be very different from what we expected. \r\n\r\nI understand and agree with your motivation to be more flexible (as CUBIC may be implemented for various purposes, TCP, UDP, media streaming as RC 7661, QUIC, .... ). Therefore, I would suggest that an implementation SHOULD set ssthresh and cwnd_start to X, and it MAY set them to a value lower than X as the cost of lower performance. But it MUST NOT set them to a value higher than X. \r\n\r\n",
      "createdAt": "2021-03-09T12:48:54Z",
      "updatedAt": "2021-03-11T07:54:38Z",
      "closedAt": "2021-03-11T07:54:38Z",
      "comments": [
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "I think #54 is supposed to address this? Marking it as such.",
          "createdAt": "2021-03-09T13:43:40Z",
          "updatedAt": "2021-03-09T13:43:40Z"
        }
      ]
    },
    {
      "number": 55,
      "id": "MDU6SXNzdWU4Mjk4MTQxMTA=",
      "title": "Update the definition of W_max to include fast convergence scenario",
      "url": "https://github.com/NTAP/rfc8312bis/issues/55",
      "state": "CLOSED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "lisongxu"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Copying some suggestions from Lisong here,\r\n\r\nchange  \"wmax: size of cwnd just before cwnd was reduced in the last congestion event\".    \r\nto  \"wmax: size of cwnd just before cwnd was reduced in the last congestion event when fast convergence is disabled\" \r\nor  \"wmax: cwnd (without fast convergence) or reduced cwnd (with fast convergence) just before cwnd was reduced in the last congestion event\" ?",
      "createdAt": "2021-03-12T06:50:43Z",
      "updatedAt": "2021-04-21T08:47:15Z",
      "closedAt": "2021-04-21T08:47:15Z",
      "comments": [
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Do we still want to make this change?",
          "createdAt": "2021-04-19T11:41:02Z",
          "updatedAt": "2021-04-19T11:41:02Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I can make this change in one or two days. Thanks\nLisong\n\n________________________________\nFrom: Lars Eggert ***@***.***>\nSent: Monday, April 19, 2021 6:41 AM\nTo: NTAP/rfc8312bis ***@***.***>\nCc: Subscribed ***@***.***>\nSubject: Re: [NTAP/rfc8312bis] Update the definition of W_max to include fast convergence scenario (#55)\n\nNon-NU Email\n________________________________\n\nDo we still want to make this change?\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_NTAP_rfc8312bis_issues_55-23issuecomment-2D822401363&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=pv4Dx4acp12dxZuDKww6xQX6Z-QleZdDAUMQ4OqkdDw&s=DuZq2cNwkxAZcnw1NSunYP4y12gJ1PTIDd20SqbPWXY&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_ACPRVIKU2TYAYOYHMMRHLO3TJQJFZANCNFSM4ZBWNJHA&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=pv4Dx4acp12dxZuDKww6xQX6Z-QleZdDAUMQ4OqkdDw&s=86DfIc2L_tI3mGi93CNlX_OOFqamITJRIYo0fA-K_O4&e=>.\n",
          "createdAt": "2021-04-19T13:26:11Z",
          "updatedAt": "2021-04-19T13:26:11Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Lisong. Will assign the issue to you.\r\n(Sorry I was slow in responding)",
          "createdAt": "2021-04-20T00:49:26Z",
          "updatedAt": "2021-04-20T00:49:26Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "No problem. Thanks\nLisong\n\n________________________________\nFrom: Vidhi Goel ***@***.***>\nSent: Monday, April 19, 2021 7:49 PM\nTo: NTAP/rfc8312bis ***@***.***>\nCc: Lisong Xu ***@***.***>; Assign ***@***.***>\nSubject: Re: [NTAP/rfc8312bis] Update the definition of W_max to include fast convergence scenario (#55)\n\nNon-NU Email\n________________________________\n\nThanks Lisong. Will assign the issue to you.\n(Sorry I was slow in responding)\n\n\u2014\nYou are receiving this because you were assigned.\nReply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_NTAP_rfc8312bis_issues_55-23issuecomment-2D822888811&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=My_tMFcunG7TroQNrs6TTNxb1oete3g1ZDqj-NqwR5Q&s=T3dt1Jp_yLCUshLlWFL6dwoQhmUCzSPq4qM6jngVeLs&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_ACPRVIPDA5D5SHKPQXJU2EDTJTFSPANCNFSM4ZBWNJHA&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=My_tMFcunG7TroQNrs6TTNxb1oete3g1ZDqj-NqwR5Q&s=jtBOeJtOSLIuMzI8kcQNU7nQqfQEq946rRkTRa_zqqo&e=>.\n",
          "createdAt": "2021-04-20T00:55:31Z",
          "updatedAt": "2021-04-20T00:55:31Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu Yes, this is more precise. \"wmax: size of cwnd just before cwnd was reduced in the last congestion event when fast convergence is disabled\"",
          "createdAt": "2021-04-20T00:59:46Z",
          "updatedAt": "2021-04-20T00:59:46Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Sangtae! Any suggestions on how to clearly describe wmax when fast convergence is enabled?",
          "createdAt": "2021-04-20T01:10:42Z",
          "updatedAt": "2021-04-20T01:10:42Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "One suggestion,\r\n\r\n```\r\nwmax: size of cwnd just before cwnd was reduced in the last congestion event when fast convergence is disabled.\r\nHowever, if fast convergence is enabled, the size may be further reduced based on the current saturation point.\r\n",
          "createdAt": "2021-04-20T01:57:02Z",
          "updatedAt": "2021-04-20T01:58:14Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, Vidhi!",
          "createdAt": "2021-04-20T02:49:20Z",
          "updatedAt": "2021-04-20T02:49:20Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Just updated. Thanks",
          "createdAt": "2021-04-20T02:53:12Z",
          "updatedAt": "2021-04-20T02:53:12Z"
        }
      ]
    },
    {
      "number": 57,
      "id": "MDU6SXNzdWU4NTgzNjk3NDY=",
      "title": "linux's cubic fix? (better follow cubic curve after idle period)",
      "url": "https://github.com/NTAP/rfc8312bis/issues/57",
      "state": "CLOSED",
      "author": "junhochoi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "help wanted"
      ],
      "body": "http://bitsup.blogspot.com/2015/09/thanks-google-tcp-team-for-open-source.html\r\nhttps://github.com/torvalds/linux/commit/30927520dbae297182990bb21d08762bcc35ce1d\r\n\r\nDoes rfc8312bis need to mention/include about this algorithm?",
      "createdAt": "2021-04-15T00:47:25Z",
      "updatedAt": "2021-04-15T22:03:08Z",
      "closedAt": "2021-04-15T22:03:08Z",
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "This is discussed in [Section 5.8](https://ntap.github.io/rfc8312bis/draft-ietf-tcpm-rfc8312bis.html#name-behavior-for-application-li). Thanks",
          "createdAt": "2021-04-15T22:00:04Z",
          "updatedAt": "2021-04-15T22:00:04Z"
        },
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "Indeed. Thanks!",
          "createdAt": "2021-04-15T22:03:08Z",
          "updatedAt": "2021-04-15T22:03:08Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "MDU6SXNzdWU4Njg5MTc4NTg=",
      "title": "Michael Scharf's review",
      "url": "https://github.com/NTAP/rfc8312bis/issues/59",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "[Michael Scharf wrote:](https://mailarchive.ietf.org/arch/msg/tcpm/3Sm4wYQzf_Azakp36sdQY_3r0oM/)\r\n\r\n>In the current version, the abstract, introduction and some later non-normative sections are by and large copied from RFC 8312. While that is perfectly reasonable for a -bis document, I believe the document could be a bit more explicit regarding the new status as PS, even if this would imply some editorial changes as compared to RFC 8312.\r\n>\r\n>As of today, 8312bis is probably one of the most important and most widely deployed TCP standards. But the text is not necessarily written that way, given its origins.\r\n>\r\n>Here are some examples of what comes into my mind:\r\n>\r\n>1/ Abstract:\r\n>\r\n>\"CUBIC is an extension to the traditional TCP standards. It differs from the traditional TCP standards only in the congestion control algorithm on the sender side.\"\r\n>\r\n>IMHO one could also start here with something much more explicit along the lines of \"CUBIC is a standard TCP congestion control algorithm [...]\".\r\n>\r\n>Personally, I don't like the term \"traditional standards\" in this context. In fact, after 8312bis will be published as PS, CUBIC may actually become part of what one could consider as \"traditional standards\". Maybe it would be better to avoid that term altogether? At least, I believe it could be avoided by rewording the abstract.\r\n>\r\n>2/ Introduction: \r\n>\r\n>The key sentence \"It is therefore to be regarded as the current standard for TCP congestion control\" comes at the end after a lot of text on the historical background.\r\n>\r\n>An alternative would be to start in the introduction with what CUBIC is as according to this document and why CUBIC is relevant. Obviously, the historical context _is_ important and must be explained in the document. But I am less sure whether the history needs to be at the beginning of the introduction. At least newcomers to congestion control may more care about the content of this Proposed Standard and less about research that resulted in RFC 8312.\r\n>\r\n>3/ Section 5.4:\r\n>\r\n>\"CUBIC has been extensively studied by using both NS-2 simulation and testbed experiments, covering a wide range of network environments. More information can be found in [HKLRX06]. Additionally, there is decade-long deployment experience with CUBIC on the Internet.\"\r\n>\r\n>This is another example where the most important message as of 2021 comes somewhere at the end. Given the experience with CUBIC, one could just start with the last sentence \"There is decade-long deployment experience...\" and then state something along the lines of \"The original CUBIC design has been studied extensively by using both NS-2 simulation and testbed experiments...\". Just as a thought.\r\n>\r\n>Probably the existing text in -01 also works in all these cases and this is just about editorial style. But I think we could at least discuss whether some alternative wordings would make sense given the new PS status, in particular for newcomers who may not have read RFC 8312 and don't know its history (and probably never have to once this PS is published).",
      "createdAt": "2021-04-27T14:40:18Z",
      "updatedAt": "2021-05-05T18:22:58Z",
      "closedAt": "2021-05-05T18:22:58Z",
      "comments": []
    },
    {
      "number": 61,
      "id": "MDU6SXNzdWU5MDgwNzY0MjI=",
      "title": "Mention that CUBIC can be used for SCTP, QUIC, etc.?",
      "url": "https://github.com/NTAP/rfc8312bis/issues/61",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "WG LC",
        "editorial"
      ],
      "body": "[Yoshi said](https://mailarchive.ietf.org/arch/msg/tcpm/W-t1q8q6Q0Ofjcp0iXOgmY18mr0):\r\n>1: While this draft focuses on only TCP,  CUBIC can actually be applied to other transport protocols \r\n    such as QUIC, SCTP. Do we want to mention it in the draft or is it out of scope?\r\n",
      "createdAt": "2021-06-01T09:05:03Z",
      "updatedAt": "2021-06-08T06:34:52Z",
      "closedAt": "2021-06-08T06:34:52Z",
      "comments": []
    },
    {
      "number": 62,
      "id": "MDU6SXNzdWU5MDgwNzc4OTM=",
      "title": "Events detected by RACK",
      "url": "https://github.com/NTAP/rfc8312bis/issues/62",
      "state": "OPEN",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "WG LC"
      ],
      "body": "[Yoshi said](https://mailarchive.ietf.org/arch/msg/tcpm/W-t1q8q6Q0Ofjcp0iXOgmY18mr0):\r\n>>2: Section 3.1 \"After a window reduction in response to a congestion event is\r\n     detected by duplicate ACKs or Explicit Congestion Notification-Echo\r\n     (ECN-Echo, ECE) ACKs [RFC3168], CUBIC remembers the congestion window...\"\r\n>\r\n>   I think the events detected by RACK (or PTO for QUIC) can also be included here.\r\n",
      "createdAt": "2021-06-01T09:06:41Z",
      "updatedAt": "2021-06-16T16:14:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "thanks @nsdyoshi. Do you have any specific suggestions in terms of how much should we talk about RACK or should we just add a one-liner?",
          "createdAt": "2021-06-16T07:05:55Z",
          "updatedAt": "2021-06-16T07:05:55Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "one liner works for me, but, I think the following part in Section 4.6 also needs to be updated.\r\n\r\n> When a packet loss is detected by duplicate ACKs or by receiving packets carrying ECE flags, CUBIC updates Wmax and reduces cwnd and ssthresh immediately as described below\r\n",
          "createdAt": "2021-06-16T16:14:12Z",
          "updatedAt": "2021-06-16T16:14:12Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "MDU6SXNzdWU5MDgwODE4MjM=",
      "title": "'Equation' rather than 'Figure'",
      "url": "https://github.com/NTAP/rfc8312bis/issues/63",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "larseggert"
      ],
      "labels": [
        "WG LC",
        "editorial"
      ],
      "body": "[Yoshi said](https://mailarchive.ietf.org/arch/msg/tcpm/W-t1q8q6Q0Ofjcp0iXOgmY18mr0):\r\n>4: Section 4.2  I personally prefer to refer the equations in the draft as 'Equation' rather than 'Figure'  if there's \r\n    no strong reason for it.  \r\n",
      "createdAt": "2021-06-01T09:11:11Z",
      "updatedAt": "2021-06-05T14:27:23Z",
      "closedAt": "2021-06-05T14:27:23Z",
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Whenever some relevant text is followed by an equation, we refer to it as `formula` or `equation`. But if we are referring to an equation in the later text, then we use the term `figure`. This seems consistent with other sections of the draft.\r\n\r\nI do like your advice of changing the figure to equation though. So I will try to change it at all places.",
          "createdAt": "2021-06-03T09:46:29Z",
          "updatedAt": "2021-06-03T09:46:29Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert the text in the raw file uses the below code which shows as Figure 1. Is there an easy way to change this to Equation 1?\r\n> {: #eq1 artwork-align=\"center\" }",
          "createdAt": "2021-06-03T10:22:43Z",
          "updatedAt": "2021-06-03T10:22:43Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> With kramdown-xml2rfc2629, it's unfortunately not possible to change this. We would need to add an RFC Editor Note instructing them to manually make the change. Opened https://github.com/NTAP/rfc8312bis/issues/63\r\n\r\nJust saw your reply on the email. In that case, I believe we just need to add a note. Do you want to do that?",
          "createdAt": "2021-06-03T10:39:41Z",
          "updatedAt": "2021-06-03T10:39:41Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "MDU6SXNzdWU5MDgwODIzNjM=",
      "title": "Two meanings for a_aimd",
      "url": "https://github.com/NTAP/rfc8312bis/issues/64",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "WG LC"
      ],
      "body": "[Yoshi said](https://mailarchive.ietf.org/arch/msg/tcpm/W-t1q8q6Q0Ofjcp0iXOgmY18mr0):\r\n> 5: Section 4.3  It seems to me that there are two meanings for a_aimd in this section. \r\n    One is the additive factor for CUBIC and the other is a generic parameter for AIMD() function. \r\n    This looks a bit confusing to me.\r\n",
      "createdAt": "2021-06-01T09:11:50Z",
      "updatedAt": "2021-06-16T06:38:43Z",
      "closedAt": "2021-06-16T06:38:43Z",
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Both of these mean the same thing. The additive factor for CUBIC is defined such that the result of AVG_AIMD(alpha_aimd, beta_aimd) for both AIMD like congestion controllers and Cubic is same. \r\n\r\nAfter making that comparison, the draft basically describes what alpha_aimd is equivalent to for Cubic and since it is represented using B_cubic on the right hand side, I don't think there is a need to define two different alpha_aimd.\r\n<img width=\"305\" alt=\"Screen Shot 2021-06-03 at 2 39 27 AM\" src=\"https://user-images.githubusercontent.com/10913828/120623819-ed074a00-c414-11eb-92a9-67e910aa8f77.png\">\r\n\r\n\r\n",
          "createdAt": "2021-06-03T09:40:58Z",
          "updatedAt": "2021-06-03T09:40:58Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@nsdyoshi does this address your comment?",
          "createdAt": "2021-06-03T10:52:46Z",
          "updatedAt": "2021-06-03T10:52:46Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry. my view is a bit different.\r\nIn Section 4.1.1, alpha_aimd is defined as a constant, which is around 0.529\r\nOTOH, alpha_aimd in Figure 3 is a variable. You can set arbitrary value to it.\r\n\r\nAt least, this is confusing to me. But, I'm fine to keep it if all other folks don't think in this way.\r\nI would like to hear other people's thought a bit more.\r\n\r\n",
          "createdAt": "2021-06-05T10:39:10Z",
          "updatedAt": "2021-06-05T10:39:10Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@Lars I am not sure if other folks are looking at these issues, what's the best way to get their opinion on this? ",
          "createdAt": "2021-06-08T02:37:11Z",
          "updatedAt": "2021-06-08T02:37:11Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@nsdyoshi Thanks, Yoshi. I can see that it is kind of confusing. Section 4.3 describes an analysis of an AIMD algorithm with parameters alpha and beta to explain why and how CUBIC determines its alpha value. We thought about introducing two more variables (alpha, and beta) explicitly for CUBIC, which seem more confusing (too many variables). ",
          "createdAt": "2021-06-08T02:40:59Z",
          "updatedAt": "2021-06-08T02:40:59Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "> @Lars I am not sure if other folks are looking at these issues, what's the best way to get their opinion on this? \n\nOn the list.",
          "createdAt": "2021-06-08T06:35:17Z",
          "updatedAt": "2021-06-08T06:35:17Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@nsdyoshi  I have sent this on the list. If no response is received, would you be fine with closing this issue as is?",
          "createdAt": "2021-06-10T03:45:08Z",
          "updatedAt": "2021-06-10T03:45:08Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi yes, fine with me. But, I think we might want to set a certain deadline and notify people.",
          "createdAt": "2021-06-10T09:26:53Z",
          "updatedAt": "2021-06-10T09:26:53Z"
        },
        {
          "author": "chromi",
          "authorAssociation": "NONE",
          "body": "I think the explanation would be clearer if the formula for AVG_AIMD was rewritten using **unsuffixed** \u03b1 and \u03b2 parameters, \u03b1(aimd) and \u03b2(aimd) were used exclusively to refer to the Reno parameters, and \u03b1(cubic) and \u03b2(cubic) used to refer exclusively to the CUBIC parameters.\r\n\r\nThe process of calculating \u03b1(cubic) can then be explained as equalising the values of AVG_AIMD(\u03b1(aimd), \u03b2(aimd)) and AVG_AIMD(\u03b1(cubic), \u03b2(cubic)).",
          "createdAt": "2021-06-12T16:44:18Z",
          "updatedAt": "2021-06-12T16:44:18Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I have opened a PR where I use alpha and beta for general equation and further derivation of alpha.\r\nLater I use alpha_cubic to refer to Cubic specifically. Feel free to review and provide comments on the PR.",
          "createdAt": "2021-06-15T08:50:47Z",
          "updatedAt": "2021-06-15T08:50:47Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "MDU6SXNzdWU5MDgwODI4MjM=",
      "title": "Description for P is required",
      "url": "https://github.com/NTAP/rfc8312bis/issues/65",
      "state": "OPEN",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "lisongxu"
      ],
      "labels": [
        "WG LC"
      ],
      "body": "[Yoshi said](https://mailarchive.ietf.org/arch/msg/tcpm/W-t1q8q6Q0Ofjcp0iXOgmY18mr0):\r\n> 6: Section 4.3  The description for P is required for Figure 3.\r\n",
      "createdAt": "2021-06-01T09:12:22Z",
      "updatedAt": "2021-06-08T02:31:35Z",
      "closedAt": null,
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, Yoshi, for catching it. P is the packet loss rate. We will describe it in the specification. Thanks",
          "createdAt": "2021-06-08T02:31:27Z",
          "updatedAt": "2021-06-08T02:31:27Z"
        }
      ]
    },
    {
      "number": 66,
      "id": "MDU6SXNzdWU5MDgwODMzOTI=",
      "title": "Analysis in [FHP00] doesn't include delayed ACK factor",
      "url": "https://github.com/NTAP/rfc8312bis/issues/66",
      "state": "OPEN",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "lisongxu"
      ],
      "labels": [
        "WG LC"
      ],
      "body": "[Yoshi said](https://mailarchive.ietf.org/arch/msg/tcpm/W-t1q8q6Q0Ofjcp0iXOgmY18mr0):\r\n> 7: Section 4.3  I think The analysis in [FHP00] doesn't include delayed ACK factor. So, the AIMD TCP model here \r\n   can be a bit aggressive compared to a TCP that doesn't enable ABC and uses delayed ACK. \r\n  This is fine, but I think it might be good to clarify it.\r\n",
      "createdAt": "2021-06-01T09:13:00Z",
      "updatedAt": "2021-06-08T02:28:09Z",
      "closedAt": null,
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, Yoshi. Yes, we can clarify this in the specification. ",
          "createdAt": "2021-06-08T02:27:55Z",
          "updatedAt": "2021-06-08T02:27:55Z"
        }
      ]
    },
    {
      "number": 67,
      "id": "MDU6SXNzdWU5MDgwODQ3NTY=",
      "title": "segments_acked rather than bytes_acked; cwnd in segments",
      "url": "https://github.com/NTAP/rfc8312bis/issues/67",
      "state": "OPEN",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "WG LC"
      ],
      "body": "[Yoshi said](https://mailarchive.ietf.org/arch/msg/tcpm/W-t1q8q6Q0Ofjcp0iXOgmY18mr0):\r\n>8: Section 4.3  I am not very sure why segments_acked is used rather than byted_acked here. What is the benefit of it?\r\n    How do we calculate when the acks are split? \r\n   Also, I think it should be clarified that cwnd is expressed in segments here in this case.\r\n",
      "createdAt": "2021-06-01T09:14:35Z",
      "updatedAt": "2021-06-22T09:22:33Z",
      "closedAt": null,
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "segments_acked is used throughout the document to match the linux code.\r\n\r\nSection 4.1.2 (https://datatracker.ietf.org/doc/html/draft-ietf-tcpm-rfc8312bis-02#section-4.1.2) defines the units for all variables including `cwnd` which is in segments.\r\n\r\n> How do we calculate when the acks are split?\r\nI am guessing that this problem has already been solved in linux.\r\n",
          "createdAt": "2021-06-03T10:09:34Z",
          "updatedAt": "2021-06-03T10:09:34Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@nsdyoshi does this address your comment?",
          "createdAt": "2021-06-03T10:52:25Z",
          "updatedAt": "2021-06-03T10:52:25Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok. I see the definition in cwnd. I'm sorry, I overlooked.\r\nBut, my main question is why segments_acked is used and byte_acked is not used.  I believe we don't need to follow linux code.\r\nSome implementations may want to use byted_acked. Is it allowed? I think it would be better to provide some guidance here.",
          "createdAt": "2021-06-04T09:15:22Z",
          "updatedAt": "2021-06-04T09:15:22Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, implementations can use bytes_acked. Does the below text suffice:\r\n> The unit of all window sizes in this document is segments of the\r\nmaximum segment size (MSS), and the unit of all times is seconds.",
          "createdAt": "2021-06-05T01:43:20Z",
          "updatedAt": "2021-06-05T01:43:20Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it would be better to mention using bytes_acked is acceptable for implementations explicitly. \r\n\r\nBTW, when a segments_acked implementation sent a 1000 byte packet and only 500 bytes were acked, does it use fractions or use some other methods? \r\nAnother question is if we count sacked segments into this or not.  ",
          "createdAt": "2021-06-06T11:29:47Z",
          "updatedAt": "2021-06-06T11:29:47Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> BTW, when a segments_acked implementation sent a 1000 byte packet and only 500 bytes were acked, does it use fractions or use some other methods?\r\n\r\nIf the size of each segment = 1 MSS, then segments_acked = bytes_acked / 1 MSS.\r\n\r\n> Another question is if we count sacked segments into this or not.\r\n\r\nGood question, is that being done for new Reno or other congestion controllers? I looked at a few RFCs and didn't find any mention of using SACK bytes for congestion window. Do you know if any document has guidance on this?\r\n",
          "createdAt": "2021-06-08T00:22:58Z",
          "updatedAt": "2021-06-08T00:23:07Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "> If the size of each segment = 1 MSS, then segments_acked = bytes_acked / 1 MSS.\r\nI was wondering the case where the size of segment is not 1 MSS or the case where the size of segment is 1 MSS, but the received ACK covers only part of the segment. It seems to me that this point is a bit ambiguous in the draft.\r\n\r\n> Good question, is that being done for new Reno or other congestion controllers?\r\n\r\nRight. It's described in RFC6582 and RFC6675. \r\nI've thought about this and I think the explanation of the draft on this point is sufficient.",
          "createdAt": "2021-06-13T11:15:49Z",
          "updatedAt": "2021-06-13T11:15:49Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I was wondering the case where the size of segment is not 1 MSS or the case where the size of segment is 1 MSS, but the received ACK covers only part of the segment. It seems to me that this point is a bit ambiguous in the draft.\r\n\r\nIf I were to use segments_acked as an implementor, I would just do bytes_acked / 1 MSS, whatever may be the size of the segment sent or ACKed. For example if MSS = 1448 and 1000 byte segment was sent and acked, then segments_acked = 1000/1448 and if 500 bytes were acked, then segments_acked = 500/1448.\r\n\r\nIf OTOH I was using bytes_acked in my implementation, then all one needs to do multiple or divide by 1MSS wherever necessary. ",
          "createdAt": "2021-06-17T08:45:14Z",
          "updatedAt": "2021-06-17T08:45:14Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "OK. In this case, I think it would be better to mention segments_acked is float number and can be less than 1.\r\nAlso, I think it would be good to provide a guidance for an implementation uses bytes_acked instead of segments_acked.\r\nSomething like multiplying segment-based parameters by 1 MSS. ",
          "createdAt": "2021-06-18T08:58:20Z",
          "updatedAt": "2021-06-18T08:58:20Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "ok, please review #77.",
          "createdAt": "2021-06-22T09:22:32Z",
          "updatedAt": "2021-06-22T09:22:32Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "MDU6SXNzdWU5MDgwODU1MjA=",
      "title": "Why a_aimd can be set to 1 ",
      "url": "https://github.com/NTAP/rfc8312bis/issues/68",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "WG LC"
      ],
      "body": "[Yoshi said](https://mailarchive.ietf.org/arch/msg/tcpm/W-t1q8q6Q0Ofjcp0iXOgmY18mr0):\r\n>> 9: Section 4.3  \"Note that once _W_est_ reaches _W_max_, that is, _W_est_ >= _W_max_, ...\"\r\n>\r\n>   I might miss something, but I'm not sure why  a_aimd can be set to 1 to be compatible with AIMD TCP.\r\n   Does this mean b_cubic is also updated? If not, why this can be compatible?",
      "createdAt": "2021-06-01T09:15:30Z",
      "updatedAt": "2021-06-10T15:28:51Z",
      "closedAt": "2021-06-10T15:28:51Z",
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "This is discussed in https://github.com/NTAP/rfc8312bis/issues/2. Note that we have updated the AIMD friendly formula to make it byte based just like New Reno. We have also removed B_cubic. \r\n<img width=\"714\" alt=\"Screen Shot 2021-06-03 at 12 44 50 AM\" src=\"https://user-images.githubusercontent.com/10913828/120607311-ebce2100-c404-11eb-8957-0a04008f6d1f.png\">\r\n",
          "createdAt": "2021-06-03T07:46:25Z",
          "updatedAt": "2021-06-03T07:46:25Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@nsdyoshi does this address your comment?",
          "createdAt": "2021-06-03T08:29:23Z",
          "updatedAt": "2021-06-03T08:29:23Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry.. it's still not clear to me. I'm wondering the following 2 points. \r\n\r\n- It seems to me that W_est has two phases in cwnd increasing. But, I believe this kind of behavior doesn't exist in Reno. I'm not sure why it has to have two phases.\r\n- if setting a_aimd to 1 is compatible with AIMD TCP,  a_aimd = 3 * (1-b_cubic) / (1+b_cubic) is not compatible with AIMD TCP?\r\n",
          "createdAt": "2021-06-04T08:15:36Z",
          "updatedAt": "2021-06-04T08:15:36Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> It seems to me that W_est has two phases in cwnd increasing. But, I believe this kind of behavior doesn't exist in Reno. I'm not sure why it has to have two phases.\r\n\r\nTwo phases because after loss, Cubic reduces its congestion window to 0.7x while New Reno reduces it to 0.5x. To have the same increase curve in AIMD friendly region, for Cubic, Alpha_aimd is < 1\r\n\r\n>if setting a_aimd to 1 is compatible with AIMD TCP, a_aimd = 3 * (1-b_cubic) / (1+b_cubic) is not compatible with AIMD TCP?\r\n\r\nThis is again the same reasoning. Before the cwnd reaches W_max, Cubic needs to be more conservative so alpha_aimd = 0.529 instead of 1. After we have reached the previous cwnd, i.e. W_max, Cubic can have the same alpha_aimd (i.e. 1) as New Reno has.\r\n",
          "createdAt": "2021-06-05T01:47:47Z",
          "updatedAt": "2021-06-05T01:47:57Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm. I'm not sure about it.\r\n\r\nIn my understanding, alpha_aimd = 0.529 is chosen because AMID(1, 0.5) =AIMD(0.529, 0.7). \r\nIf you change it to 1, it will be AIMD(1, 0.7) which is more aggressive than AIMD(1, 0.5)\r\n",
          "createdAt": "2021-06-05T10:39:13Z",
          "updatedAt": "2021-06-05T10:39:13Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "The throughput model of AIMD(alpha, beta) assumes a deterministic loss model where a packet is lost every time when the cwnd reaches w_max. \r\n\r\nThe \"a_aimd can be set to 1\" is proposed to clearly describe the behavior of CUBIC when cwnd > w_max.\r\n",
          "createdAt": "2021-06-08T02:23:30Z",
          "updatedAt": "2021-06-08T02:23:30Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I had explained this in the last IETF meeting. Here is the diagram I used. For low BDPs when we use the AIMD friendly equation, alpha_aimd = 0.529 only has meaning until we reach W_max. After that New Reno and Cubic should behave the same. Otherwise, Cubic will have slower growth than New Reno.\r\n<img width=\"939\" alt=\"Screen Shot 2021-06-07 at 7 31 34 PM\" src=\"https://user-images.githubusercontent.com/10913828/121113499-fd2d7980-c7c6-11eb-89a8-a147557c8128.png\">\r\n",
          "createdAt": "2021-06-08T02:32:35Z",
          "updatedAt": "2021-06-08T02:33:11Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "OK. I understand the concept. Thank you so much. But, It seems to me the sentence looks a bit confusing. \r\nI am thinking about something like the below, but there might be better descriptions for this.\r\n\r\nNote that once _W_est_ reaches _W_max_, that is, _W_est_ >= _W_max_,\r\n \u03b1__aimd_ SHOULD be set to 1 because we don't know what new W_max will be at this point.\r\nThis ensures CUBIC to achieve the same congestion window increment as AIMD TCP.",
          "createdAt": "2021-06-09T09:41:20Z",
          "updatedAt": "2021-06-09T09:41:20Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you, Yoshi, for your suggestion!",
          "createdAt": "2021-06-09T14:19:23Z",
          "updatedAt": "2021-06-09T14:19:23Z"
        }
      ]
    },
    {
      "number": 69,
      "id": "MDU6SXNzdWU5MDgwODYxOTA=",
      "title": "Overridden by linear growth by AIMD",
      "url": "https://github.com/NTAP/rfc8312bis/issues/69",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "WG LC"
      ],
      "body": "[Yoshi said](https://mailarchive.ietf.org/arch/msg/tcpm/W-t1q8q6Q0Ofjcp0iXOgmY18mr0):\r\n>> 10: Section 4.5: \" The convex profile ensure that the window increases very slowly at the beginning..\"\r\n>\r\n>   I am wondering how much this part is accurate. Because of Principal 2,  even though cwnd is increased \r\n   through convex profile, I think it will be overridden by linear growth by AIMD. ",
      "createdAt": "2021-06-01T09:16:17Z",
      "updatedAt": "2021-06-22T07:20:03Z",
      "closedAt": "2021-06-22T07:20:03Z",
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "According to principle 2,\r\n> A congestion control algorithm designed to be friendly to AIMD TCP on\r\n>   a per-flow basis must increase its congestion window less\r\n>  aggressively in small BDP networks than in large BDP networks.\r\n\r\nCUBIC uses AIMD friendly equation for small BDPs, which means that it doesn't use the cubic curve in those scenarios.\r\nAnd AIMD algorithms like New Reno don't scale well in large BDPs.",
          "createdAt": "2021-06-03T10:05:16Z",
          "updatedAt": "2021-06-03T10:05:16Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@nsdyoshi does this address your comment?",
          "createdAt": "2021-06-03T10:52:08Z",
          "updatedAt": "2021-06-03T10:52:08Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Please let me explain a bit more.\r\n\r\nFrom Section 3.2\r\n> Furthermore, in cases when the cubic function of CUBIC would increase\r\n   the congestion window less aggressively than AIMD TCP, CUBIC simply\r\n   follows the window size of AIMD TCP to ensure that CUBIC achieves at\r\n   least the same throughput as AIMD TCP in small-BDP networks. \r\n\r\nFrom Section 4.3\r\n> CUBIC checks whether W_cubic(_t_)\r\n   is less than _W_est_. If so, CUBIC is in the AIMD-friendly region and\r\n   _cwnd_ SHOULD be set to _W_est_ at each reception of an ACK.\r\n\r\nIn my understanding,  w_cubic and w_est behave like this (well, this graph is not very precise as W_est will not be a straight line in the draft)\r\nAround W_max, w_cubic's window growth is small as it uses cubic function, but it will be overridden by W_est if we are following the logic described in the draft. This behavior is fine for me, but I think the description: \"very slowly\" in Section 4.5 is not very accurate because it is the same level as Reno.\r\nPlease point out if I overlook something here.\r\n\r\n![image](https://user-images.githubusercontent.com/73777040/120773757-7cc0fd00-c4d6-11eb-9d62-357562f740cf.png)\r\n",
          "createdAt": "2021-06-04T09:05:04Z",
          "updatedAt": "2021-06-04T09:05:04Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think you are mixing up two different things.\r\n\r\nSection 3.2 is talking about AIMD friendliness in Low BDP networks and that has nothing to do with how convex part of Cubic curve starts with a slow increase. That section is about, in low BDP networks, the max. window size attained by Cubic is generally low and that's why after a loss, AIMD like growth would be higher than cubic curve (even for concave).\r\n\r\nSection 4.5 is talking about, when cubic is NOT in AIMD friendly region, i.e. cwnd > W_est, and cwnd > W_max, then we use the convex curve. This would happen for high BDP networks. Although this convex increase would be greater than New Reno but it would be increasing slowly with respect to the cubic curve around W_max to probe for the new peak bandwidth and in most cases, Cubic will incur a loss soon and exit the convex phase.",
          "createdAt": "2021-06-05T04:52:17Z",
          "updatedAt": "2021-06-05T04:53:37Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm. It seems to me that you are explaining Section 4.5 is talking about the right side of the pink line in the figure. \r\nBut, I'm not very sure about it. Because at this point, cwnd is already over W_max, there is no need to be careful from my point of view. \r\n\r\nIn this case, I think the following sentences in the section is not applicable. It doesn't look carefully or very slowly to me.\r\n\r\n>In this region, CUBIC is very careful.  The convex profile ensures\r\n   that the window increases very slowly at the beginning and gradually\r\n   increases its increase rate.   \r\n\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/73777040/120888219-fc6ccb80-c5ab-11eb-8d34-c7603878f57f.png)\r\n",
          "createdAt": "2021-06-05T10:38:58Z",
          "updatedAt": "2021-06-05T10:38:58Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@nsdyoshi  Thanks, Yoshi! Your figure is kind of misleading in that both the green curve (W_cubic) and orange line (W_est) pass W_max at the same time. In high-speed networks, the orange line increases very slowly and passes W_max much later than the green curve.  I added a new orange line in your figure to illustrate that. \r\n\r\n![120888219-fc6ccb80-c5ab-11eb-8d34-c7603878f57f](https://user-images.githubusercontent.com/10427041/121112213-ba26d280-c7d5-11eb-9bf9-78fafcdfcf11.png)\r\n",
          "createdAt": "2021-06-08T02:18:05Z",
          "updatedAt": "2021-06-08T02:18:05Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Section 4.5 talks about this scenario - in high BDP networks, the AIMD growth is very slow and it take a lot of RTTs to recover to W_max. So, cubic curve - concave then convex is used where convex would increase slowly around W_max. Something like this (plotted using actual values):\r\n\r\n<img width=\"754\" alt=\"Screen Shot 2021-06-07 at 7 26 51 PM\" src=\"https://user-images.githubusercontent.com/10913828/121113123-577a0a80-c7c6-11eb-969e-6e9aa4065427.png\">\r\n\r\n",
          "createdAt": "2021-06-08T02:27:07Z",
          "updatedAt": "2021-06-08T02:29:10Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah, I saw Lisong's comment after I posted. But yes, we are both saying the same thing",
          "createdAt": "2021-06-08T02:28:10Z",
          "updatedAt": "2021-06-08T02:28:10Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, It's true for high BDP network case. But, I was thinking about small BDP network case. It seems to me that Section 4.5 doesn't talk about high BDP cases only. Because, even small BDP network cases will have convex region.\r\n\r\nIn small BDP case, I think w_est grows lot faster and the beginning of concave region will be overridden by it and convex region will start when cwnd becomes  lots bigger than w_max. \r\nIn this situation, I'm not very sure to say \"window increases very slowly at the beginning\" \r\n\r\nI am thinking that the explanation something like this might describe the behavior more accurately.\r\n\r\nUnless it is not overridden by AIMD window increase, CUBIC is very careful in this region.  \r\nThe convex profile aims that the window increases very slowly at the beginning and gradually increases its increase rate. ",
          "createdAt": "2021-06-13T11:15:16Z",
          "updatedAt": "2021-06-13T11:15:16Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@nsdyoshi I was able to plot the graph you initially posted with some sample values (W_max = 100, cwnd_start = 70, RTT = 75ms).\r\n<img width=\"711\" alt=\"Screen Shot 2021-06-17 at 12 51 28 AM\" src=\"https://user-images.githubusercontent.com/10913828/122354787-2e642300-cf06-11eb-988e-02f52c307b1c.png\">\r\n\r\nSection 4.5 starts with \r\n> When receiving an ACK in congestion avoidance, if CUBIC is not in the\r\nAIMD-friendly region and *cwnd* is larger than or equal to\r\n*W<sub>max</sub>*, then CUBIC is in the convex region.\r\n\r\nIMO, this clarifies in the very beginning that this section talks about when we are not in overridden by AIMD. \r\n\r\n",
          "createdAt": "2021-06-17T07:52:47Z",
          "updatedAt": "2021-06-17T08:16:04Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "right. but, when I look at the picture you've shown, the concave region starts at the point where cwnd is way bigger than w_max.\r\nIn this case, I'm not sure if the following description of the concave region is accurate. \r\nI think it would be good if we can provide more explanations here.\r\n\r\n> In this region, CUBIC is very careful.  The convex profile ensures\r\n   that the window increases very slowly at the beginning and gradually\r\n   increases its increase rate. ",
          "createdAt": "2021-06-18T08:14:37Z",
          "updatedAt": "2021-06-18T08:14:37Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, Yoshi.  That \"very slowly\" is about the behavior of cubic in the convex region, which is defined in Section 4.2 \"The concave region, if CUBIC is not in the AIMD-friendly region and cwnd is less than Wmax. The convex region, if CUBIC is not in the AIMD-friendly region and cwnd is greater than Wmax.\" ",
          "createdAt": "2021-06-18T20:19:34Z",
          "updatedAt": "2021-06-18T20:20:12Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm. sorry. I meant convex region.\r\nI quoted the texts from Section 4.5. So, it should describe the behavior of cubic in the convex region. \r\nThe 'very careful' and 'very slowly' describes the behavior of cubic well when BDP is large. (as shown in the first figure Vidhi put) \r\nHowever, I think this description is not very accurate when BDP is small (as shown in the second figure from Vidhi) \r\nThat's why I am thinking it might be good to add some more explanations here.",
          "createdAt": "2021-06-19T10:00:40Z",
          "updatedAt": "2021-06-19T10:00:40Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Both the 'very careful' and 'very slowly' describe the behavior of the convex/concave regions (that is, the behavior of the blue line).  If the green line is above the blue line, then CUBIC does not enter the convex or concave regions. Hope this helps.\r\n",
          "createdAt": "2021-06-19T14:19:46Z",
          "updatedAt": "2021-06-19T14:19:46Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi Lisong, \r\n\r\nIn my thoughts, convex region starts when cwnd >= w_max and it's not in TCP friendly region. So, I thought the starting point of the convex region is the red dot in the following figure.\r\n\r\n![image](https://user-images.githubusercontent.com/73777040/122666467-3ae4b780-d162-11eb-9f5d-48685ecfb58c.png)\r\n\r\nBut, I am guessing you consider the starting point of the convex region is always cwnd = w_max. But, when cwnd_cubic < w_est, CUBIC is not in the region. (Please correct me if I miss something here)\r\n\r\nIn my reading of the draft, I think both interpretations are possible. I believe it would be good if we can eliminate ambiguity here.",
          "createdAt": "2021-06-20T08:15:13Z",
          "updatedAt": "2021-06-20T08:26:33Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> In my thoughts, convex region starts when cwnd >= w_max and it's not in TCP friendly region.\r\n\r\n@nsdyoshi you are right and this is what the draft mentions in Section 4.5\r\n\r\n> So, I thought the starting point of the convex region is the red dot in the following figure. \r\n\r\nCubic is in convex region at this red dot even if the convex profile starts at cwnd = W_max.\r\n\r\nPerhaps you are concerned about the below line and now I fully understand your concern. Although the intro in Section 4.5 says that Cubic starts at red dot, the below line is a bit contradictory as it probably assumes that Cubic will always be in convex region around W_max.\r\n> In this region, CUBIC is very careful. The convex profile ensures that the window increases very slowly at the beginning and gradually increases its increase rate. \r\n\r\nCombining your earlier suggestion with a minor modification, how about this:\r\n> Unless it is not overridden by AIMD window increase, CUBIC is very careful in this region. The convex profile aims that the window increases very slowly at the beginning when the cwnd is around W_max and then gradually increases its increase rate.\r\n",
          "createdAt": "2021-06-20T09:24:31Z",
          "updatedAt": "2021-06-20T09:26:10Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi Yoshi, Finally I see the confusion. Thank you!\r\n\r\nHi Vidhi, \"Unless it is not overridden by AIMD window increase, CUBIC is very careful in this region\" should be \"Unless it is overridden by AIMD window increase, CUBIC is very careful in this region\"? Thank you!\r\n\r\n",
          "createdAt": "2021-06-20T14:25:27Z",
          "updatedAt": "2021-06-20T14:25:27Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi Vidhi,\r\nThanks for the updates. I think we will need to update it as Lisong suggested, but other than that, it works for me.\r\nThanks for pointing out, Lisong!",
          "createdAt": "2021-06-21T05:56:02Z",
          "updatedAt": "2021-06-21T05:56:02Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks. Fixed it in #76 ",
          "createdAt": "2021-06-21T21:48:57Z",
          "updatedAt": "2021-06-21T21:48:57Z"
        }
      ]
    },
    {
      "number": 70,
      "id": "MDU6SXNzdWU5MDgwODY4MTI=",
      "title": "Keeping w_max and reducing only cwnd",
      "url": "https://github.com/NTAP/rfc8312bis/issues/70",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "WG LC"
      ],
      "body": "[Yoshi said](https://mailarchive.ietf.org/arch/msg/tcpm/W-t1q8q6Q0Ofjcp0iXOgmY18mr0):\r\n>>11: Section 4.7: \"we update w_max as follows, before the window reduction as described in section 4.6\"\r\n>\r\n>   I am wondering if reducing w_max is the right approach here. Because if we reduce w_max, CUBIC\r\n   can exit from convex region earlier than the case where fast convergence is not used. \r\n   It seems to me that keeping w_max and reducing only cwnd (using smaller value than b_cubic) \r\n   look more conservative. ",
      "createdAt": "2021-06-01T09:17:01Z",
      "updatedAt": "2021-06-07T08:20:18Z",
      "closedAt": "2021-06-07T08:20:17Z",
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> [Yoshi said](https://mailarchive.ietf.org/arch/msg/tcpm/W-t1q8q6Q0Ofjcp0iXOgmY18mr0):\r\n> \r\n> > > 11: Section 4.7: \"we update w_max as follows, before the window reduction as described in section 4.6\"\r\n> > \r\n> > \r\n> > I am wondering if reducing w_max is the right approach here. Because if we reduce w_max, CUBIC\r\n> > can exit from convex region earlier than the case where fast convergence is not used.\r\n> > It seems to me that keeping w_max and reducing only cwnd (using smaller value than b_cubic)\r\n> > look more conservative.\r\n\r\nDid you mean that it will exit the concave region earlier, and yes that's the intention. The point is to increase the time for this flow to increase its congestion window in order to release bandwidth to any potential new flows. In the below figure, the S curve is due to fast convergence by reducing W_max and you can see that it takes longer to grow congestion window that way as the flow will switch to convex side faster.\r\n![Cubic_curve](https://user-images.githubusercontent.com/10913828/120626158-3f496a80-c417-11eb-83be-60922e78a32c.png)\r\n\r\n\r\n",
          "createdAt": "2021-06-03T09:57:29Z",
          "updatedAt": "2021-06-03T09:57:29Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@nsdyoshi does this address your comment?",
          "createdAt": "2021-06-03T10:51:54Z",
          "updatedAt": "2021-06-03T10:51:54Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I did some comparisons for this. The green line is the w_cubic without fast convergence. The blue line is the w_cubic with fast convergence proposed in the draft. The red line is the one I proposed.\r\n\r\nAs you can see, the blue line is more conservative when cwnd is closed to w_max while it's a little bit more aggressive than w_cubic without fast convergence when cwnd is very high. \r\nMy proposed method is not very conservative when cwnd is closed to w_max while it's a bit conservative when cwnd is very high. \r\n\r\nI think the behavior of current fast convergence algorithm is much better than what I proposed. \r\nAlthough It becomes a bit aggressive when cwnd is very high, I personally think this point is not very important.\r\n\r\n![image](https://user-images.githubusercontent.com/73777040/120921805-5936b780-c67a-11eb-8362-5a97d15304c3.png)\r\n",
          "createdAt": "2021-06-06T11:29:34Z",
          "updatedAt": "2021-06-06T11:29:34Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@nsdyoshi ok, so can this issue be closed with no action?",
          "createdAt": "2021-06-07T06:37:36Z",
          "updatedAt": "2021-06-07T06:37:36Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I'm fine with it.",
          "createdAt": "2021-06-07T07:42:29Z",
          "updatedAt": "2021-06-07T07:42:29Z"
        }
      ]
    },
    {
      "number": 71,
      "id": "MDU6SXNzdWU5MDgwODczOTc=",
      "title": "Results are based on the algorithms",
      "url": "https://github.com/NTAP/rfc8312bis/issues/71",
      "state": "OPEN",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "lisongxu"
      ],
      "labels": [
        "WG LC"
      ],
      "body": "[Yoshi said](https://mailarchive.ietf.org/arch/msg/tcpm/W-t1q8q6Q0Ofjcp0iXOgmY18mr0):\r\n>12: Section 5.2 and Section 5.3. Do these results are based on the algorithms and the parameter values \r\n   described in the draft?  If there're differences, I think it should be described. \r\n",
      "createdAt": "2021-06-01T09:17:41Z",
      "updatedAt": "2021-06-22T13:14:29Z",
      "closedAt": null,
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@nsdyoshi Thanks, Yoshi. I guess you refer to the tables in Sections 5.1 and 5.2. Yes they are calculated for the algorithm and parameters described in the draft, and the source code to generate these tables is available on the github. ",
          "createdAt": "2021-06-08T02:02:30Z",
          "updatedAt": "2021-06-08T02:02:30Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@nsdyoshi is there any action item here?",
          "createdAt": "2021-06-22T02:52:17Z",
          "updatedAt": "2021-06-22T02:52:17Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh. sorry. I forgot to reply this one. If there's no difference, it's fine for me. \r\nIn my understanding, the CUBIC in the original paper uses b_cubic=0.8. So, I thought if the values in the tables were created when the paper was written, the values might not be very accurate.\r\n",
          "createdAt": "2021-06-22T08:31:25Z",
          "updatedAt": "2021-06-22T08:32:00Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "We should probably say that these values are for the current version of CUBIC.",
          "createdAt": "2021-06-22T10:13:33Z",
          "updatedAt": "2021-06-22T10:13:33Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, the tables have been updated, and source code to generate the tables is available on github. Thanks",
          "createdAt": "2021-06-22T13:14:29Z",
          "updatedAt": "2021-06-22T13:14:29Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 3,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIwOTcwNTQ1",
      "title": "redefine the K equation",
      "url": "https://github.com/NTAP/rfc8312bis/pull/3",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I have tried to address https://github.com/NTAP/rfc8312bis/issues/1. I have kept the Eq. 2 as is and added justification for further simplification / generalization to address the fast convergence issue with Eq. 2.\r\n\r\nI apologize in advance if I created this PR too soon (I thought this is a major issue as most Cubic implementation perform Fast Convergence).\r\n\r\nCloses #1 and https://github.com/NTAP/rfc8312bis/issues/14",
      "createdAt": "2020-11-14T06:55:10Z",
      "updatedAt": "2020-11-24T09:04:13Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "14c3ad8e5141acf1d65b1e1e00f5070ac52807a2",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "updated-K",
      "headRefOid": "3093d02b3c5d23f0117440ed674f50fdd8343b78",
      "closedAt": "2020-11-24T09:04:13Z",
      "mergedAt": "2020-11-24T09:04:12Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "dd9e54a8a6b7a222188e13e33b86567d30b786b8"
      },
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu @sangtaeha could you please review?\r\n(Is there a way I can add reviewers?)",
          "createdAt": "2020-11-18T06:14:57Z",
          "updatedAt": "2020-11-18T06:14:57Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi Sorry for the confusion. I didn't mean to remove the left parenthesis. (W_max - cwnd)/C needs to be inside the cubic root. So it should be\r\n\r\n~~~\r\nK = cubic_root((W_max - cwnd) / C)\r\n~~",
          "createdAt": "2020-11-18T11:39:16Z",
          "updatedAt": "2020-11-18T11:39:16Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> @goelvidhi Sorry for the confusion. I didn't mean to remove the left parenthesis. (W_max - cwnd)/C needs to be inside the cubic root. So it should be\r\n> \r\n> ```\r\n> K = cubic_root((W_max - cwnd) / C)\r\n> ~~\r\n> ```\r\n\r\nMy bad. Fixed it",
          "createdAt": "2020-11-18T23:36:50Z",
          "updatedAt": "2020-11-18T23:36:50Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@goelvidhi should be able to add reviewers in the sidebar on the right (top item). Let me know if you don't see the option, might be a permissions things.",
          "createdAt": "2020-11-19T05:18:32Z",
          "updatedAt": "2020-11-19T05:18:32Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Please also add a bullet about this PR to the changelog in the appendix.\r\n\r\ndone\r\n\r\n@lisongxu @larseggert @sangtaeha I have added the modifications recommended on the issue so far. Could you please review?",
          "createdAt": "2020-11-20T04:15:03Z",
          "updatedAt": "2020-11-20T04:15:03Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu @sangtaeha could you please review? Thank you.",
          "createdAt": "2020-11-20T08:25:59Z",
          "updatedAt": "2020-11-20T08:25:59Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@vidhigoel-apple Please change the upper bound from 2*cwnd to 1.5*cwnd to be consistent with Linux and be more conservative (safer).  Thank you!",
          "createdAt": "2020-11-20T18:23:15Z",
          "updatedAt": "2020-11-20T18:23:15Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Added the changes for the review comments so far. Please review.",
          "createdAt": "2020-11-21T00:41:48Z",
          "updatedAt": "2020-11-21T00:41:48Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu could you please review this change?",
          "createdAt": "2020-11-21T07:50:37Z",
          "updatedAt": "2020-11-21T07:50:37Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert could you merge this?",
          "createdAt": "2020-11-24T07:56:35Z",
          "updatedAt": "2020-11-24T07:56:35Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMjEzOTMy",
          "commit": {
            "abbreviatedOid": "06d1ff7"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-11-16T10:56:32Z",
          "updatedAt": "2020-11-16T10:58:27Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Please add an anchor for this section and use it in this reference, instead of hardcoding the value. (Check how `mult-dec` is used in the current text for an example.)",
              "createdAt": "2020-11-16T10:56:32Z",
              "updatedAt": "2020-11-21T00:37:28Z"
            },
            {
              "originalPosition": 11,
              "body": "I think it would be clearer if Eq. 2 were modified to include a conditional, rather than defining a separate equation for this case. That way, we also wouldn't need to renumber all the following equations.",
              "createdAt": "2020-11-16T10:57:57Z",
              "updatedAt": "2020-11-21T00:37:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTc4NjYz",
          "commit": {
            "abbreviatedOid": "2283884"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-17T02:34:46Z",
          "updatedAt": "2020-11-17T02:34:47Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Removed this reference in the new text.",
              "createdAt": "2020-11-17T02:34:46Z",
              "updatedAt": "2020-11-21T00:37:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTc4ODM1",
          "commit": {
            "abbreviatedOid": "2283884"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-17T02:35:14Z",
          "updatedAt": "2020-11-17T02:35:15Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Done. Added the conditional based on the issue discussion with @lisongxu ",
              "createdAt": "2020-11-17T02:35:14Z",
              "updatedAt": "2020-11-21T00:37:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTk5OTcw",
          "commit": {
            "abbreviatedOid": "ca6426d"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Left parenthesis is missing. K = cubic_root((W_max - cwnd) / C)\r\nI am okay without origin_point since it is much easier to understand. But Lisong may have his opinion. Other than that it is good to go. ",
          "createdAt": "2020-11-18T08:23:52Z",
          "updatedAt": "2020-11-18T08:23:52Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzE4NTM4",
          "commit": {
            "abbreviatedOid": "6bfb51f"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-18T10:46:40Z",
          "updatedAt": "2020-11-18T10:46:41Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MDg4OTk5",
          "commit": {
            "abbreviatedOid": "bd3a378"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "Please also add a bullet about this PR to the changelog in the appendix.",
          "createdAt": "2020-11-19T05:19:42Z",
          "updatedAt": "2020-11-19T05:19:42Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MTA5OTg3",
          "commit": {
            "abbreviatedOid": "c770536"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-11-20T05:14:12Z",
          "updatedAt": "2020-11-20T05:14:51Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "issue number missing",
              "createdAt": "2020-11-20T05:14:12Z",
              "updatedAt": "2020-11-21T00:37:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MTMyMDIz",
          "commit": {
            "abbreviatedOid": "aed3ae5"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-20T05:51:21Z",
          "updatedAt": "2020-11-20T05:51:22Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "fixed",
              "createdAt": "2020-11-20T05:51:21Z",
              "updatedAt": "2020-11-21T00:37:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MTMyMzUy",
          "commit": {
            "abbreviatedOid": "aed3ae5"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-20T05:52:22Z",
          "updatedAt": "2020-11-20T05:52:23Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Please point to the issue(s) and not the PR number",
              "createdAt": "2020-11-20T05:52:23Z",
              "updatedAt": "2020-11-21T00:37:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MTQ5NDY4",
          "commit": {
            "abbreviatedOid": "aed3ae5"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-20T06:41:52Z",
          "updatedAt": "2020-11-20T06:41:52Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "oh... I thought the previous update logs were pointing to PR #. Do you want me to fix them all?",
              "createdAt": "2020-11-20T06:41:52Z",
              "updatedAt": "2020-11-21T00:37:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MTU0Njk2",
          "commit": {
            "abbreviatedOid": "aed3ae5"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-20T06:54:07Z",
          "updatedAt": "2020-11-20T06:54:08Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yes, please. (I thought I had checked that they were pointing at issues, but maybe I was wrong.)",
              "createdAt": "2020-11-20T06:54:07Z",
              "updatedAt": "2020-11-21T00:37:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MTY1MDQz",
          "commit": {
            "abbreviatedOid": "be5adb4"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-20T07:16:29Z",
          "updatedAt": "2020-11-20T07:16:29Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "done",
              "createdAt": "2020-11-20T07:16:29Z",
              "updatedAt": "2020-11-21T00:37:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MTY3MDEw",
          "commit": {
            "abbreviatedOid": "be5adb4"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-20T07:21:00Z",
          "updatedAt": "2020-11-20T07:21:00Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MzAyNjA0",
          "commit": {
            "abbreviatedOid": "be5adb4"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "@goelvidhi This looks good. We may also add some explanation for why we have low and upper bounds for the target? The following sentence or slightly modified one could be added to the end of the sentence in Line #389.\r\n\"The lower and upper bounds ensure that CUBIC's window increase rate is non-decreasing but is less than the rate of slow start.\"",
          "createdAt": "2020-11-20T10:23:50Z",
          "updatedAt": "2020-11-20T10:28:53Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODc4NDI2",
          "commit": {
            "abbreviatedOid": "3093d02"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Great. Thanks.",
          "createdAt": "2020-11-21T03:15:42Z",
          "updatedAt": "2020-11-21T03:15:42Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1OTcxNjUz",
          "commit": {
            "abbreviatedOid": "3093d02"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you, Vidhi!",
          "createdAt": "2020-11-21T14:56:57Z",
          "updatedAt": "2020-11-21T14:56:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 8,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIxNzMyMjA0",
      "title": "Enable markdownlint",
      "url": "https://github.com/NTAP/rfc8312bis/pull/8",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-16T15:19:23Z",
      "updatedAt": "2020-11-17T06:41:04Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "89d9cda9fd5cb9ded734d4b380a5e933b00f0607",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "markdownlint",
      "headRefOid": "95749a2d7c1370115b6581b115916176c4c148d9",
      "closedAt": "2020-11-17T06:41:00Z",
      "mergedAt": "2020-11-17T06:41:00Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "5eb2a1fff23bb0d7dd28b32308fd8bbc6811e303"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 9,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIyMTAwMDQy",
      "title": "cwnd reduction on congestion event",
      "url": "https://github.com/NTAP/rfc8312bis/pull/9",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This change ensures that cwnd can now be less than 2. Resolves https://github.com/NTAP/rfc8312bis/issues/7",
      "createdAt": "2020-11-17T02:45:47Z",
      "updatedAt": "2020-11-17T15:28:20Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "89d9cda9fd5cb9ded734d4b380a5e933b00f0607",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "min-cwnd",
      "headRefOid": "f148f98b5f712ead13caf67d2fd3e4adc7692801",
      "closedAt": "2020-11-17T15:28:19Z",
      "mergedAt": "2020-11-17T15:28:19Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "d3b35ad56a2e66dd10316f5e762a522454793064"
      },
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu @sangtaeha could you please review these changes?",
          "createdAt": "2020-11-17T07:31:01Z",
          "updatedAt": "2020-11-17T07:31:01Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMDYxNDI0",
          "commit": {
            "abbreviatedOid": "f148f98"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-17T06:48:55Z",
          "updatedAt": "2020-11-17T06:48:55Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTAxNTM2",
          "commit": {
            "abbreviatedOid": "f148f98"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-17T08:01:10Z",
          "updatedAt": "2020-11-17T08:01:10Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNDc2Njkw",
          "commit": {
            "abbreviatedOid": "f148f98"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-17T15:20:55Z",
          "updatedAt": "2020-11-17T15:20:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 12,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIyMjU1NjA3",
      "title": "List of variables and constants",
      "url": "https://github.com/NTAP/rfc8312bis/pull/12",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I have tried to add a new section for definition of variables and constants with their respective units. I removed some of the redundant definitions. Resolves https://github.com/NTAP/rfc8312bis/issues/5 and https://github.com/NTAP/rfc8312bis/issues/6",
      "createdAt": "2020-11-17T09:10:30Z",
      "updatedAt": "2020-11-19T17:02:45Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "b8110cabbcf450aeff1a50e7aadc142aabba3ea2",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "variables-definition",
      "headRefOid": "8166dfce62ce53832af8d13c83cf82970fe0698d",
      "closedAt": "2020-11-19T17:02:45Z",
      "mergedAt": "2020-11-19T17:02:45Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "a0d86c209eeb1fe9597beeca7f89b7d66cf41b98"
      },
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert @sangtaeha @lisongxu could you please review the changes in this PR?\r\nAs the changes here will conflict with https://github.com/NTAP/rfc8312bis/pull/3, I prefer to get this one merged before I start updating #3. Thanks.",
          "createdAt": "2020-11-19T03:25:35Z",
          "updatedAt": "2020-11-19T03:25:35Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> In addition to what I highlighted inline, please also add a bullet about this PR to the changelog in the appendix.\r\n\r\ndone.\r\nWaiting for @sangtaeha's review. :-)",
          "createdAt": "2020-11-19T06:43:32Z",
          "updatedAt": "2020-11-19T08:22:08Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTYzMjE3",
          "commit": {
            "abbreviatedOid": "8b65755"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-11-17T09:19:28Z",
          "updatedAt": "2020-11-17T09:24:01Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Cite the RFC instead of saying \"Standard TCP\", which doesn't really exist?",
              "createdAt": "2020-11-17T09:19:28Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            },
            {
              "originalPosition": 30,
              "body": "```suggestion\r\n: Current congestion window in segments.\r\n```",
              "createdAt": "2020-11-17T09:20:11Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            },
            {
              "originalPosition": 35,
              "body": "Should this definition use `cwnd`?",
              "createdAt": "2020-11-17T09:22:49Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            },
            {
              "originalPosition": 48,
              "body": "```suggestion\r\n  window if the TCP-NewReno congestion controller was used.\r\n```",
              "createdAt": "2020-11-17T09:23:41Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTY4NDQy",
          "commit": {
            "abbreviatedOid": "cfecaf9"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-17T09:25:10Z",
          "updatedAt": "2020-11-17T09:25:10Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "sure",
              "createdAt": "2020-11-17T09:25:10Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTUzOTYw",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T07:09:48Z",
          "updatedAt": "2020-11-18T07:09:49Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Should this be smoothed RTT? I can cite 793 if we agree to call it smoothed RTT",
              "createdAt": "2020-11-18T07:09:49Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTU2OTk4",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T07:15:51Z",
          "updatedAt": "2020-11-18T07:15:52Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Shouldn't it be RFC6298? And I think it should be SRTT.\r\n\r\nCC'ing @lisongxu @sangtaeha for their input.",
              "createdAt": "2020-11-18T07:15:51Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTczMDM1",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T07:46:06Z",
          "updatedAt": "2020-11-18T07:46:06Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Yes, you are right that we should cite RFC6298. Waiting for other reviewers' input before I make this change.",
              "createdAt": "2020-11-18T07:46:06Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzE2NDc2",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T10:44:14Z",
          "updatedAt": "2020-11-18T10:44:15Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This should probably be a subsection?",
              "createdAt": "2020-11-18T10:44:14Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTM2Njgw",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T22:32:54Z",
          "updatedAt": "2020-11-18T22:32:55Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "ok, will do a subsection under CUBIC Congestion Control",
              "createdAt": "2020-11-18T22:32:54Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTUzNDA4",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T23:04:32Z",
          "updatedAt": "2020-11-18T23:04:32Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "done. How can I convert the text document to the html version to see how the sections look?",
              "createdAt": "2020-11-18T23:04:32Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTYwODc3",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T23:20:59Z",
          "updatedAt": "2020-11-18T23:21:00Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "For some reason, the PR is not getting updated with my new commits to goelvidhi/rfc8312bis. The repo shows the changes but the PR doesn't. What am I doing wrong?",
              "createdAt": "2020-11-18T23:20:59Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTgzNTU2",
          "commit": {
            "abbreviatedOid": "75ba076"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-19T00:13:31Z",
          "updatedAt": "2020-11-19T00:13:32Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Ah, it got updated after some time.",
              "createdAt": "2020-11-19T00:13:32Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MDYzODc3",
          "commit": {
            "abbreviatedOid": "f03b088"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-19T03:55:11Z",
          "updatedAt": "2020-11-19T03:55:11Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MDg3ODM2",
          "commit": {
            "abbreviatedOid": "f03b088"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "In addition to what I highlighted inline, please also add a bullet about this PR to the changelog in the appendix.",
          "createdAt": "2020-11-19T05:16:08Z",
          "updatedAt": "2020-11-19T05:16:49Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I don't think we need this third-layer subsection heading, since it is the only one in this section.",
              "createdAt": "2020-11-19T05:16:08Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MDk3NDMy",
          "commit": {
            "abbreviatedOid": "f03b088"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-19T05:44:53Z",
          "updatedAt": "2020-11-19T05:44:53Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "There are actually two:\r\n1. Constants\r\n2. Variables\r\n\r\nDo we want to combine them?",
              "createdAt": "2020-11-19T05:44:53Z",
              "updatedAt": "2020-11-19T05:59:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MTE4ODEz",
          "commit": {
            "abbreviatedOid": "8166dfc"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-19T06:39:18Z",
          "updatedAt": "2020-11-19T06:39:18Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "No, I must have misread the diff. Nevermind :-)",
              "createdAt": "2020-11-19T06:39:18Z",
              "updatedAt": "2020-11-19T06:39:18Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MTE4OTM1",
          "commit": {
            "abbreviatedOid": "8166dfc"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-19T06:39:36Z",
          "updatedAt": "2020-11-19T06:39:36Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NjQ1MTQ3",
          "commit": {
            "abbreviatedOid": "8166dfc"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "The changes look good to me. Thanks!",
          "createdAt": "2020-11-19T16:47:59Z",
          "updatedAt": "2020-11-19T16:47:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 13,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIyNDU4OTcy",
      "title": "Add the C code for generating (some of) Tables 1 and 2",
      "url": "https://github.com/NTAP/rfc8312bis/pull/13",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-17T14:37:56Z",
      "updatedAt": "2020-11-18T08:08:40Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "ff650b32509149e25c7ce7073e3da927ff1f4733",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "add-table-code",
      "headRefOid": "1d77a514726eac0ab9941223d6239f7a82a0ea01",
      "closedAt": "2020-11-18T08:08:36Z",
      "mergedAt": "2020-11-18T08:08:36Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "de7c07989519e3e09988eead849207eeeab05352"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTc1MTg4",
          "commit": {
            "abbreviatedOid": "99743a2"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-18T07:49:56Z",
          "updatedAt": "2020-11-18T07:49:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 18,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIyOTkzOTk2",
      "title": "Ack co-authors of RFC8312. Fixes #15.",
      "url": "https://github.com/NTAP/rfc8312bis/pull/18",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-18T07:58:02Z",
      "updatedAt": "2020-11-18T08:08:03Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "9b8225c99d12f77e53130470fd1184afa72d0d93",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "ack-prev-authors",
      "headRefOid": "921b72d8727067a6a0640de56ba0754c1f472b67",
      "closedAt": "2020-11-18T08:07:59Z",
      "mergedAt": "2020-11-18T08:07:58Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "6d9d83f0548a0d8941355841cfcd26e2ba9b55b1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 19,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIzMDAyMzM2",
      "title": "Add changelog relative to -00",
      "url": "https://github.com/NTAP/rfc8312bis/pull/19",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-18T08:13:20Z",
      "updatedAt": "2020-11-19T05:13:37Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "de7c07989519e3e09988eead849207eeeab05352",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "changes-from-00",
      "headRefOid": "8aa3dd2607f511122027f5ae15fddb3446d4f01c",
      "closedAt": "2020-11-19T05:13:34Z",
      "mergedAt": "2020-11-19T05:13:34Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "b8110cabbcf450aeff1a50e7aadc142aabba3ea2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTM1NzM3",
          "commit": {
            "abbreviatedOid": "8aa3dd2"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-18T22:31:24Z",
          "updatedAt": "2020-11-18T22:31:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 22,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI0MTA0ODAx",
      "title": "Fix markdown and capitalization/punctuation inconsistencies",
      "url": "https://github.com/NTAP/rfc8312bis/pull/22",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "that were  introduced in #12",
      "createdAt": "2020-11-19T17:10:20Z",
      "updatedAt": "2020-11-19T17:12:57Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "a0d86c209eeb1fe9597beeca7f89b7d66cf41b98",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "fix-definitions-markdown",
      "headRefOid": "e4676c08c0d4023525017524f03956074a5e1f64",
      "closedAt": "2020-11-19T17:12:54Z",
      "mergedAt": "2020-11-19T17:12:54Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "14c3ad8e5141acf1d65b1e1e00f5070ac52807a2"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 24,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI1MDk1NTIy",
      "title": "AIMD approach for tcp friendly window",
      "url": "https://github.com/NTAP/rfc8312bis/pull/24",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #20 .\r\n\r\nWill add the change log once the pending PR #3 is merged to avoid conflict.",
      "createdAt": "2020-11-21T07:53:04Z",
      "updatedAt": "2020-11-24T12:02:50Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "dd9e54a8a6b7a222188e13e33b86567d30b786b8",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "tf-aimd-reno",
      "headRefOid": "4582313b21db8aa0170a06b2ac2a59b02f5afa3a",
      "closedAt": "2020-11-24T12:02:50Z",
      "mergedAt": "2020-11-24T12:02:50Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "88cdfd0025ba575102ec1e102c36f79c78cb7b3f"
      },
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert could you please review this PR?",
          "createdAt": "2020-11-24T07:57:01Z",
          "updatedAt": "2020-11-24T07:57:01Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "FYI, I am technically on vacation this week, so I may be slow to respond.",
          "createdAt": "2020-11-24T09:03:39Z",
          "updatedAt": "2020-11-24T09:03:39Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Also add a line to the changelog, please.\r\n\r\nDone.",
          "createdAt": "2020-11-24T09:38:19Z",
          "updatedAt": "2020-11-24T09:38:19Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1OTcxOTMw",
          "commit": {
            "abbreviatedOid": "ce7d709"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you, Vidhi!",
          "createdAt": "2020-11-21T15:01:18Z",
          "updatedAt": "2020-11-21T15:01:18Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1OTg4MjY0",
          "commit": {
            "abbreviatedOid": "ce7d709"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks good. Thanks!",
          "createdAt": "2020-11-21T18:57:18Z",
          "updatedAt": "2020-11-21T18:57:18Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MjczMTk0",
          "commit": {
            "abbreviatedOid": "ce7d709"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "Also add a line to the changelog, please.",
          "createdAt": "2020-11-24T09:03:02Z",
          "updatedAt": "2020-11-24T09:03:18Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "We're no using `+=` or similar anywhere in the formulas yet. So maybe use `W_est = W_est + ...` for consistency?",
              "createdAt": "2020-11-24T09:03:02Z",
              "updatedAt": "2020-11-24T09:27:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MzA0NDgy",
          "commit": {
            "abbreviatedOid": "4582313"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-24T09:37:46Z",
          "updatedAt": "2020-11-24T09:37:46Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "sounds good. Done.",
              "createdAt": "2020-11-24T09:37:46Z",
              "updatedAt": "2020-11-24T09:37:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 25,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI3MzEzMDMw",
      "title": "Trying for Standards Track publication",
      "url": "https://github.com/NTAP/rfc8312bis/pull/25",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-25T09:41:20Z",
      "updatedAt": "2020-12-02T16:43:36Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "88cdfd0025ba575102ec1e102c36f79c78cb7b3f",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "go-std-track",
      "headRefOid": "d0b16107c8d13e7bca68e3d7329c5c4655d99306",
      "closedAt": "2020-11-25T09:41:42Z",
      "mergedAt": "2020-11-25T09:41:42Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "da5782958c9db7819610e25cadc6aef39a65d680"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 26,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI3Nzk1NDA4",
      "title": "set alpha_aimd to 1 when W_est is bigger than W_max",
      "url": "https://github.com/NTAP/rfc8312bis/pull/26",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I have update Eq. 3 to use alpha_aimd variable which is defined in the preceding paragraph as alpha_aimd=3*(1-beta_cubic)/(1+beta_cubic). Please let me know if alpha_aimd needs to be added to the Definitions sub section.\r\n\r\nCloses #2.",
      "createdAt": "2020-11-26T03:15:17Z",
      "updatedAt": "2020-12-01T07:17:58Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "da5782958c9db7819610e25cadc6aef39a65d680",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "tf-cwnd-after-Wmax",
      "headRefOid": "613965255127176d0dfe09bc822e04158e2a8aef",
      "closedAt": "2020-12-01T07:17:58Z",
      "mergedAt": "2020-12-01T07:17:58Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "244f3b9f9545e8d939d0e0354d3660b912fc9420"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMzQzNzkw",
          "commit": {
            "abbreviatedOid": "6139652"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you, Vidhi!",
          "createdAt": "2020-11-28T05:16:37Z",
          "updatedAt": "2020-11-28T05:16:37Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMzUxNzE1",
          "commit": {
            "abbreviatedOid": "6139652"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-28T08:24:58Z",
          "updatedAt": "2020-11-28T08:25:10Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Would it make sense to make alpha_aimd a function of W_est then?",
              "createdAt": "2020-11-28T08:24:58Z",
              "updatedAt": "2020-11-28T08:25:33Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNDQ1MjU3",
          "commit": {
            "abbreviatedOid": "6139652"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-29T03:59:26Z",
          "updatedAt": "2020-11-29T03:59:27Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "W_est uses alpha_aimd where alpha_aimd itself is a property/constant which is either 3 (1-beta) (1+beta) or 1 depending upon the current value of W_est - so, it is not a really a function of W_est but more like a component in the W_est formula which changes conditionally.",
              "createdAt": "2020-11-29T03:59:26Z",
              "updatedAt": "2020-11-29T03:59:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNDY3ODA1",
          "commit": {
            "abbreviatedOid": "6139652"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2020-12-01T03:44:00Z",
          "updatedAt": "2020-12-01T03:44:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 27,
      "id": "MDExOlB1bGxSZXF1ZXN0NTMwMTA2MTA4",
      "title": "add Vidhi as co-author",
      "url": "https://github.com/NTAP/rfc8312bis/pull/27",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #17.\r\n\r\nAs this is my first time to co-author an IETF document, please let me know if I missed something.",
      "createdAt": "2020-12-01T08:06:19Z",
      "updatedAt": "2020-12-02T16:24:58Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "244f3b9f9545e8d939d0e0354d3660b912fc9420",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "add-vidhi",
      "headRefOid": "292745b9e128a7ddef2295a4bee454c9d465a03f",
      "closedAt": "2020-12-02T16:24:58Z",
      "mergedAt": "2020-12-02T16:24:58Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "9b8f58e1ca4fc6b2cdaca4fecfdc688292dbbffb"
      },
      "comments": [
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Add yourself before me? Since I'm just doing editing, the folks who contribute content should come first. LGTM otherwise.",
          "createdAt": "2020-12-01T13:54:22Z",
          "updatedAt": "2020-12-01T13:54:22Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Add yourself before me? Since I'm just doing editing, the folks who contribute content should come first. LGTM otherwise.\r\n\r\nok, done.",
          "createdAt": "2020-12-01T19:28:31Z",
          "updatedAt": "2020-12-01T19:28:31Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I am unable to understand why the markdown check failed. I only moved the text around. @larseggert, any ideas?",
          "createdAt": "2020-12-02T00:31:54Z",
          "updatedAt": "2020-12-02T00:31:54Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxOTE0MTEx",
          "commit": {
            "abbreviatedOid": "71cd4a2"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, Vidhi!",
          "createdAt": "2020-12-01T13:54:00Z",
          "updatedAt": "2020-12-01T13:54:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 29,
      "id": "MDExOlB1bGxSZXF1ZXN0NTMxNjQ1ODc2",
      "title": "add note about fast recovery during cwnd decrease due to congestion",
      "url": "https://github.com/NTAP/rfc8312bis/pull/29",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed on #11, I added a note about fast recovery.\r\nPlease let me know if we need to add more details. IMO, we should avoid mentioning any specific fast recovery mechanism.\r\n\r\nCloses #11 ",
      "createdAt": "2020-12-03T09:45:10Z",
      "updatedAt": "2020-12-04T08:41:15Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "9b8f58e1ca4fc6b2cdaca4fecfdc688292dbbffb",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "fast-recovery-mention",
      "headRefOid": "52a1f1f143a076f094ae0a637a1ca4490aac0fd5",
      "closedAt": "2020-12-04T08:41:15Z",
      "mergedAt": "2020-12-04T08:41:15Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "f2d72f728d1aff90f9f862b178bc1e5e6d94e36f"
      },
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert could you please review this PR? Thank you.",
          "createdAt": "2020-12-04T06:50:26Z",
          "updatedAt": "2020-12-04T06:50:55Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MDE3NjE1",
          "commit": {
            "abbreviatedOid": "69be5f5"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, Vidhi!\r\n",
          "createdAt": "2020-12-03T14:37:48Z",
          "updatedAt": "2020-12-03T14:37:48Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MjM5MTU2",
          "commit": {
            "abbreviatedOid": "69be5f5"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2020-12-03T18:08:11Z",
          "updatedAt": "2020-12-03T18:08:11Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzQ0MDI3",
          "commit": {
            "abbreviatedOid": "69be5f5"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-12-04T08:26:34Z",
          "updatedAt": "2020-12-04T08:27:17Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\ncongestion is detected by receiving packets marked with ECN-Echo (ECE), CUBIC updates its W_max\r\n```",
              "createdAt": "2020-12-04T08:26:34Z",
              "updatedAt": "2020-12-04T08:36:23Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\npacket loss and congestion detection through ECN, the sender MAY\r\n```",
              "createdAt": "2020-12-04T08:27:06Z",
              "updatedAt": "2020-12-04T08:36:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzUzMDg5",
          "commit": {
            "abbreviatedOid": "52a1f1f"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-04T08:40:59Z",
          "updatedAt": "2020-12-04T08:40:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "MDExOlB1bGxSZXF1ZXN0NTMyMzQ1OTkw",
      "title": "highlight the difference from the original paper and RFC8312",
      "url": "https://github.com/NTAP/rfc8312bis/pull/30",
      "state": "MERGED",
      "author": "sangtaeha",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This includes the list of changes since the original paper. The section headings are similar to the issue logs at the end, so we may clean up at the end. Also, I didn't really install any tool to check this change (markdown and others). So please let me if this doesn't work. This fixes #10.",
      "createdAt": "2020-12-04T07:21:51Z",
      "updatedAt": "2020-12-16T08:41:21Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "b39d20a11aa9d4081e03acb50cbd0505da62c18c",
      "headRepository": "sangtaeha/rfc8312bis",
      "headRefName": "highlight-differences",
      "headRefOid": "2a5296d686b23d05f8049398dff519ebe638189e",
      "closedAt": "2020-12-16T08:41:21Z",
      "mergedAt": "2020-12-16T08:41:21Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "77c7776cff150c2122a01f787903143b993fa21a"
      },
      "comments": [
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi @larseggert It complains about the space (it seems I didn't remove the space when I split the sentence) and the reference to Lisong's paper. Can you fix this issue? If not, I will submit a new pull request.",
          "createdAt": "2020-12-04T07:33:42Z",
          "updatedAt": "2020-12-04T07:33:42Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I am fixing the spaces. Will push soon.",
          "createdAt": "2020-12-04T07:50:15Z",
          "updatedAt": "2020-12-04T07:50:15Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, @goelvidhi!\r\n ",
          "createdAt": "2020-12-04T07:51:24Z",
          "updatedAt": "2020-12-04T07:51:24Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I won't be able to push from your repo. Please find below the patch for spaces and tabs which you can apply using `git apply spaces.patch`\r\n[spaces.patch.zip](https://github.com/NTAP/rfc8312bis/files/5641291/spaces.patch.zip)\r\n",
          "createdAt": "2020-12-04T08:04:33Z",
          "updatedAt": "2020-12-04T08:04:33Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi Great! Let me fix it with your patch.",
          "createdAt": "2020-12-04T08:08:28Z",
          "updatedAt": "2020-12-04T08:08:28Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I am not sure why the editor's copy check is failing. @larseggert can likely help here.",
          "createdAt": "2020-12-04T08:19:35Z",
          "updatedAt": "2020-12-04T08:19:35Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi Lisong's paper through DOI doesn't work. I think I may manually add that paper there like other papers.",
          "createdAt": "2020-12-04T08:21:22Z",
          "updatedAt": "2020-12-04T08:21:22Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "I'll fix the issue, hang on",
          "createdAt": "2020-12-04T11:32:48Z",
          "updatedAt": "2020-12-04T11:32:48Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert I installed the tools and found that adding a new reference caused a build error. I exactly followed the format but somehow it complained about the new reference. At this time, I simply removed this new reference. I will experiment until I know how to add a new reference.",
          "createdAt": "2020-12-04T11:33:56Z",
          "updatedAt": "2020-12-04T11:33:56Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "The problem was subtle. For \"automatic references\" to RFCs and I-Ds, one uses `{{?foo}}` to indicate an informative reference to \"foo\", and `{{!bar}}` for a normative reference to \"bar\". And the `?` or `!` needs to be used consistently, otherwise the reference is included twice, causing an error.\r\n\r\nOther references need to be included under `normative:` or `informative:`blocks at the beginning of the document. For those, one need not include `?` or `!` in the reference at all (because the status is known already), but if one includes `?` or `!` in the reference, it again needs to be done consistently.",
          "createdAt": "2020-12-04T11:37:57Z",
          "updatedAt": "2020-12-04T11:37:57Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert Great. Thanks!",
          "createdAt": "2020-12-04T11:38:37Z",
          "updatedAt": "2020-12-04T11:38:37Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Would this be ready for a merge after the conflicts are resolved?",
          "createdAt": "2020-12-16T07:00:40Z",
          "updatedAt": "2020-12-16T07:00:40Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert Yes, more likely. I rearranged them based on the feedback from you and @goelvidhi. After the merge, we can decide. The listed differences are more descriptive than the changelog, so we may either extend or shorten them.",
          "createdAt": "2020-12-16T07:20:58Z",
          "updatedAt": "2020-12-16T07:20:58Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "OK. I will merge once you resolve the conflicts to the `main` branch.",
          "createdAt": "2020-12-16T07:31:03Z",
          "updatedAt": "2020-12-16T07:31:03Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert I fixed it. Thanks!",
          "createdAt": "2020-12-16T08:13:26Z",
          "updatedAt": "2020-12-16T08:13:26Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzQwNDk3",
          "commit": {
            "abbreviatedOid": "5e4302b"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-12-04T08:20:56Z",
          "updatedAt": "2020-12-04T08:24:37Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Please use title capitalization (also in your other headings)",
              "createdAt": "2020-12-04T08:20:56Z",
              "updatedAt": "2020-12-16T08:06:38Z"
            },
            {
              "originalPosition": 4,
              "body": "This DOI doesn't seem to be correct (or exist?)",
              "createdAt": "2020-12-04T08:21:35Z",
              "updatedAt": "2020-12-16T08:06:38Z"
            },
            {
              "originalPosition": 15,
              "body": "Reference the \"initial relase\"?",
              "createdAt": "2020-12-04T08:22:01Z",
              "updatedAt": "2020-12-16T08:06:38Z"
            },
            {
              "originalPosition": 33,
              "body": "This seems redundant with the bullet lists in the next appendix. Maybe we add a placeholder here for now, and convert the bullet list into a section when we're done with the draft?",
              "createdAt": "2020-12-04T08:23:34Z",
              "updatedAt": "2020-12-16T08:06:38Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\npaper was the window decrease constant while {{!RFC8312}} changed it to CUBIC\r\n```",
              "createdAt": "2020-12-04T08:24:06Z",
              "updatedAt": "2020-12-16T08:06:38Z"
            },
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n- TCP friendly window is called W_est in {{!RFC8312}}, whereas it was W_tcp in\r\n```",
              "createdAt": "2020-12-04T08:24:23Z",
              "updatedAt": "2020-12-16T08:06:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzQ3NzU3",
          "commit": {
            "abbreviatedOid": "5e4302b"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-04T08:32:23Z",
          "updatedAt": "2020-12-04T08:32:24Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "It looks like that is ACM's internal number. Let me manually add it. Thanks!",
              "createdAt": "2020-12-04T08:32:24Z",
              "updatedAt": "2020-12-16T08:06:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzQ4ODY4",
          "commit": {
            "abbreviatedOid": "5e4302b"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-04T08:34:17Z",
          "updatedAt": "2020-12-04T08:34:17Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Yes, that makes sense. ",
              "createdAt": "2020-12-04T08:34:17Z",
              "updatedAt": "2020-12-16T08:06:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0ODExMzA4",
          "commit": {
            "abbreviatedOid": "bc75127"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-04T09:57:16Z",
          "updatedAt": "2020-12-04T09:57:16Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0ODEyOTk5",
          "commit": {
            "abbreviatedOid": "bc75127"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "You need to wrap your lines and fix the other issues the checker found before this can be merged",
          "createdAt": "2020-12-04T09:59:18Z",
          "updatedAt": "2020-12-04T09:59:18Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0ODg1NTkz",
          "commit": {
            "abbreviatedOid": "0a22765"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-04T11:41:23Z",
          "updatedAt": "2020-12-04T11:41:24Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Could you add that placeholder?",
              "createdAt": "2020-12-04T11:41:24Z",
              "updatedAt": "2020-12-16T08:06:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MDI0MjM0",
          "commit": {
            "abbreviatedOid": "0a22765"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, Sangtae!",
          "createdAt": "2020-12-04T14:49:48Z",
          "updatedAt": "2020-12-04T14:49:48Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MzY2MDc3",
          "commit": {
            "abbreviatedOid": "0a22765"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-04T23:41:58Z",
          "updatedAt": "2020-12-04T23:41:58Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDM5OTMz",
          "commit": {
            "abbreviatedOid": "0a22765"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-07T11:01:10Z",
          "updatedAt": "2020-12-07T11:01:10Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "I think we should merge these two sections into the bullet lists below. Upon publication we can decide to convert the bullet lists to prose or remove them.",
              "createdAt": "2020-12-07T11:01:10Z",
              "updatedAt": "2020-12-16T08:06:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDE4OTIy",
          "commit": {
            "abbreviatedOid": "458ee40"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-16T07:31:34Z",
          "updatedAt": "2020-12-16T07:31:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 31,
      "id": "MDExOlB1bGxSZXF1ZXN0NTMzNjA0NDU0",
      "title": "Convert tables to Markdown",
      "url": "https://github.com/NTAP/rfc8312bis/pull/31",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-12-07T11:36:46Z",
      "updatedAt": "2020-12-08T06:51:29Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "f2d72f728d1aff90f9f862b178bc1e5e6d94e36f",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "markdown-tables",
      "headRefOid": "168dc09a5f4bd51725cd9c2d59434df5e44d43c3",
      "closedAt": "2020-12-08T06:51:25Z",
      "mergedAt": "2020-12-08T06:51:25Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "285c653468720250a84913bbbfef85aeab2c02ee"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MTgzOTM2",
          "commit": {
            "abbreviatedOid": "168dc09"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, Lars!",
          "createdAt": "2020-12-07T14:11:29Z",
          "updatedAt": "2020-12-07T14:11:29Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NjY4Njk5",
          "commit": {
            "abbreviatedOid": "168dc09"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-08T01:11:15Z",
          "updatedAt": "2020-12-08T01:11:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 32,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM0MzQxNDU5",
      "title": "add section for spurious loss events",
      "url": "https://github.com/NTAP/rfc8312bis/pull/32",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I attempted to write a section on spurious loss events and I am sure it needs more work.\r\nSending this PR to gather feedback and suggestions on the text.\r\n\r\nCloses #23 ",
      "createdAt": "2020-12-08T10:16:17Z",
      "updatedAt": "2020-12-14T07:12:07Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "bd1fcac0aba1b3960aaf3cb1cbc24b06d280a6bf",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "spurious-retransmit",
      "headRefOid": "7f2f0a30be0cccec12dbe7ac6dcaaf4b061e319f",
      "closedAt": "2020-12-14T07:12:07Z",
      "mergedAt": "2020-12-14T07:12:06Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "bacd8983f5dff7c20284e7fb5299c970b980bf05"
      },
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert @lisongxu @sangtaeha, could you please give it a look when you have time :-). Thanks.",
          "createdAt": "2020-12-09T09:30:28Z",
          "updatedAt": "2020-12-09T09:30:28Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi Hi Vidhi, how about adding the following paragraphs to your section?\r\n\r\n_When there is a loss event, save the current values of the following variables before the window reduction_\r\n\r\n```\r\n    prior_cwnd = cwnd\r\n    prior_W_max = W_max\r\n    prior_K = K\r\n    prior_epoch_start = epoch_start\r\n```\r\n\r\n_Once a spurious loss event is detected, restore their original values as follows_\r\n\r\n```\r\n   cwnd = max(cwnd, prior_cwnd)\r\n   W_max = prior_W_max\r\n   K = prior_K\r\n   epoch_start = prior_epoch_start\r\n```",
          "createdAt": "2020-12-10T16:34:11Z",
          "updatedAt": "2020-12-10T16:38:24Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Also revising the first sentence right after Equation 1 in Section \"Window Increase Function\" as follow.\r\n\r\n_where t is the elapsed time in seconds from the beginning of the current congestion avoidance stage (i.e., t = current time - epoch_start, where epoch_start is the beginning time of the current congestion avoidance stage)._",
          "createdAt": "2020-12-10T16:38:08Z",
          "updatedAt": "2020-12-10T16:38:08Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu should we also add W_est to the state that needs to be restored?",
          "createdAt": "2020-12-11T05:43:30Z",
          "updatedAt": "2020-12-11T05:43:30Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "> @lisongxu should we also add W_est to the state that needs to be restored?\r\n\r\nYes, you are right. Thanks, Vidhi!",
          "createdAt": "2020-12-11T14:11:42Z",
          "updatedAt": "2020-12-11T14:11:42Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MjUyOTcz",
          "commit": {
            "abbreviatedOid": "6662b7a"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thank you, Vidhi! I would suggest two changes. \r\n\r\nFirst, add some references to the methods to detect spurious loss events.  @mwelzl listed some good references.\r\n\r\nSecond, explicitly list the variables to save when there is a loss event, and explicitly describe how to restore their values when a spurious loss event is detected. I can help you with this part. \r\n\r\nThank you again!",
          "createdAt": "2020-12-09T14:43:09Z",
          "updatedAt": "2020-12-09T14:43:09Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5ODQzNDM5",
          "commit": {
            "abbreviatedOid": "5ddf8b2"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-11T07:00:50Z",
          "updatedAt": "2020-12-11T07:02:19Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "IIRC Eifel comes with an IPR declaration that makes it problematic for many implementations. I'd cite it as OPTIONAL, with an informative reference.",
              "createdAt": "2020-12-11T07:00:50Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            },
            {
              "originalPosition": 58,
              "body": "Should we recommend one of these over the other (i.e., with a SHOULD)?",
              "createdAt": "2020-12-11T07:01:24Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            },
            {
              "originalPosition": 63,
              "body": "Why is this a `max` when the others are not?",
              "createdAt": "2020-12-11T07:02:03Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5ODQ4ODcy",
          "commit": {
            "abbreviatedOid": "5ddf8b2"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-11T07:13:32Z",
          "updatedAt": "2020-12-11T07:13:32Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I used MAY as an implementation could completely do something else (for example, QUIC doesn't require any of these).\r\nBut I don't have enough experience to decide what would be better. Please let me know if SHOULD would be ok in case an implementation decides to do something completely different?",
              "createdAt": "2020-12-11T07:13:32Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5ODY4NzM3",
          "commit": {
            "abbreviatedOid": "5ddf8b2"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-11T07:53:24Z",
          "updatedAt": "2020-12-11T07:53:24Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I'd at least reorder them so Eifel is last, and whatever we prefer is first. And make all the references informative (`?` instead of `!`).",
              "createdAt": "2020-12-11T07:53:24Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTE2Mzcz",
          "commit": {
            "abbreviatedOid": "5ddf8b2"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-11T09:07:19Z",
          "updatedAt": "2020-12-11T09:07:20Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "@lisongxu had suggested this; I think it is to make sure if the congestion window had increased more than the prior_cwnd before the spurious retransmit is detected, we take the higher value.\r\nWould like to know what @lisongxu thinks about this.",
              "createdAt": "2020-12-11T09:07:19Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTE2ODAw",
          "commit": {
            "abbreviatedOid": "5ddf8b2"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-11T09:07:53Z",
          "updatedAt": "2020-12-11T09:07:53Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "How do I cite something as OPTIONAL?\r\n",
              "createdAt": "2020-12-11T09:07:53Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTE3MjYy",
          "commit": {
            "abbreviatedOid": "5ddf8b2"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-11T09:08:31Z",
          "updatedAt": "2020-12-11T09:08:32Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "We should explain this, since this doesn't do what the text says (which is \"restore the original values\").",
              "createdAt": "2020-12-11T09:08:32Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTM3NTcx",
          "commit": {
            "abbreviatedOid": "ef89b34"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-11T09:35:46Z",
          "updatedAt": "2020-12-11T09:35:46Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "I rearranged the references and updated them to be informative.",
              "createdAt": "2020-12-11T09:35:46Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTQwMjg2",
          "commit": {
            "abbreviatedOid": "ef89b34"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-11T09:39:14Z",
          "updatedAt": "2020-12-11T09:39:15Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "You cite it informatively and say that it MAY be used, as you currently are doing.\r\n\r\n",
              "createdAt": "2020-12-11T09:39:15Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTQxMzcz",
          "commit": {
            "abbreviatedOid": "ef89b34"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-11T09:40:37Z",
          "updatedAt": "2020-12-11T09:40:38Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Do we mean that CUBIC MUST choose one of the three, and any of the three MAY be chosen? Or do we mean that CUBIC MAY choose one of the three but also something else?",
              "createdAt": "2020-12-11T09:40:37Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTY0OTA3",
          "commit": {
            "abbreviatedOid": "ef89b34"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-11T10:11:57Z",
          "updatedAt": "2020-12-11T10:11:57Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "It's the last one - `Or do we mean that CUBIC MAY choose one of the three but also something else?`\r\n\r\nShould I phrase it differently?\r\n\r\n",
              "createdAt": "2020-12-11T10:11:57Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTY1MjM0",
          "commit": {
            "abbreviatedOid": "ef89b34"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-11T10:12:24Z",
          "updatedAt": "2020-12-11T10:12:25Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "will wait for @lisongxu comment on this.",
              "createdAt": "2020-12-11T10:12:24Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTgxNDc1",
          "commit": {
            "abbreviatedOid": "ef89b34"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-11T10:35:01Z",
          "updatedAt": "2020-12-11T10:35:02Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "```suggestion\r\nCUBIC MAY implement an algorithm to detect spurious retransmissions,\r\nsuch as DSACK {{?RFC3708}}, Forward RTO-Recovery {{?RFC5682}}\r\nor Eifel {{?RFC3522}}. Once a spurious loss event is detected, CUBIC should\r\n```",
              "createdAt": "2020-12-11T10:35:02Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMTI4NTYy",
          "commit": {
            "abbreviatedOid": "ef89b34"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-11T14:09:41Z",
          "updatedAt": "2020-12-11T14:09:41Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "At an undo, the current cwnd may or may not be lower than the saved prior_cwnd. If the current cwnd is already higher than the saved prior_cwnd, we do not need to undo. \r\n\r\nHow about?\r\n\r\n_When there is a loss event, A CUBIC implementation SHOULD save the current\r\nvalue of the following variables before the congestion window reduction._\r\n\r\n~~~\r\n    prior_cwnd = cwnd\r\n    prior_ssthresh = ssthresh\r\n    prior_W_max = W_max\r\n    prior_K = K\r\n    prior_epoch_start = epoch_start\r\n    prior_W_est = W_est\r\n~~~\r\n\r\n_..................  Once a spurious loss event is detected, CUBIC should restore the original values of the above mentioned variables as follows if the current cwnd is lower than prior_cwnd._\r\n\r\n~~~\r\n    if (cwnd < prior_cwnd) {\r\n        cwnd = prior_cwnd\r\n        ssthresh = prior_ssthresh\r\n        W_max = prior_W_max\r\n        K = prior_K\r\n        epoch_start = prior_epoch_start\r\n        W_est = prior_W_est\r\n    }\r\n~~~\r\n\r\n",
              "createdAt": "2020-12-11T14:09:41Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjg0MjEy",
          "commit": {
            "abbreviatedOid": "ef89b34"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-12T03:12:10Z",
          "updatedAt": "2020-12-12T03:12:10Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Ah.. I am not sure about not reverting the state when `cwnd > prior_cwnd`, esp. the variables W_max, epoch_start and K as these dictate the CUBIC curve. For example, W_max for the spurious loss event will be lower than prior_W_max and hence CUBIC will enter Convex phase earlier.\r\nSpurious loss detection should not usually take more than a couple of RTTs and I think the safest thing to do here is to revert all state to previous state, i.e.\r\n```\r\n        cwnd = prior_cwnd\r\n        ssthresh = prior_ssthresh\r\n        W_max = prior_W_max\r\n        K = prior_K\r\n        epoch_start = prior_epoch_start\r\n        W_est = prior_W_est",
              "createdAt": "2020-12-12T03:12:10Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjg0NDk2",
          "commit": {
            "abbreviatedOid": "a84bfea"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-12T03:16:27Z",
          "updatedAt": "2020-12-12T03:16:27Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "done",
              "createdAt": "2020-12-12T03:16:27Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjg1NTEy",
          "commit": {
            "abbreviatedOid": "ee15997"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-12T03:30:56Z",
          "updatedAt": "2020-12-12T03:30:57Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Since the goal of the undo is to improve the performance of Cubic, it is reasonable to keep the current cwnd if it is already higher than prior_cwnd. This is why I like to restore cwnd only if cwnd<prior_cwnd. By the way, this is how current Linux TCP does.\r\n\r\nBut I am not sure whether we should restore other variables. Both are fine with me. Thanks.",
              "createdAt": "2020-12-12T03:30:57Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjk3MTI2",
          "commit": {
            "abbreviatedOid": "d46af26"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-12T06:56:04Z",
          "updatedAt": "2020-12-12T06:56:04Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "ok, I added a special note for congestion window. Please take a look.",
              "createdAt": "2020-12-12T06:56:04Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwODQxMzAx",
          "commit": {
            "abbreviatedOid": "d46af26"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-12T16:06:20Z",
          "updatedAt": "2020-12-12T16:06:21Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Hi Vidhi, I thought about it last night, and now I prefer the if-then method as explained below. \r\n\r\nThere are two possible scenarios for undo. \r\n\r\nFirst (usual cases), an undo happens soon after a spurious loss event, and the current cwnd at undo is still lower than prior_cwnd. In these cases, it makes sense to restore the previous values of all the variables (better performance and safe). \r\n\r\nSecond (unusual cases), an undo happens long after a spurious loss event, and as a result, the current cwnd at undo is already higher than prior_cwnd. In these cases, it makes sense to keep the current values of all the variables, because their prior values were measured and calculated too long ago and thus may not be good or accurate measurements of the current network condition (bandwidth, delay, ...)\r\n\r\nTherefore, the undo code is\r\n~~~\r\n    if (cwnd < prior_cwnd) {\r\n        cwnd = prior_cwnd\r\n        ssthresh = prior_ssthresh\r\n        W_max = prior_W_max\r\n        K = prior_K\r\n        epoch_start = prior_epoch_start\r\n        W_est = prior_W_est\r\n    }\r\n~~~\r\n\r\nHow do you think?\r\n\r\nThanks!",
              "createdAt": "2020-12-12T16:06:20Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwODU5NDA3",
          "commit": {
            "abbreviatedOid": "d46af26"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-12T20:21:56Z",
          "updatedAt": "2020-12-12T20:21:57Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Sounds good. Will update the PR.",
              "createdAt": "2020-12-12T20:21:56Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDA1NzAy",
          "commit": {
            "abbreviatedOid": "b62432c"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-14T02:29:12Z",
          "updatedAt": "2020-12-14T02:29:12Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Updated the PR. @lisongxu does this look ok?",
              "createdAt": "2020-12-14T02:29:12Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDIzNTM4",
          "commit": {
            "abbreviatedOid": "b62432c"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-14T03:37:34Z",
          "updatedAt": "2020-12-14T03:37:35Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Thanks, Vidhi! How about replacing \"In rare cases, when the detection happens long after a spurious loss event, \" with \"In rare cases, when the detection happens long after a spurious loss event and the current cwnd is already higher than the prior_cwnd,\"?\r\n\r\nThanks!",
              "createdAt": "2020-12-14T03:37:34Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDM1MjU1",
          "commit": {
            "abbreviatedOid": "75f2ddc"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-14T04:25:52Z",
          "updatedAt": "2020-12-14T04:25:52Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "sounds good. Updated it. Please review, thanks.",
              "createdAt": "2020-12-14T04:25:52Z",
              "updatedAt": "2020-12-14T07:11:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDM1ODAy",
          "commit": {
            "abbreviatedOid": "75f2ddc"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you, Vidhi!",
          "createdAt": "2020-12-14T04:27:58Z",
          "updatedAt": "2020-12-14T04:27:58Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDQ4OTQ1",
          "commit": {
            "abbreviatedOid": "75f2ddc"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great. Thanks, @goelvidhi and @lisongxu.",
          "createdAt": "2020-12-14T05:16:50Z",
          "updatedAt": "2020-12-14T05:16:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 33,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM0NDQzMzk2",
      "title": "Link to the closed issues",
      "url": "https://github.com/NTAP/rfc8312bis/pull/33",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-12-08T13:15:23Z",
      "updatedAt": "2020-12-09T14:46:32Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "285c653468720250a84913bbbfef85aeab2c02ee",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "link-to-issues",
      "headRefOid": "2b5ac12ec2321a7cc6dd2f450ca9821074402e50",
      "closedAt": "2020-12-08T17:04:32Z",
      "mergedAt": "2020-12-08T17:04:32Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "caaa2bc9bb6e50886724a7dcfcf9ebf55a61f2d4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDI3OTg1",
          "commit": {
            "abbreviatedOid": "2b5ac12"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "The list with the links looks great! Thanks, @larseggert!",
          "createdAt": "2020-12-08T16:51:50Z",
          "updatedAt": "2020-12-08T16:51:50Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MjU2NTcz",
          "commit": {
            "abbreviatedOid": "2b5ac12"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks, Lars!",
          "createdAt": "2020-12-09T14:46:32Z",
          "updatedAt": "2020-12-09T14:46:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 34,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM0NDQ1MTYz",
      "title": "Pretty Latex math",
      "url": "https://github.com/NTAP/rfc8312bis/pull/34",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This uses the experimental `math` support in [kramdown-rfc2629](https://github.com/cabo/kramdown-rfc2629) to render Latex-style equations via [tex2svg](https://github.com/mathjax/mathjax-node-cli) and [asciitex](https://github.com/larseggert/asciiTeX).\r\n\r\nI'm still working through some issues with the toolchain, so this isn't ready for merging yet, but I wanted to give you a preview.",
      "createdAt": "2020-12-08T13:18:18Z",
      "updatedAt": "2020-12-16T07:30:04Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "bacd8983f5dff7c20284e7fb5299c970b980bf05",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "pretty-math",
      "headRefOid": "c3902ba60735a10ef8e26cc2660fac1e0fcb2949",
      "closedAt": "2020-12-16T07:30:00Z",
      "mergedAt": "2020-12-16T07:30:00Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "b39d20a11aa9d4081e03acb50cbd0505da62c18c"
      },
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks nice. There is some markup text showing up in Definitions section, but I am sure you already know about it. :-)",
          "createdAt": "2020-12-09T07:11:38Z",
          "updatedAt": "2020-12-09T07:11:38Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@goelvidhi yes, that is part of the toolchain issue. The text version is also missing some of the math, which is another.",
          "createdAt": "2020-12-09T09:33:15Z",
          "updatedAt": "2020-12-09T09:33:15Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "This is ready for review!",
          "createdAt": "2020-12-15T09:40:12Z",
          "updatedAt": "2020-12-15T09:40:12Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMjg0MjA1",
          "commit": {
            "abbreviatedOid": "24d64a0"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-15T09:59:31Z",
          "updatedAt": "2020-12-15T10:06:22Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "segment/second^3 is showing up in the next line. Is that expected?",
              "createdAt": "2020-12-15T09:59:31Z",
              "updatedAt": "2020-12-16T07:25:10Z"
            },
            {
              "originalPosition": 124,
              "body": "This shows up as Figure 1 instead of Eq. 1. Is it because of the pretty math?\r\n",
              "createdAt": "2020-12-15T10:01:08Z",
              "updatedAt": "2020-12-16T07:25:10Z"
            },
            {
              "originalPosition": 287,
              "body": "this is also going into next line, which is likely due to the pretty math. But as it is in the middle of a sentence, it looks a bit odd.",
              "createdAt": "2020-12-15T10:04:05Z",
              "updatedAt": "2020-12-16T07:25:10Z"
            },
            {
              "originalPosition": 311,
              "body": "same comment here.",
              "createdAt": "2020-12-15T10:04:30Z",
              "updatedAt": "2020-12-16T07:25:10Z"
            },
            {
              "originalPosition": 378,
              "body": "this looks great. ",
              "createdAt": "2020-12-15T10:05:41Z",
              "updatedAt": "2020-12-16T07:25:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNDM2MzA3",
          "commit": {
            "abbreviatedOid": "24d64a0"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-15T13:15:11Z",
          "updatedAt": "2020-12-15T13:15:12Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Yes. The `xml2rfc` tool can't handle inline math.",
              "createdAt": "2020-12-15T13:15:12Z",
              "updatedAt": "2020-12-16T07:25:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNDM2NjE2",
          "commit": {
            "abbreviatedOid": "24d64a0"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-15T13:15:35Z",
          "updatedAt": "2020-12-15T13:15:35Z",
          "comments": [
            {
              "originalPosition": 124,
              "body": "It's because of the `xml2rfc` tool again. It calls everything a \"figure\".",
              "createdAt": "2020-12-15T13:15:35Z",
              "updatedAt": "2020-12-16T07:25:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNDM2Nzk3",
          "commit": {
            "abbreviatedOid": "24d64a0"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-15T13:15:47Z",
          "updatedAt": "2020-12-15T13:15:47Z",
          "comments": [
            {
              "originalPosition": 287,
              "body": "See above.",
              "createdAt": "2020-12-15T13:15:47Z",
              "updatedAt": "2020-12-16T07:25:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNDM2ODg1",
          "commit": {
            "abbreviatedOid": "24d64a0"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-12-15T13:15:54Z",
          "updatedAt": "2020-12-15T13:15:54Z",
          "comments": [
            {
              "originalPosition": 311,
              "body": "See above.",
              "createdAt": "2020-12-15T13:15:54Z",
              "updatedAt": "2020-12-16T07:25:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzMzU4OTQ3",
          "commit": {
            "abbreviatedOid": "24d64a0"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-16T05:04:06Z",
          "updatedAt": "2020-12-16T05:04:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 35,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM2MDU2MDA3",
      "title": "Initialization",
      "url": "https://github.com/NTAP/rfc8312bis/pull/35",
      "state": "MERGED",
      "author": "lisongxu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Removing variable w_last_max and keeping only w_max, for two reasons.\r\n\r\n1) w_last_max is not explicitly initialized in section 4.7 (timeout).\r\n\r\n2) simplify RFC and avoid confusion. ",
      "createdAt": "2020-12-10T16:21:19Z",
      "updatedAt": "2020-12-14T07:10:00Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "caaa2bc9bb6e50886724a7dcfcf9ebf55a61f2d4",
      "headRepository": "lisongxu/rfc8312bis",
      "headRefName": "Initialization",
      "headRefOid": "cbac491e9b424f056a54c85ab09ab8b383755d42",
      "closedAt": "2020-12-14T07:10:00Z",
      "mergedAt": "2020-12-14T07:10:00Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "bd1fcac0aba1b3960aaf3cb1cbc24b06d280a6bf"
      },
      "comments": [
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "There are three nits that need to be fixed: https://github.com/NTAP/rfc8312bis/pull/35/checks?check_run_id=1531869631",
          "createdAt": "2020-12-10T17:07:07Z",
          "updatedAt": "2020-12-10T17:07:07Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, @larseggert . Just fixed",
          "createdAt": "2020-12-10T18:52:48Z",
          "updatedAt": "2020-12-10T18:52:48Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks great. Thanks @lisongxu.\r\nCan we add the change log for this? ",
          "createdAt": "2020-12-11T03:08:16Z",
          "updatedAt": "2020-12-11T04:05:22Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "> Looks great. Thanks @lisongxu.\r\n> Can we add the change log for this?\r\n\r\nYes, I will add that. \r\n\r\nAlso we should initialize W_est in case of timeout (similar to undo). ",
          "createdAt": "2020-12-11T14:16:16Z",
          "updatedAt": "2020-12-11T14:16:16Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@sangtaeha Hi Sangtae,  could you please read and review the changes? Thanks",
          "createdAt": "2020-12-14T04:30:13Z",
          "updatedAt": "2020-12-14T04:30:13Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NTA1NTg0",
          "commit": {
            "abbreviatedOid": "759b9ff"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-10T18:53:53Z",
          "updatedAt": "2020-12-10T18:53:53Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjgyMzg2",
          "commit": {
            "abbreviatedOid": "cbac491"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-12T02:47:26Z",
          "updatedAt": "2020-12-12T02:47:26Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDQ2Nzk1",
          "commit": {
            "abbreviatedOid": "cbac491"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks @lisongxu ",
          "createdAt": "2020-12-14T05:09:59Z",
          "updatedAt": "2020-12-14T05:09:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 36,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQxMjM0NTYx",
      "title": "Address (some of) Lisong's review issues",
      "url": "https://github.com/NTAP/rfc8312bis/pull/36",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-12-16T15:11:34Z",
      "updatedAt": "2020-12-17T17:28:09Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "57dbee7118ca2804cc8eb377a25c02051f196756",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "lisongs-issues",
      "headRefOid": "feae3b5319793b043ad14a65d15a06fd03ba8756",
      "closedAt": "2020-12-17T17:28:06Z",
      "mergedAt": "2020-12-17T17:28:06Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "8cb2c1cb3c391f169e8e3818005e36e6fcba5e32"
      },
      "comments": [
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@lisongxu do you have a suggestion for the one issue I didn't address yet?\r\n\r\n>>Section 4.2: the cwnds used in Figure 2 and target equation are two different cwnds. In figure 2, cwnd is the cwnd at the beginning of the current congestion avoidance stage. In target (should also be referred to as Figure x?), cwnd is the current actual cwnd at time t.\r\n\r\n> I need some help coming up with a solution to this one.",
          "createdAt": "2020-12-16T15:31:08Z",
          "updatedAt": "2020-12-16T15:31:08Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I will reply on github so that we can keep track of the discussions, Thanks\nLisong\n\n________________________________\nFrom: Lars Eggert <notifications@github.com>\nSent: Wednesday, December 16, 2020 9:31 AM\nTo: NTAP/rfc8312bis <rfc8312bis@noreply.github.com>\nCc: Lisong Xu <xu@unl.edu>; Mention <mention@noreply.github.com>\nSubject: Re: [NTAP/rfc8312bis] Address (some of) Lisong's review issues (#36)\n\n\n@lisongxu<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_lisongxu&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=5KC63MXbfmYPOr1W6jy-0tNqLOzjPAJcFZfJC1znE48&s=3jVg2QE_Z_PXHBoRGZ9ha4-rRZmJsmIe_7zqAHb8Cpk&e=> do you have a suggestion for the one issue I didn't address yet?\n\nSection 4.2: the cwnds used in Figure 2 and target equation are two different cwnds. In figure 2, cwnd is the cwnd at the beginning of the current congestion avoidance stage. In target (should also be referred to as Figure x?), cwnd is the current actual cwnd at time t.\n\nI need some help coming up with a solution to this one.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_NTAP_rfc8312bis_pull_36-23issuecomment-2D746479864&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=5KC63MXbfmYPOr1W6jy-0tNqLOzjPAJcFZfJC1znE48&s=3yQJdHKhz17Jc-B6fJOBgP-9GZ0DxIhQ-4AqxaH6cEQ&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_ACPRVIPQDNADZJBLBOQBTQDSVDHEZANCNFSM4U6EJ7FA&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=5KC63MXbfmYPOr1W6jy-0tNqLOzjPAJcFZfJC1znE48&s=mtT4P_TIQIogZkJbYcWKBoEx5AjFcA3VmBp8uhcJKSE&e=>.\n",
          "createdAt": "2020-12-16T15:32:52Z",
          "updatedAt": "2020-12-16T15:32:52Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "> @lisongxu do you have a suggestion for the one issue I didn't address yet?\r\n> \r\n> > > Section 4.2: the cwnds used in Figure 2 and target equation are two different cwnds. In figure 2, cwnd is the cwnd at the beginning of the current congestion avoidance stage. In target (should also be referred to as Figure x?), cwnd is the current actual cwnd at time t.\r\n> \r\n> > I need some help coming up with a solution to this one.\r\n\r\nBecause cwnd refers to the current cwnd in the whole RFC, except the cwnd in Figure 2. How about we define a new variable cwnd_{start} for just figure/equation 2 as we have discussed before?\r\n\r\nThat is, we change figure/equation 2 as follows, and replace all cwnd in the paragraph immediately below figure/equation 2 with cwnd_{start}.\r\n\r\nK = \\sqrt[3]{\\frac{W_{max} - cwnd_{start}}{C}}\r\n\r\nUpdate other sections accordingly as follow\r\n\r\nIn Section \"Variables of interest\", we add \"cwnd_{start}: The cwnd at the beginning of the current congestion avoidance stage (i.e., at time epoch_{start})\"\r\n\r\nThanks\r\n\r\n\r\n\r\n",
          "createdAt": "2020-12-16T15:41:04Z",
          "updatedAt": "2020-12-16T15:41:04Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Thanks, I will make that change tomorrow and you guys can review after.",
          "createdAt": "2020-12-16T17:38:15Z",
          "updatedAt": "2020-12-16T17:38:15Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "OK, please review the changes. I am not sure if I managed to change `cwnd` to `cwnd_start` everywhere.",
          "createdAt": "2020-12-17T13:55:52Z",
          "updatedAt": "2020-12-17T13:55:52Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODAxOTk1",
          "commit": {
            "abbreviatedOid": "6f6b794"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, Lars",
          "createdAt": "2020-12-16T15:29:03Z",
          "updatedAt": "2020-12-16T15:29:03Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NjcwNDIx",
          "commit": {
            "abbreviatedOid": "feae3b5"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, Lars!",
          "createdAt": "2020-12-17T14:44:51Z",
          "updatedAt": "2020-12-17T14:44:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 37,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQxNTYxOTYz",
      "title": "added Injong's author block.",
      "url": "https://github.com/NTAP/rfc8312bis/pull/37",
      "state": "MERGED",
      "author": "Injongrhee",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I am not so familiar with git so there has been some learning curve for me. Now that I figured it out, I can contribute regularly. I will review the change and provide comments if necessary. \r\n\r\nThis closes #16 ",
      "createdAt": "2020-12-17T02:41:39Z",
      "updatedAt": "2020-12-17T07:12:45Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "c6c2cbe8e1fe919ae4faeaca386b76ef1c72c668",
      "headRepository": "Injongrhee/rfc8312bis",
      "headRefName": "add-injong",
      "headRefOid": "0b575da5c17110cc4cf87cc6a9faf3c8f009fc0f",
      "closedAt": "2020-12-17T07:12:45Z",
      "mergedAt": "2020-12-17T07:12:45Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "c8a17e5038abbef4324f730e8425bc52193aceb0"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 40,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY5MzkyNzkx",
      "title": "Switch to martinthomson/i-d-template@v1m",
      "url": "https://github.com/NTAP/rfc8312bis/pull/40",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "As requested in https://github.com/martinthomson/i-d-template/pull/259",
      "createdAt": "2021-02-08T11:21:25Z",
      "updatedAt": "2021-02-10T10:14:17Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "8cb2c1cb3c391f169e8e3818005e36e6fcba5e32",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "use-new-i-d-template",
      "headRefOid": "b19952152b27a451572dc4d61e0f14a1d364a5de",
      "closedAt": "2021-02-10T10:14:12Z",
      "mergedAt": "2021-02-10T10:14:12Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "f3f7ffbe186bce0ba667992c1056a407e41cde11"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 41,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc1MjEwNTE4",
      "title": "Issues 38 and 39",
      "url": "https://github.com/NTAP/rfc8312bis/pull/41",
      "state": "MERGED",
      "author": "lisongxu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Issue 38: \"TCP-Friendly\" is a bit misleading\r\nhttps://github.com/NTAP/rfc8312bis/issues/38\r\n\r\nIssue 39: Change introductory text to reflect deployment experience \r\nhttps://github.com/NTAP/rfc8312bis/issues/39\r\n",
      "createdAt": "2021-02-17T21:02:07Z",
      "updatedAt": "2021-02-19T09:24:47Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "5d19dbc0eb52a8aa4f1701871d190d8faf0f1d53",
      "headRepository": "lisongxu/rfc8312bis",
      "headRefName": "main",
      "headRefOid": "95b02537922f0652d7aa002b49a5d2e7f94958af",
      "closedAt": "2021-02-19T09:24:47Z",
      "mergedAt": "2021-02-19T09:24:47Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "8e81c7094dd9e8c97cfbe9d5638453e8bb5dc371"
      },
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I thought about that too, :-) and finally decided to use AIMD TCP receivers; otherwise it is kind of weird to have only AIMD TCP senders.\nThanks\nLisong\n\n________________________________\nFrom: Vidhi Goel <notifications@github.com>\nSent: Thursday, February 18, 2021 9:02 PM\nTo: NTAP/rfc8312bis <rfc8312bis@noreply.github.com>\nCc: Lisong Xu <xu@unl.edu>; Author <author@noreply.github.com>\nSubject: Re: [NTAP/rfc8312bis] Issues 38 and 39 (#41)\n\nNon-NU Email\n________________________________\n\n@goelvidhi commented on this pull request.\n\n________________________________\n\nIn draft-eggert-tcpm-rfc8312bis.md<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_NTAP_rfc8312bis_pull_41-23discussion-5Fr578868980&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=uqkd9u6PKUtKZe3yHSvXDITyrfQWpeWRo54EehTG8J4&s=1kXp_0IaNhb1Ifb9NiBWPkdpRSx1kXqYR1wDlQWUi50&e=>:\n\n>\n ## Incremental Deployment\n\n-CUBIC requires only the change of TCP senders, and it does not make\n-any changes to TCP receivers. That is, a CUBIC sender works correctly\n-with the Standard TCP receivers. In addition, CUBIC does not require\n+CUBIC requires only the change of AIMD TCP senders, and it does not make\n+any changes to AIMD TCP receivers. That is, a CUBIC sender works correctly\n\n\nShould we just leave the receivers as \"TCP receivers\"? Not sure if AIMD makes sense for receiver\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_NTAP_rfc8312bis_pull_41-23pullrequestreview-2D593795572&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=uqkd9u6PKUtKZe3yHSvXDITyrfQWpeWRo54EehTG8J4&s=LGVxL2CJRIBMrhJKsD9_WiFoimfBUibvXJprvsqgjRI&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_ACPRVIOIAWXLQVCN2HBVRRDS7XIENANCNFSM4XZCIDTQ&d=DwMCaQ&c=Cu5g146wZdoqVuKpTNsYHeFX_rg6kWhlkLF8Eft-wwo&r=8GgbmpxpPRnPS9z8_jUQhw&m=uqkd9u6PKUtKZe3yHSvXDITyrfQWpeWRo54EehTG8J4&s=9QE-OFEs1-kKdwGmViFjcvPdyyMYRC8ijpEZMFcqHuw&e=>.\n",
          "createdAt": "2021-02-19T03:45:58Z",
          "updatedAt": "2021-02-19T03:45:58Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyOTk1NjA4",
          "commit": {
            "abbreviatedOid": "cc72723"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-02-18T09:13:48Z",
          "updatedAt": "2021-02-18T09:35:57Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Is Android not Linux?",
              "createdAt": "2021-02-18T09:13:48Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nWindows, and Apple stacks. This document\r\nupdates the specification of CUBIC to include algorithmic\r\nimprovements based on these implementations and recent\r\nacademic work. Based on the extensive deployment experience\r\nwith CUBIC, it also moves the specification to the Standards Track.\r\n```\r\n",
              "createdAt": "2021-02-18T09:18:07Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            },
            {
              "originalPosition": 42,
              "body": "```suggestion\r\ncongestion control algorithm of traditional Additive Increase and\r\nMultiplicative Decrease (AIMD) TCP to remedy this problem.\r\n```\r\n",
              "createdAt": "2021-02-18T09:19:40Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            },
            {
              "originalPosition": 63,
              "body": "Same a comment about Android using Linux?",
              "createdAt": "2021-02-18T09:20:28Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            },
            {
              "originalPosition": 67,
              "body": "```suggestion\r\nExtensive, decade-long deployment experience in vastly different\r\nInternet scenarios has convincingly demonstrated that CUBIC is\r\nsafe for deployment on the global Internet and delivers substantial\r\nbenefits over traditional AIMD congestion control. It is therefore to\r\nbe regarded as the current standard for TCP congestion control.\r\n```",
              "createdAt": "2021-02-18T09:22:27Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            },
            {
              "originalPosition": 82,
              "body": "Would it be possible to turn the following four very long paragraphs on these different four principles into sub-sections? Could someone suggest for section headings to use?",
              "createdAt": "2021-02-18T09:25:26Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            },
            {
              "originalPosition": 260,
              "body": "```suggestion\r\nAIMD TCP, which uses AIMD(1, 0.5).\r\n```",
              "createdAt": "2021-02-18T09:30:13Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            },
            {
              "originalPosition": 411,
              "body": "```suggestion\r\nin fast, long-distance networks. Based on these observations\r\n```",
              "createdAt": "2021-02-18T09:31:28Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            },
            {
              "originalPosition": 412,
              "body": "```suggestion\r\nand extensive deployment experience, we find *C*=0.4 gives\r\na good balance between AIMD-\r\n```",
              "createdAt": "2021-02-18T09:32:28Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            },
            {
              "originalPosition": 462,
              "body": "```suggestion\r\nMore information can be found in {{HKLRX06}}.\r\nAdditionally, there is decade-long deployment experience\r\nwith CUBIC on the Internet.\r\n```\r\n",
              "createdAt": "2021-02-18T09:34:23Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            },
            {
              "originalPosition": 529,
              "body": "This should move to a new subsection called `## Since draft-eggert-tcpm-rfc8312bis-01` that should come before the section this text is currently in.",
              "createdAt": "2021-02-18T09:35:37Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMjY4ODkz",
          "commit": {
            "abbreviatedOid": "e72c027"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-18T14:26:34Z",
          "updatedAt": "2021-02-18T14:26:34Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "ok, I will remove it.",
              "createdAt": "2021-02-18T14:26:34Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMjcwODEw",
          "commit": {
            "abbreviatedOid": "65755e3"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-18T14:28:21Z",
          "updatedAt": "2021-02-18T14:28:22Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "removed",
              "createdAt": "2021-02-18T14:28:22Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMjcyMzA2",
          "commit": {
            "abbreviatedOid": "d0087aa"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-18T14:29:44Z",
          "updatedAt": "2021-02-18T14:29:44Z",
          "comments": [
            {
              "originalPosition": 529,
              "body": "done",
              "createdAt": "2021-02-18T14:29:44Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMjc5Mzkw",
          "commit": {
            "abbreviatedOid": "4a4b0c9"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-18T14:36:12Z",
          "updatedAt": "2021-02-18T14:36:12Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "Done. ",
              "createdAt": "2021-02-18T14:36:12Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMzI4NzI3",
          "commit": {
            "abbreviatedOid": "4a4b0c9"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-18T15:18:55Z",
          "updatedAt": "2021-02-18T15:18:55Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzNzk1NTcy",
          "commit": {
            "abbreviatedOid": "4a4b0c9"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-19T01:48:53Z",
          "updatedAt": "2021-02-19T03:02:10Z",
          "comments": [
            {
              "originalPosition": 530,
              "body": "Should we just leave the receivers as \"TCP receivers\"? Not sure if AIMD makes sense for receiver",
              "createdAt": "2021-02-19T01:48:53Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzODU1MjY1",
          "commit": {
            "abbreviatedOid": "4a4b0c9"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "@lisongxu Thanks a lot for the changes! I just found two small changes to consider. ",
          "createdAt": "2021-02-19T04:43:12Z",
          "updatedAt": "2021-02-19T05:13:24Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "@lisongxu We may remove ',' before \"below because .. \" ",
              "createdAt": "2021-02-19T04:43:12Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            },
            {
              "originalPosition": 436,
              "body": "@lisongxu Since we are using fast and long-distance networks in a few places, for consistency, we may use \"fast and long-distance networks\" instead of \"fast, long-distance networks.\"",
              "createdAt": "2021-02-19T05:04:37Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzODc5MTc0",
          "commit": {
            "abbreviatedOid": "4a4b0c9"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-19T05:47:28Z",
          "updatedAt": "2021-02-19T05:47:28Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "done",
              "createdAt": "2021-02-19T05:47:28Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzODgwNDc5",
          "commit": {
            "abbreviatedOid": "ef58678"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-19T05:51:01Z",
          "updatedAt": "2021-02-19T05:51:01Z",
          "comments": [
            {
              "originalPosition": 436,
              "body": "done",
              "createdAt": "2021-02-19T05:51:01Z",
              "updatedAt": "2021-02-19T05:52:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzOTExNTAz",
          "commit": {
            "abbreviatedOid": "95b0253"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-19T07:07:44Z",
          "updatedAt": "2021-02-19T07:07:44Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzOTEyNDEx",
          "commit": {
            "abbreviatedOid": "95b0253"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-19T07:09:49Z",
          "updatedAt": "2021-02-19T07:09:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 42,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc2MzU2NjIy",
      "title": "Minor editorial changes",
      "url": "https://github.com/NTAP/rfc8312bis/pull/42",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-19T10:29:05Z",
      "updatedAt": "2021-02-22T08:44:57Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "006af1a400234eff5dfdd364e40ae942399e56ed",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "minor-fixes",
      "headRefOid": "db30be6ae56d80afe19b5cf3071397f7911a8c4a",
      "closedAt": "2021-02-22T08:44:54Z",
      "mergedAt": "2021-02-22T08:44:54Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "802084896c2b3a10a0a84c7db3457f27e65d29ba"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0MjI1NTg2",
          "commit": {
            "abbreviatedOid": "fe6f4e8"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-19T14:13:57Z",
          "updatedAt": "2021-02-19T14:13:57Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0ODAwNjM3",
          "commit": {
            "abbreviatedOid": "fe6f4e8"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-21T02:22:52Z",
          "updatedAt": "2021-02-21T02:22:52Z",
          "comments": [
            {
              "originalPosition": 430,
              "body": "IMO, it is tricky to get the adaptive adjustment right, not sure if @lisongxu is already researching on this.",
              "createdAt": "2021-02-21T02:22:52Z",
              "updatedAt": "2021-02-22T08:40:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0ODAwNjM5",
          "commit": {
            "abbreviatedOid": "fe6f4e8"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-21T02:22:57Z",
          "updatedAt": "2021-02-21T02:22:57Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0ODY0MTcz",
          "commit": {
            "abbreviatedOid": "fe6f4e8"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-21T17:46:16Z",
          "updatedAt": "2021-02-21T17:46:16Z",
          "comments": [
            {
              "originalPosition": 430,
              "body": "No, we are not working on it. Let's remove this sentence. Thanks.",
              "createdAt": "2021-02-21T17:46:16Z",
              "updatedAt": "2021-02-22T08:40:20Z"
            }
          ]
        }
      ]
    },
    {
      "number": 48,
      "id": "MDExOlB1bGxSZXF1ZXN0NTgwNDE2OTI5",
      "title": "Fix some typos",
      "url": "https://github.com/NTAP/rfc8312bis/pull/48",
      "state": "MERGED",
      "author": "maolson-msft",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-25T21:20:09Z",
      "updatedAt": "2021-03-01T07:50:38Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "802084896c2b3a10a0a84c7db3457f27e65d29ba",
      "headRepository": "maolson-msft/rfc8312bis",
      "headRefName": "patch-1",
      "headRefOid": "ead0a1e138a0cf40e14855b1f95b1206d5112526",
      "closedAt": "2021-03-01T07:50:38Z",
      "mergedAt": "2021-03-01T07:50:38Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "f22445fb591faa87de730adb69edee42e67784f6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk5MjA0MDYx",
          "commit": {
            "abbreviatedOid": "ead0a1e"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-26T02:23:32Z",
          "updatedAt": "2021-02-26T02:23:32Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk5MjE5Njk2",
          "commit": {
            "abbreviatedOid": "ead0a1e"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-26T03:07:38Z",
          "updatedAt": "2021-02-26T03:07:38Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "could you remove the comma after Windows?",
              "createdAt": "2021-02-26T03:07:38Z",
              "updatedAt": "2021-02-26T03:07:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk5MjE5Nzg3",
          "commit": {
            "abbreviatedOid": "ead0a1e"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-26T03:07:56Z",
          "updatedAt": "2021-02-26T03:07:56Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "same here",
              "createdAt": "2021-02-26T03:07:56Z",
              "updatedAt": "2021-02-26T03:07:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk5OTI1MzEz",
          "commit": {
            "abbreviatedOid": "ead0a1e"
          },
          "author": "maolson-msft",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-26T20:39:21Z",
          "updatedAt": "2021-02-26T20:39:21Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "This is valid usage, i.e. an \"Oxford Comma.\" I prefer to use the Oxford Comma but I don't feel strongly about it; let me know if you still want this change. ",
              "createdAt": "2021-02-26T20:39:21Z",
              "updatedAt": "2021-02-26T20:39:21Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMDkyMDMy",
          "commit": {
            "abbreviatedOid": "ead0a1e"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-27T06:36:11Z",
          "updatedAt": "2021-02-27T06:36:11Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "What do we do elsewhere? We should be consistent.",
              "createdAt": "2021-02-27T06:36:11Z",
              "updatedAt": "2021-02-27T06:36:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMTAyMzY0",
          "commit": {
            "abbreviatedOid": "ead0a1e"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-27T06:43:04Z",
          "updatedAt": "2021-02-27T06:43:05Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I did some quick search, and we are using the \"Oxford Comma.\" Lets keep it as is.",
              "createdAt": "2021-02-27T06:43:04Z",
              "updatedAt": "2021-02-27T06:44:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwNDU4OTc1",
          "commit": {
            "abbreviatedOid": "ead0a1e"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-01T07:50:33Z",
          "updatedAt": "2021-03-01T07:50:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 49,
      "id": "MDExOlB1bGxSZXF1ZXN0NTgwNTY4MTc2",
      "title": "add definition for segments_acked and Alpha_aimd",
      "url": "https://github.com/NTAP/rfc8312bis/pull/49",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #47 ",
      "createdAt": "2021-02-26T03:15:40Z",
      "updatedAt": "2021-03-04T00:14:43Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "802084896c2b3a10a0a84c7db3457f27e65d29ba",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "more-definitions",
      "headRefOid": "f96b1949e01ab238ac0fdf08d3d5123b5102a6e4",
      "closedAt": "2021-03-03T07:37:49Z",
      "mergedAt": "2021-03-03T07:37:49Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "4b54c398434574cb2bc9d18d4e6629c4c9e099f9"
      },
      "comments": [
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "As this is minor, merging it now.",
          "createdAt": "2021-03-03T07:37:34Z",
          "updatedAt": "2021-03-03T07:37:34Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "I merged this and then realized there wasn't an entry for the changelog in the PR. @goelvidhi could you add that in your next PR?",
          "createdAt": "2021-03-03T07:46:57Z",
          "updatedAt": "2021-03-03T07:46:57Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "will do.",
          "createdAt": "2021-03-04T00:14:43Z",
          "updatedAt": "2021-03-04T00:14:43Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk5MzEwMDY3",
          "commit": {
            "abbreviatedOid": "f96b194"
          },
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2021-02-26T07:24:46Z",
          "updatedAt": "2021-02-26T07:24:46Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwNjU5Mjc3",
          "commit": {
            "abbreviatedOid": "f96b194"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-03-01T12:01:58Z",
          "updatedAt": "2021-03-01T12:02:45Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "This seems like an unrelated change?",
              "createdAt": "2021-03-01T12:02:33Z",
              "updatedAt": "2021-03-01T12:02:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAyNTg1NTgw",
          "commit": {
            "abbreviatedOid": "f96b194"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-03-03T07:28:26Z",
          "updatedAt": "2021-03-03T07:28:26Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "It is. But I did it as it was a minor fix.",
              "createdAt": "2021-03-03T07:28:26Z",
              "updatedAt": "2021-03-03T07:28:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAyNTkwODM4",
          "commit": {
            "abbreviatedOid": "f96b194"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-03-03T07:36:53Z",
          "updatedAt": "2021-03-03T07:36:53Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "OK",
              "createdAt": "2021-03-03T07:36:53Z",
              "updatedAt": "2021-03-03T07:36:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAyNTkxMDY3",
          "commit": {
            "abbreviatedOid": "f96b194"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-03T07:37:15Z",
          "updatedAt": "2021-03-03T07:37:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 50,
      "id": "MDExOlB1bGxSZXF1ZXN0NTg0MzkxNTQ0",
      "title": "add changelog since 02",
      "url": "https://github.com/NTAP/rfc8312bis/pull/50",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Changelog for https://github.com/NTAP/rfc8312bis/pull/49",
      "createdAt": "2021-03-04T00:27:58Z",
      "updatedAt": "2021-03-04T07:17:22Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "4b54c398434574cb2bc9d18d4e6629c4c9e099f9",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "definition-changelog",
      "headRefOid": "6a30b7bccacb3494e3bcae8678df9afc3bbeb584",
      "closedAt": "2021-03-04T07:17:22Z",
      "mergedAt": "2021-03-04T07:17:22Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "8634242a416bca6d3de1e3e704f104b4fa1e4717"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAzNzcwMTk0",
          "commit": {
            "abbreviatedOid": "6a30b7b"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-04T07:17:05Z",
          "updatedAt": "2021-03-04T07:17:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 52,
      "id": "MDExOlB1bGxSZXF1ZXN0NTg2Mjk3Mzcy",
      "title": "fix a mistake of W_max as described in Issue 51 ",
      "url": "https://github.com/NTAP/rfc8312bis/pull/52",
      "state": "MERGED",
      "author": "lisongxu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fix a mistake of W_max as described in Issue 51 \r\nhttps://github.com/NTAP/rfc8312bis/issues/51",
      "createdAt": "2021-03-07T17:56:11Z",
      "updatedAt": "2021-03-08T16:21:48Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "8634242a416bca6d3de1e3e704f104b4fa1e4717",
      "headRepository": "lisongxu/rfc8312bis",
      "headRefName": "main",
      "headRefOid": "3bcc1c373f1bfa435cd9fce5b8096c1a79248715",
      "closedAt": "2021-03-08T16:21:47Z",
      "mergedAt": "2021-03-08T16:21:47Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "77c2b9217f0f6b14bcdb9f4c001d45ab0d9613d3"
      },
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "<img width=\"984\" alt=\"Screen Shot 2021-03-07 at 2 53 46 PM\" src=\"https://user-images.githubusercontent.com/10913828/110257930-f6d3fb00-7f54-11eb-9c6c-3df21c59660a.png\">\r\nI am not sure why, but in the converted html, `fast convergence is enabled` looks like a single word and the text is going out of bounds. @larseggert any way to fix that?",
          "createdAt": "2021-03-07T22:55:22Z",
          "updatedAt": "2021-03-07T22:55:22Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "The text needs to be put in `\\text`. But I am not sure if it would wrap, since it's in SVG. Can we shorten the text?",
          "createdAt": "2021-03-08T06:15:17Z",
          "updatedAt": "2021-03-08T06:15:17Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "You also need to add a bullet to the changelog.",
          "createdAt": "2021-03-08T14:50:58Z",
          "updatedAt": "2021-03-08T14:50:58Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA1OTQwNjgx",
          "commit": {
            "abbreviatedOid": "1386ef9"
          },
          "author": "Injongrhee",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-08T03:20:30Z",
          "updatedAt": "2021-03-08T03:20:30Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA2MDYzNTk2",
          "commit": {
            "abbreviatedOid": "1386ef9"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-03-08T08:38:43Z",
          "updatedAt": "2021-03-08T08:38:51Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n& \\text{if } (cwnd < W_{max}) \\text{and fast convergence is enabled, further reduce } W_{max} \\\\\r\n```\r\nCan we shorten the text inside `\\text`?",
              "createdAt": "2021-03-08T08:38:43Z",
              "updatedAt": "2021-03-08T16:18:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA2MzcwMTg1",
          "commit": {
            "abbreviatedOid": "652a834"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-03-08T14:49:27Z",
          "updatedAt": "2021-03-08T14:49:32Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n& \\text{if} cwnd < W_{max} \\text{ and fast convergence is enabled,} \\\\\r\n& \\text{further reduce } W_{max} \\\\\r\n```\r\nI think it might look better without the brackets? Also, you probably want a space before \"and\".",
              "createdAt": "2021-03-08T14:49:27Z",
              "updatedAt": "2021-03-08T16:18:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA2NDU1Mjkz",
          "commit": {
            "abbreviatedOid": "5f1f1bf"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-03-08T16:11:20Z",
          "updatedAt": "2021-03-08T16:11:20Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n& \\text{if } cwnd < W_{max} \\text{ and fast convergence is enabled},\\\\\r\n```\r\nI inadvertently changed this earlier, sorry.",
              "createdAt": "2021-03-08T16:11:20Z",
              "updatedAt": "2021-03-08T16:18:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA2NDYwMjYw",
          "commit": {
            "abbreviatedOid": "a5a25df"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-03-08T16:16:15Z",
          "updatedAt": "2021-03-08T16:16:16Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n- fix a mistake in *W<sub>max</sub>* calculation in the fast convergence section.\r\n  ([#51](https://github.com/NTAP/rfc8312bis/issues/51))\r\n```",
              "createdAt": "2021-03-08T16:16:15Z",
              "updatedAt": "2021-03-08T16:18:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA2NDYyMTgz",
          "commit": {
            "abbreviatedOid": "c48dd2f"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-03-08T16:18:09Z",
          "updatedAt": "2021-03-08T16:18:10Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n  ([#51](https://github.com/NTAP/rfc8312bis/issues/51))\r\n  \r\n```",
              "createdAt": "2021-03-08T16:18:09Z",
              "updatedAt": "2021-03-08T16:18:14Z"
            }
          ]
        }
      ]
    },
    {
      "number": 54,
      "id": "MDExOlB1bGxSZXF1ZXN0NTg3OTgyODc5",
      "title": "Mult decrease bound",
      "url": "https://github.com/NTAP/rfc8312bis/pull/54",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Hope this should remove any ambiguity we had in how cwnd_start is set during multiplicative decrease.\r\n\r\nAlso, updated some minor things in change log.",
      "createdAt": "2021-03-09T13:32:26Z",
      "updatedAt": "2021-03-11T07:54:39Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "77c2b9217f0f6b14bcdb9f4c001d45ab0d9613d3",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "mult-decrease-bound",
      "headRefOid": "e708686b769eb315d4edd07bd2c80063369a4e62",
      "closedAt": "2021-03-11T07:54:39Z",
      "mergedAt": "2021-03-11T07:54:38Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "de1e573d0d7816d32b24e6313a41ed579fd784aa"
      },
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert not sure why the last commit failed the checks. The change was ssthresh to *ssthresh* in the change log",
          "createdAt": "2021-03-09T14:09:17Z",
          "updatedAt": "2021-03-09T14:09:17Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "`draft-eggert-tcpm-rfc8312bis.md:996:81 MD013/line-length Line length [Expected: 80; Actual: 90]`",
          "createdAt": "2021-03-09T14:34:50Z",
          "updatedAt": "2021-03-09T14:34:50Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> draft-eggert-tcpm-rfc8312bis.md:996:81 MD013/line-length Line length [Expected: 80; Actual: 90]\r\n\r\nmy bad. Fixed.",
          "createdAt": "2021-03-09T14:46:31Z",
          "updatedAt": "2021-03-09T14:46:31Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "How about changing \"*cwnd<sub>start</sub>* is calculated as described in {{mult-dec}} when a congestion event is detected.\" to \"\"*cwnd<sub>start</sub>* is the new *cwnd* calculated when a congestion event is detected as described in {{mult-dec}}.\"? ",
          "createdAt": "2021-03-09T14:48:36Z",
          "updatedAt": "2021-03-09T14:48:36Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> How about changing \"cwndstart is calculated as described in {{mult-dec}} when a congestion event is detected.\" to \"\"cwndstart is the new cwnd calculated when a congestion event is detected as described in {{mult-dec}}.\"?\r\n\r\nI updated the text.\r\nAlso, I removed the below redundant line. We already describe cwnd_start in variable definition.\r\n\r\n> where *cwnd<sub>start</sub>* is the congestion window at the beginning\r\n of the current congestion avoidance stage.\r\n\r\n I also updated the Multiplicative Decrease section to call the reduced window as cwnd_start. \r\n<img width=\"487\" alt=\"Screen Shot 2021-03-10 at 7 15 38 PM\" src=\"https://user-images.githubusercontent.com/10913828/110730285-0c575800-81d5-11eb-92c3-125f443edf50.png\">\r\n\r\n\r\n Let me know if these updates are ok.",
          "createdAt": "2021-03-11T03:14:58Z",
          "updatedAt": "2021-03-11T03:16:05Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> line 472: change \"where _cwndstart_ is the new congestion window calculated when a congestion event is detected as described in {{mult-dec}}\" to \"where _cwndstart_ is the new _cwnd_ calculated when the previous congestion event was detected as described in {{mult-dec}}\" ?\r\n\r\nPrevious could mean previous to the last congestion event. Should we say ..when the last congestion event was detected ...?\r\n> \r\n> line 631: \"cwnd_{start} = ssthresh \" should be \"cwnd = ssthresh \".\r\n> \r\n> Thanks\r\n\r\nI changed it to cwnd_{start} for clarity. Could you tell why do you think \"cwnd = ssthresh \" is better?\r\n",
          "createdAt": "2021-03-11T03:46:13Z",
          "updatedAt": "2021-03-11T03:46:13Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, Vidhi. This is because cwnd is the one used everywhere. If line 631 is \"cwnd_{start} = ssthresh \", then variable cwnd is not defined.",
          "createdAt": "2021-03-11T04:24:46Z",
          "updatedAt": "2021-03-11T04:24:46Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "for cwnd_start at line 472, I still like the definition that we discussed before. that is  \"where cwnd_start is the cwnd at the very beginning of the current congestion avoidance stage\".  This covers all possible cases. \r\n   * loss event, congestion avoidance\r\n   * TCP starts, slow start, congestion avoidance\r\n   * timeout, slow start, congestion avoidance\r\n\r\nHow do you think? Thanks",
          "createdAt": "2021-03-11T04:32:10Z",
          "updatedAt": "2021-03-11T04:32:10Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "ok. I will revert the change on line 631.\r\n\r\nFor line 472, how about the below text?\r\nwhere *cwnd<sub>start</sub>* is the congestion window at the beginning\r\nof the current congestion avoidance stage. When a congestion event is\r\ndetected, *cwnd<sub>start</sub>* is set to the new (or reduced?) cwnd calculated as described in {{mult-dec}}.",
          "createdAt": "2021-03-11T04:54:34Z",
          "updatedAt": "2021-03-11T05:01:04Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I added \"for example\" so that a reader knows this is only one of many possible cases.\r\n\r\nwhere cwndstart is the congestion window at the beginning of the current congestion avoidance stage. For example, right after a congestion event, cwndstart is equal to the new cwnd calculated as described in {{mult-dec}}.",
          "createdAt": "2021-03-11T05:03:41Z",
          "updatedAt": "2021-03-11T05:03:41Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I added \"for example\" so that a reader knows this is only one of many possible cases.\r\n> \r\n> where cwndstart is the congestion window at the beginning of the current congestion avoidance stage. For example, right after a congestion event, cwndstart is equal to the new cwnd calculated as described in {{mult-dec}}.\r\n\r\nsounds good. Updated.",
          "createdAt": "2021-03-11T05:07:30Z",
          "updatedAt": "2021-03-11T05:07:30Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> for cwnd_start at line 472, I still like the definition that we discussed before. that is \"where cwnd_start is the cwnd at the very beginning of the current congestion avoidance stage\". This covers all possible cases.\r\n> \r\n> * loss event, congestion avoidance\r\n> * TCP starts, slow start, congestion avoidance\r\n> * timeout, slow start, congestion avoidance\r\n\r\nThe other scenarios where we go from slow start to CA without loss have some caveats which are not mentioned in the draft.\r\nFor example, K should be 0 and W_max should be set to cwnd. Do you think we should add some text?\r\n\r\n",
          "createdAt": "2021-03-11T05:15:54Z",
          "updatedAt": "2021-03-11T05:15:54Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n> The other scenarios where we go from slow start to CA without loss have some caveats which are not mentioned in the draft.\r\n> For example, K should be 0 and W_max should be set to cwnd. Do you think we should add some text?\r\n\r\n\r\nThat case is discussed in Section 4.10 \"slow start\"?\r\n\r\n\"When CUBIC uses hybrid slow start [HR08], it may exit the first slow start without incurring any packet loss and thus Wmax is undefined. In this special case, CUBIC switches to congestion avoidance and increases its congestion window size using Figure 1, where t is the elapsed time since the beginning of the current congestion avoidance, K is set to 0, and Wmax is set to the congestion window size at the beginning of the current congestion avoidance stage.\"",
          "createdAt": "2021-03-11T05:23:49Z",
          "updatedAt": "2021-03-11T05:23:49Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > The other scenarios where we go from slow start to CA without loss have some caveats which are not mentioned in the draft.\r\n> > For example, K should be 0 and W_max should be set to cwnd. Do you think we should add some text?\r\n> \r\n> That case is discussed in Section 4.10 \"slow start\"?\r\n> \r\n> \"When CUBIC uses hybrid slow start [HR08], it may exit the first slow start without incurring any packet loss and thus Wmax is undefined. In this special case, CUBIC switches to congestion avoidance and increases its congestion window size using Figure 1, where t is the elapsed time since the beginning of the current congestion avoidance, K is set to 0, and Wmax is set to the congestion window size at the beginning of the current congestion avoidance stage.\"\r\n\r\nAh.. got it. Looks good.",
          "createdAt": "2021-03-11T07:52:16Z",
          "updatedAt": "2021-03-11T07:52:16Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert this PR is ready to merge.",
          "createdAt": "2021-03-11T07:52:33Z",
          "updatedAt": "2021-03-11T07:52:33Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA3NDEzNzQ1",
          "commit": {
            "abbreviatedOid": "9a9cb90"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-03-09T13:38:50Z",
          "updatedAt": "2021-03-09T13:39:55Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nimplementation MAY set a smaller *ssthresh* than suggested below to\r\n```",
              "createdAt": "2021-03-09T13:38:50Z",
              "updatedAt": "2021-03-11T05:06:46Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nwindow to its new reduced *ssthresh* value. The parameter {{{\u03b2}{}}}*<sub>cubic</sub>*\r\n```",
              "createdAt": "2021-03-09T13:39:06Z",
              "updatedAt": "2021-03-11T05:06:46Z"
            },
            {
              "originalPosition": 38,
              "body": "```suggestion\r\n- clarity on setting *ssthresh* and *cwnd<sub>start</sub>* during multiplicative decrease.\r\n```",
              "createdAt": "2021-03-09T13:39:24Z",
              "updatedAt": "2021-03-11T05:06:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA3NDg4Mzg0",
          "commit": {
            "abbreviatedOid": "257faba"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-09T14:45:59Z",
          "updatedAt": "2021-03-09T14:45:59Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA3NDkyNDUx",
          "commit": {
            "abbreviatedOid": "257faba"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "How about changing \"cwndstart is calculated as described in {{mult-dec}} when a congestion event is detected.\" to \"\"cwndstart is the new cwnd calculated when a congestion event is detected as described in {{mult-dec}}.\"?",
          "createdAt": "2021-03-09T14:49:22Z",
          "updatedAt": "2021-03-09T14:49:22Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA5MzY4MjA3",
          "commit": {
            "abbreviatedOid": "37a8545"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "line 472: change \"where *cwnd<sub>start</sub>* is the new congestion window calculated when a congestion event is detected as described in {{mult-dec}}\" to \"where *cwnd<sub>start</sub>* is the new *cwnd* calculated when the previous congestion event was detected as described in {{mult-dec}}\" ?\r\n\r\nline 631: \"cwnd_{start} = ssthresh \" should be \"cwnd = ssthresh \". \r\n\r\nThanks\r\n\r\n",
          "createdAt": "2021-03-11T03:32:54Z",
          "updatedAt": "2021-03-11T03:32:54Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA5NDAzODQy",
          "commit": {
            "abbreviatedOid": "e708686"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you, Vidhi!",
          "createdAt": "2021-03-11T05:24:36Z",
          "updatedAt": "2021-03-11T05:24:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 56,
      "id": "MDExOlB1bGxSZXF1ZXN0NTkxNzUzNjU3",
      "title": "Reflect WG adoption",
      "url": "https://github.com/NTAP/rfc8312bis/pull/56",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-03-12T15:04:48Z",
      "updatedAt": "2021-03-15T14:56:41Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "32b68e5968c31d2b5709b07c88e88baa87992ba8",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "switch-to-draft-ietf",
      "headRefOid": "4af5fdef47ea1bffd24b22de04d1514ea890e44d",
      "closedAt": "2021-03-15T14:56:38Z",
      "mergedAt": "2021-03-15T14:56:38Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "713ceb80f5d08ffcdd1e5dd3606df7ec91093ad7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjExOTE4MDQ1",
          "commit": {
            "abbreviatedOid": "4af5fde"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-15T08:16:24Z",
          "updatedAt": "2021-03-15T08:16:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 58,
      "id": "MDExOlB1bGxSZXF1ZXN0NjE4ODA3Mjk2",
      "title": "issue #55",
      "url": "https://github.com/NTAP/rfc8312bis/pull/58",
      "state": "MERGED",
      "author": "lisongxu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/NTAP/rfc8312bis/issues/55",
      "createdAt": "2021-04-20T00:53:42Z",
      "updatedAt": "2021-04-21T08:47:15Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "bbfb3845f4914e1dd10414f74b865395b1b726a8",
      "headRepository": "lisongxu/rfc8312bis",
      "headRefName": "main",
      "headRefOid": "6c056ea8a6772a51d8321a0e0ec43ea9a2192e91",
      "closedAt": "2021-04-21T08:47:15Z",
      "mergedAt": "2021-04-21T08:47:15Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "935cfb52da7aa42baf6acc16421b44568bf1597a"
      },
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @lisongxu for the change.\r\nCould you add the change log?",
          "createdAt": "2021-04-20T06:31:53Z",
          "updatedAt": "2021-04-20T06:31:53Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "> Thanks @lisongxu for the change.\r\n> Could you add the change log?\r\n\r\nDone, thanks",
          "createdAt": "2021-04-20T14:02:08Z",
          "updatedAt": "2021-04-20T14:02:08Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQwMDE1NjQy",
          "commit": {
            "abbreviatedOid": "6c056ea"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-04-20T14:21:24Z",
          "updatedAt": "2021-04-20T14:21:24Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQwMjMyNjE4",
          "commit": {
            "abbreviatedOid": "6c056ea"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-04-20T17:19:46Z",
          "updatedAt": "2021-04-20T17:19:46Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQwMzM4Mzc0",
          "commit": {
            "abbreviatedOid": "6c056ea"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-04-20T19:16:59Z",
          "updatedAt": "2021-04-20T19:16:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 60,
      "id": "MDExOlB1bGxSZXF1ZXN0NjMwNDA4NjYx",
      "title": "Adress Martin Scharf's comments",
      "url": "https://github.com/NTAP/rfc8312bis/pull/60",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-05-05T08:47:03Z",
      "updatedAt": "2021-05-05T18:23:01Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "63cc35310a266b56461df68dc0f47b436b44339f",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "comments-martin-scharf",
      "headRefOid": "55d97fedbff64c8cb07366f7390f212a889afe65",
      "closedAt": "2021-05-05T18:22:58Z",
      "mergedAt": "2021-05-05T18:22:58Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "44f32f27593e594fcd8a0194fedde5e56942b2e2"
      },
      "comments": [
        {
          "author": "michael-scharf",
          "authorAssociation": "NONE",
          "body": "This works for me. Thanks.",
          "createdAt": "2021-05-05T09:01:39Z",
          "updatedAt": "2021-05-05T09:01:39Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUyMzY2OTM3",
          "commit": {
            "abbreviatedOid": "55d97fe"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you!",
          "createdAt": "2021-05-05T14:20:22Z",
          "updatedAt": "2021-05-05T14:20:22Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUyNTU2MDIw",
          "commit": {
            "abbreviatedOid": "55d97fe"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Changes look great to me. Thanks, @larseggert!",
          "createdAt": "2021-05-05T17:12:29Z",
          "updatedAt": "2021-05-05T17:12:29Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUyNTU2Mjc4",
          "commit": {
            "abbreviatedOid": "55d97fe"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Changes look great to me. Thanks, @larseggert!",
          "createdAt": "2021-05-05T17:12:46Z",
          "updatedAt": "2021-05-05T17:12:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYwNzkzNTM0",
      "title": "add applicability to QUIC, SCTP",
      "url": "https://github.com/NTAP/rfc8312bis/pull/72",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #61 ",
      "createdAt": "2021-06-03T10:36:57Z",
      "updatedAt": "2021-06-08T06:34:52Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "44f32f27593e594fcd8a0194fedde5e56942b2e2",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "add-protocols",
      "headRefOid": "5aa941eec7cb26972da5aedc974a1c3a099cad3f",
      "closedAt": "2021-06-08T06:34:52Z",
      "mergedAt": "2021-06-08T06:34:52Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "07f8f5a0f8501e72b33fc9517ea9ccf0213f1e68"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc1MTQ1NjIz",
          "commit": {
            "abbreviatedOid": "f3a90e1"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-06-03T10:54:20Z",
          "updatedAt": "2021-06-03T10:54:26Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "We need to add informative references to RFC9000 for QUIC and RFC4960 for SCTP.",
              "createdAt": "2021-06-03T10:54:20Z",
              "updatedAt": "2021-06-03T10:54:26Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc1MTUyMzQ1",
          "commit": {
            "abbreviatedOid": "f3a90e1"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-03T11:02:45Z",
          "updatedAt": "2021-06-03T11:02:45Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nQUIC {{?RFC9000}} and SCTP {{?RFC4960}} as a default congestion controller.\r\n```",
              "createdAt": "2021-06-03T11:02:45Z",
              "updatedAt": "2021-06-03T11:02:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc3MDM0MDEx",
          "commit": {
            "abbreviatedOid": "5aa941e"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-06-07T06:38:16Z",
          "updatedAt": "2021-06-07T06:38:16Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc4MDM4MzUz",
          "commit": {
            "abbreviatedOid": "5aa941e"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks",
          "createdAt": "2021-06-08T02:42:31Z",
          "updatedAt": "2021-06-08T02:42:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 73,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYwODA4NjA1",
      "title": "Instruct RFC Editor to change \"Figure\" to \"Equation\"",
      "url": "https://github.com/NTAP/rfc8312bis/pull/73",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": " Fixes #63.",
      "createdAt": "2021-06-03T11:00:48Z",
      "updatedAt": "2021-06-07T06:38:30Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "44f32f27593e594fcd8a0194fedde5e56942b2e2",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "eq-not-fig",
      "headRefOid": "ba9629e0261c0704f9e45cfd526534344193710e",
      "closedAt": "2021-06-05T14:27:23Z",
      "mergedAt": "2021-06-05T14:27:23Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "87bbf908a61ee54af1541f0a1e4a5ac678de3613"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc2NzM4MDE2",
          "commit": {
            "abbreviatedOid": "ba9629e"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-06-05T01:31:20Z",
          "updatedAt": "2021-06-05T01:31:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 74,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY2NjM5Nzk3",
      "title": "add clarity on setting alpha_aimd to 1",
      "url": "https://github.com/NTAP/rfc8312bis/pull/74",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #68 ",
      "createdAt": "2021-06-10T08:16:18Z",
      "updatedAt": "2021-06-10T15:28:52Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "07f8f5a0f8501e72b33fc9517ea9ccf0213f1e68",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "aimd-friendly",
      "headRefOid": "9bfb4f300c2b2a8eb1c3937827bf923fcf0c4fb4",
      "closedAt": "2021-06-10T15:28:52Z",
      "mergedAt": "2021-06-10T15:28:51Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "f6a00afafb1eab3b4ce9b5fb0d72845153d1a095"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgwNTE2NzI3",
          "commit": {
            "abbreviatedOid": "3b42a6a"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-10T08:50:09Z",
          "updatedAt": "2021-06-10T08:50:10Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n*W<sub>est</sub>* >= *W<sub>max</sub>*, CUBIC needs to start probing to\r\n```",
              "createdAt": "2021-06-10T08:50:09Z",
              "updatedAt": "2021-06-10T08:50:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgwNTI4MzIz",
          "commit": {
            "abbreviatedOid": "9bfb4f3"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-06-10T09:00:57Z",
          "updatedAt": "2021-06-10T09:00:57Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgwNzc3ODU5",
          "commit": {
            "abbreviatedOid": "9bfb4f3"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks",
          "createdAt": "2021-06-10T13:23:57Z",
          "updatedAt": "2021-06-10T13:23:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 75,
      "id": "MDExOlB1bGxSZXF1ZXN0NjcwMTkyNTIy",
      "title": "clarify alpha and add alpha_cubic",
      "url": "https://github.com/NTAP/rfc8312bis/pull/75",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #64 \r\n\r\nAs this PR includes changes to formulas in Section 4.3, reviewing the HTML version would be easier. You can download it from Editor's copy under Checks tab.\r\n",
      "createdAt": "2021-06-15T08:34:05Z",
      "updatedAt": "2021-06-16T06:38:43Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "f6a00afafb1eab3b4ce9b5fb0d72845153d1a095",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "alpha-aimd",
      "headRefOid": "f7b3079ad4ddeb0314db8306296e5a822b493545",
      "closedAt": "2021-06-16T06:38:43Z",
      "mergedAt": "2021-06-16T06:38:43Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "2660495987ec2472118d83c42083ed16767fe0fd"
      },
      "comments": [
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@chromi you can download the build artifacts here, which include the formatted versions: https://github.com/NTAP/rfc8312bis/suites/2996841176/artifacts/67729624",
          "createdAt": "2021-06-15T10:14:06Z",
          "updatedAt": "2021-06-15T10:14:06Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for this revision! It is very clear and I really like it.",
          "createdAt": "2021-06-16T02:37:09Z",
          "updatedAt": "2021-06-16T02:37:09Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "looks very good to me.",
          "createdAt": "2021-06-16T05:41:39Z",
          "updatedAt": "2021-06-16T05:41:39Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgzNzg2MzIz",
          "commit": {
            "abbreviatedOid": "f7b3079"
          },
          "author": "chromi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "This looks like it could be a significant improvement.  I look forward to seeing the formatted version.",
          "createdAt": "2021-06-15T09:40:27Z",
          "updatedAt": "2021-06-15T09:40:27Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg0NjY3OTI2",
          "commit": {
            "abbreviatedOid": "f7b3079"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you!",
          "createdAt": "2021-06-16T02:35:26Z",
          "updatedAt": "2021-06-16T02:35:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 76,
      "id": "MDExOlB1bGxSZXF1ZXN0Njc0MDA0NzYz",
      "title": "clarify cwnd growth in convex region",
      "url": "https://github.com/NTAP/rfc8312bis/pull/76",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #69 ",
      "createdAt": "2021-06-20T09:40:17Z",
      "updatedAt": "2021-06-22T07:20:03Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "2660495987ec2472118d83c42083ed16767fe0fd",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "convex-growth",
      "headRefOid": "9e65823ad80e6856f90ba7ad5a349fd300bb476f",
      "closedAt": "2021-06-22T07:20:03Z",
      "mergedAt": "2021-06-22T07:20:03Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "594ebe73d2b0ee0fc99f8912ef56c6b763655013"
      },
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> \"Unless it is not overridden by AIMD window increase, CUBIC is very careful in this region\" should be \"Unless it is overridden by AIMD window increase, CUBIC is very careful in this region\"? Thank you\r\n\r\ndone",
          "createdAt": "2021-06-21T21:47:39Z",
          "updatedAt": "2021-06-21T21:47:39Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg3OTc3OTI1",
          "commit": {
            "abbreviatedOid": "fe7455d"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "\"Unless it is not overridden by AIMD window increase, CUBIC is very careful in this region\" should be \"Unless it is overridden by AIMD window increase, CUBIC is very careful in this region\"? Thank you",
          "createdAt": "2021-06-21T02:03:56Z",
          "updatedAt": "2021-06-21T02:03:56Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg4NjYxODg3",
          "commit": {
            "abbreviatedOid": "fe7455d"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-06-21T16:48:58Z",
          "updatedAt": "2021-06-21T16:50:16Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\ncareful in this region. The convex profile aims to\r\nincrease the window very slowly at the beginning when *cwnd* is\r\n```",
              "createdAt": "2021-06-21T16:48:58Z",
              "updatedAt": "2021-06-21T16:50:16Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\naround *W<sub>max</sub>* and then gradually increases its rate of increase.\r\n```",
              "createdAt": "2021-06-21T16:49:46Z",
              "updatedAt": "2021-06-21T16:50:16Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nUnless it is not overridden by the AIMD window increase, CUBIC is very\r\n```",
              "createdAt": "2021-06-21T16:49:57Z",
              "updatedAt": "2021-06-21T16:50:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg4ODg4NjI3",
          "commit": {
            "abbreviatedOid": "9e65823"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2021-06-21T21:48:59Z",
          "updatedAt": "2021-06-21T21:48:59Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg4OTA0MDAz",
          "commit": {
            "abbreviatedOid": "9e65823"
          },
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-06-21T22:16:41Z",
          "updatedAt": "2021-06-21T22:16:41Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg5MTQzNjUx",
          "commit": {
            "abbreviatedOid": "9e65823"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-06-22T07:19:44Z",
          "updatedAt": "2021-06-22T07:19:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 77,
      "id": "MDExOlB1bGxSZXF1ZXN0Njc1MjMyOTk2",
      "title": "add guidance for bytes acked and clarification for segments_acked",
      "url": "https://github.com/NTAP/rfc8312bis/pull/77",
      "state": "OPEN",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #67 ",
      "createdAt": "2021-06-22T09:13:22Z",
      "updatedAt": "2021-07-14T11:08:34Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "594ebe73d2b0ee0fc99f8912ef56c6b763655013",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "segment-or-bytes-acked",
      "headRefOid": "0caeda9d70699a41773c7a863afd0802ed94815b",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "See my comment in the review - is this always a decimal or only when <1?",
          "createdAt": "2021-06-22T16:52:52Z",
          "updatedAt": "2021-06-22T16:52:52Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> See my comment in the review - is this always a decimal or only when <1?\r\n\r\nIt is decimal always. Although most implementations don't do decimal computations and simply wait for one full congestion window to be acknowledged before incrementing the cwnd by alpha * 1 (segment)\r\n\r\n\r\n",
          "createdAt": "2021-06-23T20:57:53Z",
          "updatedAt": "2021-06-23T20:57:53Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I can't see Junho's and Yoshi's comment about SACK'ed bytes here.. was it deleted?",
          "createdAt": "2021-06-23T21:04:18Z",
          "updatedAt": "2021-06-23T21:04:18Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "For my sanity, I will paste it from my email,\r\nJunho said,\r\n> I think it's 1.5. Also another question - does it include SACK'd size?\r\n\r\nYoshi replied,\r\n>  think including SACKed bytes is an interesting question. I am thinking that if TCP receives SACKed packets, it means it's in recovery phase.\r\nIn my understanding, CUBIC doesn't touch the behavior in recovery phase. w_est will be initialized when TCP goes into congestion avoidance phase, which means after recovery phase has finished. So, I am thinking that we don't need to think about whether we should include SACKed bytes or not.\r\nBut, I might overlook something, please let me know if there's situations where CUBIC should handle SACKed packets.\r\n\r\n\r\nI agree with Yoshi, we don't talk about recovery phase in detail but we allow an implementation to use a recovery algorithm\r\n> For both packet loss\r\n   and congestion detection through ECN, the sender MAY employ a Fast\r\n   Recovery algorithm to gradually adjust the congestion window to its\r\n   new reduced _ssthresh_ value.",
          "createdAt": "2021-06-23T21:09:01Z",
          "updatedAt": "2021-06-23T21:09:01Z"
        },
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "I didn't remove my comment \u2753 \r\n\r\n> For my sanity, I will paste it from my email,\r\n> Junho said,\r\n> \r\n> > I think it's 1.5. Also another question - does it include SACK'd size?\r\n> \r\n> Yoshi replied,\r\n> \r\n> > think including SACKed bytes is an interesting question. I am thinking that if TCP receives SACKed packets, it means it's in recovery phase.\r\n> > In my understanding, CUBIC doesn't touch the behavior in recovery phase. w_est will be initialized when TCP goes into congestion avoidance phase, which means after recovery phase has finished. So, I am thinking that we don't need to think about whether we should include SACKed bytes or not.\r\n> > But, I might overlook something, please let me know if there's situations where CUBIC should handle SACKed packets.\r\n> \r\n> I agree with Yoshi, we don't talk about recovery phase in detail but we allow an implementation to use a recovery algorithm\r\n> \r\n> > For both packet loss\r\n> > and congestion detection through ECN, the sender MAY employ a Fast\r\n> > Recovery algorithm to gradually adjust the congestion window to its\r\n> > new reduced _ssthresh_ value.\r\n\r\nFor example, when the sender received an ACK which doesn't move snd.una but with one SACK record (dupack) which is not enough to trigger the congestion event. Similar thing can happen with RACK's reordering threshold I think.",
          "createdAt": "2021-06-23T21:31:53Z",
          "updatedAt": "2021-06-23T21:38:50Z"
        },
        {
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "body": "I see. yes, when we see small amount of re-ordering, you might receive SACKed packets.\r\nIn this case, I think you could include SACKed packets, but when it's ACKed accumulatively later, you will need to make sure you won't double count them.",
          "createdAt": "2021-06-23T22:15:09Z",
          "updatedAt": "2021-06-23T22:15:09Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Aren't SACK'ed segments (before congestion event) covered in SACK RFC6675?\r\nI would personally refrain from adding any SACK related details to Cubic or any specific congestion control spec.",
          "createdAt": "2021-06-23T22:38:00Z",
          "updatedAt": "2021-06-23T22:38:00Z"
        },
        {
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "body": "@goelvidhi @nsdyoshi thanks for insights!\r\n\r\nI asked about this because segments_acked is defined as \"acked size in segment(or bytes)\" and \"acked\" doesn't only means moving snd.una with SACK. Also QUIC RFC9002 \"acked packet\" always includes SACK'ed ones. So I thought the implementer might be confused what to use.\r\n\r\nAfter thinking a little more.. SACK is optional as far as I understand, I think it might be good to leave as is.",
          "createdAt": "2021-06-23T22:57:20Z",
          "updatedAt": "2021-06-23T22:57:20Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "The comments didn't get deleted, they are inside my PR review. Yes, this is confusing.",
          "createdAt": "2021-06-24T08:06:30Z",
          "updatedAt": "2021-06-24T08:06:30Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Should we make it clearer that this is always decimal, but stacks can be approximate in their math?",
          "createdAt": "2021-06-24T08:07:10Z",
          "updatedAt": "2021-06-24T08:07:10Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert, how does this look,\r\n\r\nNumber of MSS-sized segments acked when an ACK is received. This\r\n number is a decimal and it can be less than 1 when an ACK acknowledges a\r\n segment smaller than the MSS.",
          "createdAt": "2021-06-24T08:43:24Z",
          "updatedAt": "2021-06-24T08:43:59Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "I'd maybe say \"...is a decimal and can therefore take on non-integer values when an ACK acknowledges data that is not MSS-sized. Specifically, it can be less than 1 when an ACK acknowledges a segment smaller than the MSS...\" or something like that?",
          "createdAt": "2021-06-24T08:55:19Z",
          "updatedAt": "2021-06-24T08:55:19Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "ok, I took your suggestion and made some minor edits. Please take a look.\r\n\r\nFor some reason, the inclusive check is getting cancelled immediately after I push.",
          "createdAt": "2021-06-24T09:01:50Z",
          "updatedAt": "2021-06-24T09:01:50Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "I need to look into why, ignore for now",
          "createdAt": "2021-06-24T10:30:35Z",
          "updatedAt": "2021-06-24T10:30:35Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert, this PR is ready to go once you approve it. Not sure if we need to fix the inclusivity check before merging.",
          "createdAt": "2021-06-25T08:07:00Z",
          "updatedAt": "2021-06-25T08:07:00Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert, should we merge this PR?",
          "createdAt": "2021-07-06T21:49:15Z",
          "updatedAt": "2021-07-06T21:49:15Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg5MzA2Mzc4",
          "commit": {
            "abbreviatedOid": "e7cae81"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-06-22T10:00:20Z",
          "updatedAt": "2021-06-22T10:02:04Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nImplementations can use bytes to express window sizes, which would\r\n```",
              "createdAt": "2021-06-22T10:00:21Z",
              "updatedAt": "2021-06-22T10:02:04Z"
            },
            {
              "originalPosition": 18,
              "body": "What if an ACK ACKs 1.5 MSS-sized segments? Is it 1 or 1.5 then?\r\n```suggestion\r\nNumber of MSS-sized segments acked when an ACK is received. This\r\nnumber can be a decimal less than 1 when an ACK acknowledges a\r\nsegment smaller than the MSS.\r\n```",
              "createdAt": "2021-06-22T10:01:48Z",
              "updatedAt": "2021-06-22T10:02:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg5NDkyNzk5",
          "commit": {
            "abbreviatedOid": "e7cae81"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you!",
          "createdAt": "2021-06-22T13:17:20Z",
          "updatedAt": "2021-06-22T13:17:20Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjkwMzQwODEx",
          "commit": {
            "abbreviatedOid": "72ee457"
          },
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-06-23T08:10:11Z",
          "updatedAt": "2021-06-23T08:10:11Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjkxMDM2ODQ5",
          "commit": {
            "abbreviatedOid": "72ee457"
          },
          "author": "junhochoi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-23T18:57:00Z",
          "updatedAt": "2021-06-23T18:57:00Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I think 1.5 is allowed.\r\nAlso another question - does it include SACK'd size?",
              "createdAt": "2021-06-23T18:57:00Z",
              "updatedAt": "2021-06-23T18:57:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjkxMDkxMzM4",
          "commit": {
            "abbreviatedOid": "72ee457"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-23T20:04:35Z",
          "updatedAt": "2021-06-23T20:04:35Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "@goelvidhi?",
              "createdAt": "2021-06-23T20:04:35Z",
              "updatedAt": "2021-06-23T20:04:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjkxMTExNjc2",
          "commit": {
            "abbreviatedOid": "72ee457"
          },
          "author": "nsdyoshi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-23T20:30:16Z",
          "updatedAt": "2021-06-23T20:30:17Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I think including SACKed bytes is an interesting question. I am thinking that if TCP receives SACKed packets, it means it's in recovery phase.\r\n\r\nIn my understanding, CUBIC doesn't touch the behavior in recovery phase. w_est will be initialized when TCP goes into congestion avoidance phase, which means after recovery phase has finished. So, I am thinking that we don't need to think about whether we should include SACKed bytes or not. \r\nBut, I might overlook something, please let me know if there's situations where CUBIC should handle SACKed packets.",
              "createdAt": "2021-06-23T20:30:17Z",
              "updatedAt": "2021-06-23T20:30:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA0MDM2MjQ3",
          "commit": {
            "abbreviatedOid": "1f7843e"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "\"Non-integer\" is less accurate",
          "createdAt": "2021-07-12T12:09:51Z",
          "updatedAt": "2021-07-12T12:10:28Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nnumber will be a decimal value when an ACK acknowledges an amount of data\r\n```",
              "createdAt": "2021-07-12T12:09:51Z",
              "updatedAt": "2021-07-12T12:10:29Z"
            }
          ]
        }
      ]
    }
  ]
}